{
  "version": 3,
  "sources": ["../../stacks/index.js", "../../stacks/ApiStack.js", "../../stacks/StorageStack.js", "../../stacks/AuthStack.js"],
  "sourcesContent": ["import ApiStack from \"./ApiStack\";\nimport StorageStack from \"./StorageStack\";\nimport AuthStack from \"./AuthStack\";\n\n\n\nexport default function main(app) {\n  const storageStack = new StorageStack(app, \"storage\");\n\n  const apiStack = new ApiStack(app, \"api\", {\n    table: storageStack.table,\n  });\n\n  new AuthStack(app, \"auth\", {\n    api: apiStack.api,\n    bucket: storageStack.bucket,\n  });\n\n\n}", "import * as sst from \"@serverless-stack/resources\";\n\nexport default class ApiStack extends sst.Stack {\n  // Public reference to the API\n  api;\n\n  constructor(scope, id, props) {\n    super(scope, id, props);\n\n    const { table } = props;\n\n    // Create the API\n    this.api = new sst.Api(this, \"Api\", {\n      defaultAuthorizationType: \"AWS_IAM\",\n      defaultFunctionProps: {\n        environment: {\n          TABLE_NAME: table.tableName,\n        },\n      },\n      routes: {\n        \"POST   /notes\": \"src/create.main\",\n        \"GET    /notes/{id}\": \"src/get.main\",\n        \"GET    /notes\": \"src/list.main\",\n        \"PUT    /notes/{id}\": \"src/update.main\",\n        \"DELETE /notes/{id}\": \"src/delete.main\",\n      },\n    });\n\n    // Allow the API to access the table\n    this.api.attachPermissions([table]);\n\n    // Show the API endpoint in the output\n    this.addOutputs({\n      ApiEndpoint: this.api.url,\n    });\n  }\n}", "import * as sst from \"@serverless-stack/resources\";\n\nexport default class StorageStack extends sst.Stack {\n  // Public reference to the bucket\n  bucket;\n  // Public reference to the table\n  table;\n\n  constructor(scope, id, props) {\n    super(scope, id, props);\n\n    // Create an S3 bucket\n    this.bucket = new sst.Bucket(this, \"Uploads\");\n\n    // Create the DynamoDB table\n    this.table = new sst.Table(this, \"Notes\", {\n      fields: {\n        userId: sst.TableFieldType.STRING,\n        noteId: sst.TableFieldType.STRING,\n      },\n      primaryIndex: { partitionKey: \"userId\", sortKey: \"noteId\" },\n    });\n  }\n}", "import * as iam from \"aws-cdk-lib/aws-iam\";\nimport * as sst from \"@serverless-stack/resources\";\n\nexport default class AuthStack extends sst.Stack {\n  // Public reference to the auth instance\n  auth;\n\n  constructor(scope, id, props) {\n    super(scope, id, props);\n\n    const { api, bucket } = props;\n\n    // Create a Cognito User Pool and Identity Pool\n    this.auth = new sst.Auth(this, \"Auth\", {\n      cognito: {\n        userPool: {\n          // Users can login with their email and password\n          signInAliases: { email: true },\n        },\n      },\n    });\n\n    this.auth.attachPermissionsForAuthUsers([\n      // Allow access to the API\n      api,\n      // Policy granting access to a specific folder in the bucket\n      new iam.PolicyStatement({\n        actions: [\"s3:*\"],\n        effect: iam.Effect.ALLOW,\n        resources: [\n          bucket.bucketArn + \"/private/${cognito-identity.amazonaws.com:sub}/*\",\n        ],\n      }),\n    ]);\n\n    // Show the auth resources in the output\n    this.addOutputs({\n      Region: scope.region,\n      UserPoolId: this.auth.cognitoUserPool.userPoolId,\n      IdentityPoolId: this.auth.cognitoCfnIdentityPool.ref,\n      UserPoolClientId: this.auth.cognitoUserPoolClient.userPoolClientId,\n    });\n  }\n}"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;;;ACAA,UAAqB;AAErB,6BAA0C,UAAM;AAAA,EAE9C;AAAA,EAEA,YAAY,OAAO,IAAI,OAAO;AAC5B,UAAM,OAAO,IAAI;AAEjB,UAAM,EAAE,UAAU;AAGlB,SAAK,MAAM,IAAQ,QAAI,MAAM,OAAO;AAAA,MAClC,0BAA0B;AAAA,MAC1B,sBAAsB;AAAA,QACpB,aAAa;AAAA,UACX,YAAY,MAAM;AAAA;AAAA;AAAA,MAGtB,QAAQ;AAAA,QACN,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,iBAAiB;AAAA,QACjB,sBAAsB;AAAA,QACtB,sBAAsB;AAAA;AAAA;AAK1B,SAAK,IAAI,kBAAkB,CAAC;AAG5B,SAAK,WAAW;AAAA,MACd,aAAa,KAAK,IAAI;AAAA;AAAA;AAAA;AA/B5B;;;ACFA,WAAqB;AAErB,iCAA8C,WAAM;AAAA,EAElD;AAAA,EAEA;AAAA,EAEA,YAAY,OAAO,IAAI,OAAO;AAC5B,UAAM,OAAO,IAAI;AAGjB,SAAK,SAAS,IAAQ,YAAO,MAAM;AAGnC,SAAK,QAAQ,IAAQ,WAAM,MAAM,SAAS;AAAA,MACxC,QAAQ;AAAA,QACN,QAAQ,AAAI,oBAAe;AAAA,QAC3B,QAAQ,AAAI,oBAAe;AAAA;AAAA,MAE7B,cAAc,EAAE,cAAc,UAAU,SAAS;AAAA;AAAA;AAAA;AAlBvD;;;ACFA,UAAqB;AACrB,WAAqB;AAErB,8BAA2C,WAAM;AAAA,EAE/C;AAAA,EAEA,YAAY,OAAO,IAAI,OAAO;AAC5B,UAAM,OAAO,IAAI;AAEjB,UAAM,EAAE,KAAK,WAAW;AAGxB,SAAK,OAAO,IAAQ,UAAK,MAAM,QAAQ;AAAA,MACrC,SAAS;AAAA,QACP,UAAU;AAAA,UAER,eAAe,EAAE,OAAO;AAAA;AAAA;AAAA;AAK9B,SAAK,KAAK,8BAA8B;AAAA,MAEtC;AAAA,MAEA,IAAQ,oBAAgB;AAAA,QACtB,SAAS,CAAC;AAAA,QACV,QAAQ,AAAI,WAAO;AAAA,QACnB,WAAW;AAAA,UACT,OAAO,YAAY;AAAA;AAAA;AAAA;AAMzB,SAAK,WAAW;AAAA,MACd,QAAQ,MAAM;AAAA,MACd,YAAY,KAAK,KAAK,gBAAgB;AAAA,MACtC,gBAAgB,KAAK,KAAK,uBAAuB;AAAA,MACjD,kBAAkB,KAAK,KAAK,sBAAsB;AAAA;AAAA;AAAA;AArCxD;;;AHGe,cAAc,KAAK;AAChC,QAAM,eAAe,IAAI,aAAa,KAAK;AAE3C,QAAM,WAAW,IAAI,SAAS,KAAK,OAAO;AAAA,IACxC,OAAO,aAAa;AAAA;AAGtB,MAAI,UAAU,KAAK,QAAQ;AAAA,IACzB,KAAK,SAAS;AAAA,IACd,QAAQ,aAAa;AAAA;AAAA;AATD;",
  "names": []
}
