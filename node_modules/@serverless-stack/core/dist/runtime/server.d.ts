import * as Runner from "./runner";
declare type ServerOpts = {
    port: number;
};
declare type Payload = {
    event: any;
    context: any;
    deadline: number;
};
declare type InvokeOpts = {
    function: Runner.Opts;
    payload: Payload;
    env: Record<string, string>;
};
declare type ResponseSuccess = {
    type: "success";
    data: any;
};
declare type ResponseTimeout = {
    type: "timeout";
};
declare type ResponseFailure = {
    type: "failure";
    error: Error;
    rawError: any;
};
declare type Response = ResponseSuccess | ResponseFailure | ResponseTimeout;
declare type EventHandler<T> = (arg: T) => void;
declare class EventDelegate<T> {
    private handlers;
    add(handler: EventHandler<T>): EventHandler<T>;
    remove(handler: EventHandler<T>): void;
    trigger(input: T): void;
}
export declare class Server {
    private readonly app;
    private readonly pools;
    private readonly opts;
    private readonly lastRequest;
    onStdOut: EventDelegate<{
        requestId: string;
        data: string;
    }>;
    onStdErr: EventDelegate<{
        requestId: string;
        data: string;
    }>;
    constructor(opts: ServerOpts);
    listen(): void;
    private pool;
    private next;
    invoke(opts: InvokeOpts): Promise<unknown>;
    drain(opts: Runner.Opts): Promise<void>;
    private static generateFunctionID;
    response(fun: string, request: string, response: Response): void;
    private trigger;
}
export {};
