"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Server = void 0;
const express_1 = __importDefault(require("express"));
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const path_1 = __importDefault(require("path"));
const logger_1 = require("../logger");
const crypto_1 = __importDefault(require("crypto"));
const error_1 = require("./error");
const uuid_1 = require("uuid");
const logger = (0, logger_1.getChildLogger)("client");
const Runner = __importStar(require("./runner"));
const API_VERSION = "2018-06-01";
class EventDelegate {
    constructor() {
        this.handlers = [];
    }
    add(handler) {
        this.handlers.push(handler);
        return handler;
    }
    remove(handler) {
        this.handlers = this.handlers.filter((h) => h !== handler);
    }
    trigger(input) {
        for (const h of this.handlers) {
            h(input);
        }
    }
}
class Server {
    constructor(opts) {
        this.pools = {};
        this.lastRequest = {};
        this.onStdOut = new EventDelegate();
        this.onStdErr = new EventDelegate();
        this.app = (0, express_1.default)();
        this.app.use(express_1.default.json({
            strict: false,
            type: ["application/json", "application/*+json"],
            limit: "10mb",
        }));
        this.opts = opts;
        this.app.post(`/:proc/:fun/${API_VERSION}/runtime/init/error`, async (_req, res) => {
            res.json("ok");
        });
        this.app.get(`/:proc/:fun/${API_VERSION}/runtime/invocation/next`, async (req, res) => {
            logger.debug("Worker waiting for function", req.params.fun);
            const payload = await this.next(req.params.fun);
            logger.debug("Sending next payload", payload.context.awsRequestId, req.params.fun, payload.event);
            res.set({
                "Lambda-Runtime-Aws-Request-Id": payload.context.awsRequestId,
                "Lambda-Runtime-Deadline-Ms": payload.deadline,
                "Lambda-Runtime-Invoked-Function-Arn": payload.context.invokedFunctionArn,
                "Lambda-Runtime-Client-Context": JSON.stringify(payload.context.identity || {}),
                "Lambda-Runtime-Cognito-Identity": JSON.stringify(payload.context.clientContext || {}),
            });
            this.lastRequest[req.params.proc] = payload.context.awsRequestId;
            res.json(payload.event);
        });
        this.app.post(`/:proc/:fun/${API_VERSION}/runtime/invocation/:awsRequestId/response`, (req, res) => {
            logger.debug("Received response for", req.params.awsRequestId, req.params.fun);
            this.response(req.params.fun, req.params.awsRequestId, {
                type: "success",
                data: req.body,
            });
            res.status(202).send();
        });
        this.app.post(`/:proc/:fun/${API_VERSION}/runtime/invocation/:awsRequestId/error`, (req, res) => {
            logger.debug("Received error for", req.params.awsRequestId, req.params.fun);
            this.response(req.params.fun, req.params.awsRequestId, {
                type: "failure",
                error: (0, error_1.serializeError)({
                    name: req.body.errorType,
                    message: req.body.errorMessage,
                    stack: req.body.trace,
                }),
                rawError: req.body,
            });
            res.status(202).send();
        });
    }
    listen() {
        logger.debug("Starting runtime server on port:", this.opts.port);
        this.app.listen({
            port: this.opts.port,
        });
    }
    pool(fun) {
        const result = this.pools[fun] || {
            pending: [],
            waiting: [],
            processes: [],
            requests: {},
            working: {},
        };
        this.pools[fun] = result;
        return result;
    }
    async next(fun) {
        const pool = this.pool(fun);
        // Process pending payloads if any
        const pending = pool.pending.pop();
        if (pending)
            return pending;
        return new Promise((resolve) => {
            pool.waiting.push(resolve);
        });
    }
    async invoke(opts) {
        const fun = Server.generateFunctionID(opts.function);
        const pool = this.pool(fun);
        return new Promise((resolve) => {
            pool.requests[opts.payload.context.awsRequestId] = resolve;
            this.trigger(fun, opts);
        });
    }
    async drain(opts) {
        const fun = Server.generateFunctionID(opts);
        logger.debug("Draining function", fun);
        const pool = this.pool(fun);
        for (const proc of pool.processes) {
            proc.kill();
        }
        pool.waiting = [];
        pool.processes = [];
    }
    static generateFunctionID(opts) {
        return crypto_1.default
            .createHash("sha256")
            .update(path_1.default.normalize(opts.srcPath))
            .digest("hex")
            .substr(0, 8);
    }
    response(fun, request, response) {
        const pool = this.pool(fun);
        const r = pool.requests[request];
        if (!r)
            return;
        delete pool.requests[request];
        r(response);
    }
    async trigger(fun, opts) {
        logger.debug("Triggering", fun);
        const pool = this.pool(fun);
        const w = pool.waiting.pop();
        if (w)
            return w(opts.payload);
        // Spawn new worker if one not immediately available
        pool.pending.push(opts.payload);
        const cmd = Runner.resolve(opts.function.runtime)(opts.function);
        const id = (0, uuid_1.v4)();
        const api = `127.0.0.1:${this.opts.port}/${id}/${fun}`;
        const env = {
            ...opts.env,
            ...cmd.env,
            AWS_LAMBDA_RUNTIME_API: api,
            IS_LOCAL: "true",
        };
        logger.debug("Spawning", id, cmd.command);
        const proc = (0, cross_spawn_1.default)(cmd.command, cmd.args, {
            env,
        });
        proc.stdout.on("data", (data) => this.onStdOut.trigger({
            data: data.toString(),
            requestId: this.lastRequest[id],
        }));
        proc.stderr.on("data", (data) => this.onStdErr.trigger({
            data: data.toString(),
            requestId: this.lastRequest[id],
        }));
        pool.processes.push(proc);
    }
}
exports.Server = Server;
