"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolve = exports.DotnetRunner = exports.PythonRunner = exports.GoRunner = exports.NodeRunner = void 0;
const path_1 = __importDefault(require("path"));
const os_1 = __importDefault(require("os"));
const util_1 = require("../util");
const NodeRunner = (opts) => {
    const handler = path_1.default
        .join(opts.transpiledHandler.srcPath, opts.transpiledHandler.entry)
        .replace(".js", "." + opts.transpiledHandler.handler);
    return {
        command: "npx",
        args: ["aws-lambda-ric", handler],
        env: {
            AWS_LAMBDA_NODEJS_USE_ALTERNATIVE_CLIENT_1: "true",
        },
    };
};
exports.NodeRunner = NodeRunner;
const GoRunner = (opts) => {
    return {
        command: opts.transpiledHandler.entry,
        args: [],
        env: {},
    };
};
exports.GoRunner = GoRunner;
const PythonRunner = (opts) => {
    const PATH = (() => {
        if (process.env.VIRTUAL_ENV) {
            const runtimeDir = os_1.default.platform() === "win32" ? "Scripts" : "bin";
            return [
                path_1.default.join(process.env.VIRTUAL_ENV, runtimeDir),
                path_1.default.delimiter,
                process.env.PATH,
            ].join("");
        }
        return process.env.PATH;
    })();
    return {
        command: os_1.default.platform() === "win32" ? "python.exe" : opts.runtime.split(".")[0],
        args: [
            "-u",
            path_1.default.join(util_1.Paths.OWN_PATH, "../src", "runtime", "shells", "bootstrap.py"),
            path_1.default
                .join(opts.transpiledHandler.srcPath, opts.transpiledHandler.entry)
                .split(path_1.default.sep)
                .join("."),
            opts.transpiledHandler.srcPath,
            opts.transpiledHandler.handler,
        ],
        env: {
            PATH,
        },
    };
};
exports.PythonRunner = PythonRunner;
const DotnetRunner = (opts) => {
    return {
        command: "dotnet",
        args: [
            "exec",
            path_1.default.join(util_1.Paths.OWN_PATH, "../src/", "runtime", "shells", "dotnet-bootstrap", "release", "dotnet-bootstrap.dll"),
            opts.transpiledHandler.entry,
            opts.transpiledHandler.handler,
        ],
        env: {},
    };
};
exports.DotnetRunner = DotnetRunner;
function resolve(runtime) {
    if (runtime.startsWith("node"))
        return exports.NodeRunner;
    if (runtime.startsWith("go"))
        return exports.GoRunner;
    if (runtime.startsWith("python"))
        return exports.PythonRunner;
    if (runtime.startsWith("dotnetcore"))
        return exports.DotnetRunner;
    throw new Error(`Unknown runtime ${runtime}`);
}
exports.resolve = resolve;
