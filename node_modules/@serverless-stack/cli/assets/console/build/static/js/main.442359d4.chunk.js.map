{"version":3,"sources":["config.js","components/logo.svg","components/BrandNavbar.js","components/Button.js","components/ErrorAlert.js","components/StatusPanel.js","components/WsStatusPanel.js","components/KeyValueItem.js","components/CollapsiblePanel.js","components/ApiConstructPanel.js","components/CronConstructPanel.js","components/BasicConstructPanel.js","components/PayloadForm.js","components/QueueConstructPanel.js","components/TopicConstructPanel.js","components/WebSocketApiConstructPanel.js","components/KinesisStreamConstructPanel.js","lib/errorLib.js","components/ConstructPanel.js","components/LoadingSpinner.js","components/ConstructsPanel.js","components/RuntimeLogsPanel.js","App.js","reportWebVitals.js","index.js"],"names":["config","docsUrl","slackUrl","BrandNavbar","statusPanel","Navbar","className","variant","Container","fluid","Brand","href","alt","src","logo","width","Toggle","Collapse","Nav","Link","title","target","rel","size","variantMap","link","danger","primary","secondary","Button","loading","props","disabled","children","ErrorAlert","message","shown","useRef","current","window","alert","StatusPanel","loadError","infraBuildStatus","infraBuildErrors","infraDeployStatus","infraDeployErrors","infraCanDeploy","infraCanQueueDeploy","infraDeployQueued","lambdaBuildStatus","lambdaBuildErrors","handleDeploy","errorCount","warningCount","useState","open","setOpen","error","setError","deploying","setDeploying","isEnabled","copy","getButtonStatusCopy","isButtonEnabled","buttonCopy","openCs","enabledCs","onDeploy","a","useEffect","forEach","e","in","undefined","length","map","key","type","renderInfraStatus","renderLambdaStatus","onClick","building","Spinner","animation","role","renderBuildSpinner","WsStatusPanel","connected","cs","KeyValueItem","name","values","textareaRefs","showStatus","setShowStatus","handleBlur","value","index","url","text","replace","readOnly","onBlur","ref","el","select","document","execCommand","focus","handleCopy","queryCommandSupported","CollapsiblePanel","expanded","ApiConstructPanel","httpApiEndpoint","restApiEndpoint","customDomainUrl","routes","Object","per","endpoint","routeKey","routePath","method","path","formatRoute","CronConstructPanel","triggering","onTrigger","schedule","ruleName","functionName","BasicConstructPanel","keyValues","entries","filter","PayloadForm","label","button","Form","Group","controlId","Label","defaultPayload","JSON","stringify","data","QueueConstructPanel","payload","setPayload","queueUrl","Control","rows","as","onChange","TopicConstructPanel","topicArn","WebSocketApiConstructPanel","route","KinesisStreamConstructPanel","streamName","errorHandler","console","log","ConstructPanel","construct","handleTrigger","setTriggering","identityPoolId","renderAuth","renderApi","renderApiGatewayV1Api","URL","renderApolloApi","graphqlApiEndpoint","realtimeApiEndpoint","renderAppSyncApi","renderWebSocketApi","renderQueue","renderTopic","renderCron","bucketName","renderBucket","tableName","renderTable","eventBusName","renderEventBus","renderKinesisStream","renderStaticSite","renderReactStaticSite","renderNextjsSite","renderScript","renderConstruct","LoadingSpinner","ConstructsPanel","constructs","loadingCs","RuntimeLogsPanel","logs","onClear","scrollEl","oldScrollHeight","oldClientHeight","hasLogs","logsCount","useLayoutEffect","scrollTop","scrollHeight","clientHeight","GET_CONSTRUCTS","gql","GET_RUNTIME_LOGS","GET_INFRA_STATUS","GET_LAMBDA_STATUS","CONSTRUCTS_SUBSCRIPTION","RUNTIME_LOGS_SUBSCRIPTION","INFRA_STATUS_SUBSCRIPTION","LAMBDA_STATUS_SUBSCRIPTION","INVOKE","DEPLOY","App","wsClient","wsConnected","setWsConnected","onConnected","onWsConnected","onReconnected","onDisconnected","useMutation","invoke","deploy","useQuery","loadingConstructs","constructsError","subscribeToConstructs","subscribeToMore","getConstructs","parse","loadingRuntimeLog","runtimeLogError","runtimeLogs","refetchRuntimeLogs","refetch","subscribeToRuntimeLogs","loadingInfraStatus","infraStatusError","infraStatus","subscribeToInfraStatus","loadingLambdaStatus","lambdaStatusError","lambdaStatus","subscribeToLambdaStatus","variables","client","clearStore","location","reload","updateQuery","prev","subscriptionData","constructsUpdated","getRuntimeLogs","runtimeLogAdded","getInfraStatus","infraStatusUpdated","getLambdaStatus","lambdaStatusUpdated","ApolloConsumer","onClearRuntimeLogs","buildStatus","buildErrors","deployStatus","deployErrors","canDeploy","canQueueDeploy","deployQueued","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","hostname","port","process","REACT_APP_SST_PORT","httpLink","HttpLink","uri","SubscriptionClient","reconnect","wsLink","WebSocketLink","splitLink","split","query","definition","getMainDefinition","kind","operation","ApolloClient","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","getElementById"],"mappings":"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","file":"static/js/main.442359d4.chunk.js","sourcesContent":["const config = {\n  docsUrl: \"https://docs.serverless-stack.com/\",\n  slackUrl: \"https://serverless-stack.slack.com\",\n};\n\nexport default config;\n","export default __webpack_public_path__ + \"static/media/logo.352c4018.svg\";","import Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport { Slack, BookFill } from \"react-bootstrap-icons\";\nimport Container from \"react-bootstrap/Container\";\nimport config from \"../config\";\nimport \"./BrandNavbar.scss\";\n\nimport logo from \"./logo.svg\";\n\nexport default function BrandNavbar({ statusPanel }) {\n  return (\n    <Navbar className=\"BrandNavbar\" variant=\"dark\">\n      <Container fluid>\n        <Navbar.Brand href=\"/\">\n          <img\n            alt=\"\"\n            src={logo}\n            width=\"100\"\n            className=\"d-inline-block align-top\"\n          />\n        </Navbar.Brand>\n        <Navbar.Toggle />\n        <Navbar.Collapse>{statusPanel}</Navbar.Collapse>\n        <Navbar.Collapse className=\"justify-content-end links\">\n          <Nav.Link\n            title=\"Slack\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            className=\"slack\"\n            href={config.slackUrl}\n          >\n            <Slack size={15} />\n          </Nav.Link>\n          <Nav.Link\n            title=\"Docs\"\n            target=\"_blank\"\n            rel=\"noreferrer\"\n            href={config.docsUrl}\n          >\n            <BookFill />\n          </Nav.Link>\n        </Navbar.Collapse>\n      </Container>\n    </Navbar>\n  );\n}\n","import BsButton from \"react-bootstrap/Button\";\nimport { ArrowRepeat } from \"react-bootstrap-icons\";\nimport \"./Button.scss\";\n\nconst variantMap = {\n  link: \"link\",\n  danger: \"outline-danger\",\n  primary: \"outline-warning\",\n  secondary: \"outline-light\",\n};\n\nexport default function Button({ loading = false, ...props }) {\n  props = {\n    ...props,\n    size: props.size || \"lg\",\n    disabled: props.disabled || loading,\n    className: `Button ${props.className || \"\"}`,\n    variant: variantMap[props.variant] || variantMap.secondary,\n  };\n\n  return (\n    <BsButton {...props}>\n      {loading && <ArrowRepeat className=\"spinner\" />}\n      {props.children}\n    </BsButton>\n  );\n}\n","import { useRef } from \"react\";\n\nexport default function ErrorAlert({ message }) {\n  const shown = useRef(false);\n\n  if (!shown.current) {\n    window.alert(message);\n    shown.current = true;\n  }\n\n  return null;\n}\n","import { useState, useEffect } from \"react\";\nimport Ansi from \"ansi-to-react\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport { XCircleFill, ExclamationTriangleFill } from \"react-bootstrap-icons\";\nimport Button from \"./Button\";\nimport ErrorAlert from \"./ErrorAlert\";\nimport \"./StatusPanel.scss\";\n\nexport default function StatusPanel({\n  loading,\n  loadError,\n  infraBuildStatus,\n  infraBuildErrors = [],\n  infraDeployStatus,\n  infraDeployErrors = [],\n  infraCanDeploy,\n  infraCanQueueDeploy,\n  infraDeployQueued,\n  lambdaBuildStatus,\n  lambdaBuildErrors = [],\n  handleDeploy,\n}) {\n  let errorCount = 0;\n  let warningCount = 0;\n\n  const [open, setOpen] = useState(false);\n  const [error, setError] = useState(null);\n  const [deploying, setDeploying] = useState(false);\n\n  const [isButtonEnabled, buttonCopy] = getButtonStatusCopy();\n\n  const openCs = open ? \"\" : \"collapsed\";\n  const enabledCs = isButtonEnabled ? \"enabled\" : \"\";\n\n  useEffect(() => {\n    if (infraBuildStatus === \"building\" || lambdaBuildStatus === \"building\") {\n      setOpen(false);\n    }\n  }, [infraBuildStatus, lambdaBuildStatus]);\n\n  if (!loading && !loadError) {\n    [...infraBuildErrors, ...infraDeployErrors, ...lambdaBuildErrors].forEach(\n      (e) => {\n        errorCount += e.errorCount || 0;\n        warningCount += e.warningCount || 0;\n      }\n    );\n  }\n\n  //////////////\n  // Callbacks\n  //////////////\n\n  async function onDeploy() {\n    setDeploying(true);\n\n    try {\n      await handleDeploy();\n    } catch (e) {\n      setError(e);\n    }\n\n    setDeploying(false);\n  }\n\n  //////////////\n  // Functions\n  //////////////\n\n  function getButtonStatusCopy() {\n    let isEnabled;\n    let copy;\n\n    if (infraCanDeploy) {\n      if (infraDeployStatus === \"failed\") {\n        isEnabled = true;\n        copy = \"Retry\";\n      } else {\n        isEnabled = true;\n        copy = \"Deploy\";\n      }\n    } else if (infraCanQueueDeploy) {\n      isEnabled = true;\n      copy = \"Queue\";\n    } else if (infraDeployQueued) {\n      isEnabled = false;\n      copy = \"Queued\";\n    } else {\n      isEnabled = false;\n      copy = \"Deploy\";\n    }\n\n    return [isEnabled, copy];\n  }\n\n  function renderBuildCounts() {\n    return (\n      (errorCount > 0 || warningCount > 0) && (\n        <div className=\"counts\" onClick={() => setOpen(!open)}>\n          {errorCount > 0 && (\n            <span className=\"errors\">\n              <XCircleFill size={14} />\n              <span>{errorCount}</span>\n            </span>\n          )}\n          {warningCount > 0 && (\n            <span className=\"warnings\">\n              <ExclamationTriangleFill size={14} />\n              <span>{warningCount}</span>\n            </span>\n          )}\n        </div>\n      )\n    );\n  }\n\n  function renderInfraStatus() {\n    if (infraBuildStatus === undefined) {\n      return;\n    }\n\n    return (\n      (infraBuildErrors.length > 0 || infraDeployErrors.length > 0) && (\n        <>\n          <h3>\n            <span>Infrastructure</span>\n          </h3>\n          {infraBuildErrors.length > 0 && (\n            <div className=\"content\">\n              {infraBuildErrors.map(({ type, message }, key) => (\n                <div key={key} className=\"error-type\">\n                  <h5>{type} Errors</h5>\n                  <pre>\n                    <Ansi>{message}</Ansi>\n                  </pre>\n                </div>\n              ))}\n            </div>\n          )}\n          {infraDeployErrors.length > 0 && (\n            <div className=\"content\">\n              {infraDeployErrors.map(({ type, message }, key) => (\n                <div key={key} className=\"error-type\">\n                  <h5>{type} Errors</h5>\n                  <pre>\n                    <Ansi>{message}</Ansi>\n                  </pre>\n                </div>\n              ))}\n            </div>\n          )}\n        </>\n      )\n    );\n  }\n\n  function renderLambdaStatus() {\n    if (lambdaBuildStatus === undefined) {\n      return;\n    }\n\n    return (\n      lambdaBuildErrors.length > 0 && (\n        <>\n          <h3>\n            <span>Functions</span>\n          </h3>\n          <div className=\"content\">\n            {lambdaBuildErrors.map(({ type, message }, key) => (\n              <div key={key} className=\"error-type\">\n                <h5>{type} Errors</h5>\n                <pre>\n                  <Ansi>{message}</Ansi>\n                </pre>\n              </div>\n            ))}\n          </div>\n        </>\n      )\n    );\n  }\n\n  function renderDeployButton() {\n    return (\n      <Button\n        size=\"sm\"\n        onClick={onDeploy}\n        loading={deploying}\n        disabled={!isButtonEnabled}\n        variant={isButtonEnabled ? \"secondary\" : \"primary\"}\n      >\n        {buttonCopy}\n      </Button>\n    );\n  }\n\n  function renderBuildSpinner() {\n    const building =\n      infraBuildStatus === \"building\" || lambdaBuildStatus === \"building\";\n    const deploying = infraDeployStatus === \"deploying\";\n\n    return (\n      (building || deploying) && (\n        <span className=\"spinner\">\n          <Spinner\n            size=\"sm\"\n            animation=\"border\"\n            variant=\"secondary\"\n            role=\"status\"\n          >\n            <span className=\"visually-hidden\">Loading...</span>\n          </Spinner>\n          {building && <span className=\"building\">Building</span>}\n          {deploying && <span className=\"deploying\">Deploying</span>}\n        </span>\n      )\n    );\n  }\n\n  function renderWatcherMessage() {\n    return (\n      errorCount === 0 &&\n      warningCount === 0 && (\n        <div className=\"watcher-message\">Watching changes&hellip;</div>\n      )\n    );\n  }\n\n  return (\n    <div className={`StatusPanel ${openCs} ${enabledCs}`}>\n      {error && <ErrorAlert message={error.message} />}\n      {!loading && !loadError && (\n        <Collapse in={open}>\n          <div className=\"error-logs\">\n            <div>\n              <div className=\"header\">Errors</div>\n              <div className=\"scroll-content\">\n                {renderInfraStatus()}\n                {renderLambdaStatus()}\n              </div>\n            </div>\n          </div>\n        </Collapse>\n      )}\n      <div className=\"footer\">\n        <div className=\"status\">\n          {loading && <span>&nbsp;</span>}\n          {loadError && <p className=\"error\">Failed to load</p>}\n          {!loading && !loadError && (\n            <>\n              {renderBuildCounts()}\n              {renderWatcherMessage()}\n            </>\n          )}\n        </div>\n        <div className=\"controls\">\n          {renderBuildSpinner()}\n          {renderDeployButton()}\n        </div>\n      </div>\n    </div>\n  );\n}\n","import \"./WsStatusPanel.scss\";\n\nexport default function WsStatusPanel({ connected = false }) {\n  const cs = connected ? \"connected\" : \"disconnected\";\n\n  return (\n    <div\n      className={`WsStatusPanel ${cs}`}\n      title={\n        connected\n          ? \"Connected to local dev environment\"\n          : \"Not connected to local dev environment\"\n      }\n    >\n      <div className=\"indicator\"></div>\n      <span>{connected ? \"Connected\" : \"Disconnected\"}</span>\n    </div>\n  );\n}\n","import { useRef, useState } from \"react\";\nimport { Clipboard } from \"react-bootstrap-icons\";\nimport Button from \"./Button\";\nimport \"./KeyValueItem.scss\";\n\nexport default function KeyValueItem({ name, values, ...props }) {\n  const textareaRefs = useRef({});\n  const [showStatus, setShowStatus] = useState(false);\n\n  function formatUrl(url) {\n    return url.replace(/^https?:\\/\\//, \"\");\n  }\n\n  function handleCopy(value, index) {\n    textareaRefs.current[index].select();\n    document.execCommand(\"copy\");\n    textareaRefs.current[index].focus();\n    setShowStatus(index);\n  }\n\n  function handleBlur() {\n    setShowStatus(false);\n  }\n\n  return (\n    <div className=\"KeyValueItem\">\n      <p className=\"name\">{name}</p>\n      {values.map((value, index) => (\n        <div key={index} className=\"value\">\n          <div>\n            {value.url && (\n              <a target=\"_blank\" rel=\"noreferrer\" href={value.url}>\n                {value.text || formatUrl(value.url)}\n              </a>\n            )}\n            {!value.url && (\n              <input\n                readOnly\n                value={value}\n                onBlur={handleBlur}\n                ref={(el) => (textareaRefs.current[index] = el)}\n              />\n            )}\n          </div>\n          <div>\n            {!value.url && (\n              <>\n                {showStatus === index && (\n                  <span className=\"status\">Copied!</span>\n                )}\n                <Button\n                  size=\"md\"\n                  variant=\"link\"\n                  onClick={() => handleCopy(value, index)}\n                  className={showStatus === index ? \"copied\" : \"\"}\n                  disabled={!document.queryCommandSupported(\"copy\")}\n                >\n                  <Clipboard size={14} />\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport Collapse from \"react-bootstrap/Collapse\";\nimport { ChevronDown } from \"react-bootstrap-icons\";\nimport \"./CollapsiblePanel.scss\";\n\nexport default function CollapsiblePanel({\n  type,\n  name,\n  expanded = false,\n  ...props\n}) {\n  const [open, setOpen] = useState(expanded);\n  const openCs = open ? \"expanded\" : \"collapsed\";\n\n  return (\n    <div className={`CollapsiblePanel ${openCs}`}>\n      <div className=\"header\" onClick={() => setOpen(!open)}>\n        <div className=\"copy\">\n          <span>{type}</span>\n          <h1>{name}</h1>\n        </div>\n        <span className=\"icon\">\n          <ChevronDown />\n        </span>\n      </div>\n      <Collapse in={open}>\n        <div className=\"body\">\n          <div>{props.children}</div>\n        </div>\n      </Collapse>\n    </div>\n  );\n}\n","import KeyValueItem from \"./KeyValueItem\";\nimport CollapsiblePanel from \"./CollapsiblePanel\";\nimport \"./ApiConstructPanel.scss\";\n\nexport default function ApiConstructPanel({ type, name, props }) {\n  const { httpApiEndpoint, restApiEndpoint, customDomainUrl, routes } = props;\n  const url = httpApiEndpoint || restApiEndpoint;\n\n  function getRoutes() {\n    return Object.values(routes).map((per, key) =>\n      formatRoute(customDomainUrl || url, per, key)\n    );\n  }\n\n  function formatRoute(endpoint, { method, path }, key) {\n    let routeKey, routePath;\n    if (path === \"$default\") {\n      routeKey = path;\n      routePath = `${endpoint}/${path}`;\n    } else {\n      routeKey = `${method} ${path}`;\n      routePath = `${endpoint}${path}`;\n    }\n\n    return { url: routePath, text: routeKey };\n  }\n\n  return (\n    <div className=\"ApiConstructPanel\">\n      <CollapsiblePanel type={type} name={name}>\n        <KeyValueItem name=\"URL\" values={[{ url }]} />\n        {customDomainUrl && (\n          <KeyValueItem\n            name=\"Custom Domain URL\"\n            values={[{ url: customDomainUrl }]}\n          />\n        )}\n        {Object.values(routes).length > 0 && (\n          <KeyValueItem name=\"Routes\" values={getRoutes()} />\n        )}\n      </CollapsiblePanel>\n    </div>\n  );\n}\n","import Button from \"./Button\";\nimport KeyValueItem from \"./KeyValueItem\";\nimport CollapsiblePanel from \"./CollapsiblePanel\";\nimport \"./CronConstructPanel.scss\";\n\nexport default function CronConstructPanel({\n  type,\n  name,\n  props,\n  triggering,\n  onTrigger,\n}) {\n  return (\n    <div className=\"CronConstructPanel\">\n      <CollapsiblePanel type={type} name={name}>\n        <KeyValueItem name=\"Schedule\" values={[props.schedule]} />\n        <div className=\"controls\">\n          <p>Trigger function</p>\n          <Button\n            size=\"sm\"\n            loading={triggering}\n            onClick={() =>\n              onTrigger({\n                type,\n                ruleName: props.ruleName,\n                functionName: props.functionName,\n              })\n            }\n          >\n            Trigger\n          </Button>\n        </div>\n      </CollapsiblePanel>\n    </div>\n  );\n}\n","import KeyValueItem from \"./KeyValueItem\";\nimport CollapsiblePanel from \"./CollapsiblePanel\";\nimport \"./BasicConstructPanel.scss\";\n\nexport default function BasicConstructPanel({ type, name, keyValues }) {\n  return (\n    <div className=\"BasicConstructPanel\">\n      <CollapsiblePanel type={type} name={name}>\n        {Object.entries(keyValues)\n          .filter(([key, value]) => value !== undefined)\n          .map(([key, value]) => (\n            <KeyValueItem key={key} name={key} values={[value]} />\n          ))}\n      </CollapsiblePanel>\n    </div>\n  );\n}\n","import Form from \"react-bootstrap/Form\";\nimport \"./PayloadForm.scss\";\n\nexport default function PayloadForm({ label, button, ...props }) {\n  return (\n    <Form className=\"PayloadForm\">\n      <Form.Group controlId={`field-${label}`}>\n        <Form.Label>{label}</Form.Label>\n        {props.children}\n      </Form.Group>\n      {button}\n    </Form>\n  );\n}\n","import { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"./Button\";\nimport PayloadForm from \"./PayloadForm\";\nimport KeyValueItem from \"./KeyValueItem\";\nimport CollapsiblePanel from \"./CollapsiblePanel\";\nimport \"./QueueConstructPanel.scss\";\n\nconst defaultPayload = JSON.stringify({ data: \"placeholder\" }, null, 2);\n\nexport default function QueueConstructPanel({\n  type,\n  name,\n  props,\n  triggering,\n  onTrigger,\n}) {\n  const [payload, setPayload] = useState(defaultPayload);\n\n  return (\n    <div className=\"QueueConstructPanel\">\n      <CollapsiblePanel type={type} name={name}>\n        <KeyValueItem name=\"Queue URL\" values={[props.queueUrl]} />\n        <PayloadForm\n          label=\"Message\"\n          button={\n            <Button\n              size=\"sm\"\n              loading={triggering}\n              onClick={() =>\n                onTrigger({\n                  type,\n                  queueUrl: props.queueUrl,\n                  payload,\n                })\n              }\n            >\n              Send Message\n            </Button>\n          }\n        >\n          <Form.Control\n            rows={3}\n            size=\"sm\"\n            as=\"textarea\"\n            onChange={(e) => setPayload(e.target.value)}\n            value={payload}\n          ></Form.Control>\n        </PayloadForm>\n      </CollapsiblePanel>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"./Button\";\nimport PayloadForm from \"./PayloadForm\";\nimport KeyValueItem from \"./KeyValueItem\";\nimport CollapsiblePanel from \"./CollapsiblePanel\";\nimport \"./TopicConstructPanel.scss\";\n\nconst defaultPayload = JSON.stringify({ data: \"placeholder\" }, null, 2);\n\nexport default function TopicConstructPanel({\n  type,\n  name,\n  props,\n  triggering,\n  onTrigger,\n}) {\n  const [payload, setPayload] = useState(defaultPayload);\n\n  return (\n    <div className=\"TopicConstructPanel\">\n      <CollapsiblePanel type={type} name={name}>\n        <KeyValueItem name=\"Topic ARN\" values={[props.topicArn]} />\n        <PayloadForm\n          label=\"Message\"\n          button={\n            <Button\n              size=\"sm\"\n              loading={triggering}\n              onClick={() =>\n                onTrigger({\n                  type,\n                  topicArn: props.topicArn,\n                  payload,\n                })\n              }\n            >\n              Publish Message\n            </Button>\n          }\n        >\n          <Form.Control\n            rows={3}\n            size=\"sm\"\n            as=\"textarea\"\n            value={payload}\n            onChange={(e) => setPayload(e.target.value)}\n          ></Form.Control>\n        </PayloadForm>\n      </CollapsiblePanel>\n    </div>\n  );\n}\n","import KeyValueItem from \"./KeyValueItem\";\nimport CollapsiblePanel from \"./CollapsiblePanel\";\nimport \"./WebSocketApiConstructPanel.scss\";\n\nexport default function WebSocketApiConstructPanel({ type, name, props }) {\n  const { httpApiEndpoint, customDomainUrl, routes } = props;\n\n  function getRoutes() {\n    return Object.values(routes).map((per, key) =>\n      formatRoute(customDomainUrl || httpApiEndpoint, per, key)\n    );\n  }\n\n  function formatRoute(endpoint, route, key) {\n    return { url: `${endpoint}/${route}`, text: route };\n  }\n\n  return (\n    <div className=\"WebSocketApiConstructPanel\">\n      <CollapsiblePanel type={type} name={name}>\n        <KeyValueItem name=\"URL\" values={[{ url: httpApiEndpoint }]} />\n        {customDomainUrl && (\n          <KeyValueItem\n            name=\"Custom Domain URL\"\n            values={[{ url: customDomainUrl }]}\n          />\n        )}\n        {Object.values(routes).length > 0 && (\n          <KeyValueItem name=\"Routes\" values={getRoutes()} />\n        )}\n      </CollapsiblePanel>\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"./Button\";\nimport PayloadForm from \"./PayloadForm\";\nimport KeyValueItem from \"./KeyValueItem\";\nimport CollapsiblePanel from \"./CollapsiblePanel\";\nimport \"./KinesisStreamConstructPanel.scss\";\n\nconst defaultPayload = JSON.stringify({ data: \"placeholder\" }, null, 2);\n\nexport default function KinesisStreamConstructPanel({\n  type,\n  name,\n  props,\n  triggering,\n  onTrigger,\n}) {\n  const [payload, setPayload] = useState(defaultPayload);\n\n  return (\n    <div className=\"KinesisStreamConstructPanel\">\n      <CollapsiblePanel type={type} name={name}>\n        <KeyValueItem name=\"Stream Name\" values={[props.streamName]} />\n        <PayloadForm\n          label=\"Record\"\n          button={\n            <Button\n              size=\"sm\"\n              loading={triggering}\n              onClick={() =>\n                onTrigger({\n                  type,\n                  streamName: props.streamName,\n                  payload,\n                })\n              }\n            >\n              Put Record\n            </Button>\n          }\n        >\n          <Form.Control\n            rows={3}\n            size=\"sm\"\n            as=\"textarea\"\n            value={payload}\n            onChange={(e) => setPayload(e.target.value)}\n          ></Form.Control>\n        </PayloadForm>\n      </CollapsiblePanel>\n    </div>\n  );\n}\n","export function errorHandler(error) {\n  console.log(error);\n  window.alert(error.message);\n}\n","import { useState } from \"react\";\nimport ApiConstructPanel from \"./ApiConstructPanel\";\nimport CronConstructPanel from \"./CronConstructPanel\";\nimport BasicConstructPanel from \"./BasicConstructPanel\";\nimport QueueConstructPanel from \"./QueueConstructPanel\";\nimport TopicConstructPanel from \"./TopicConstructPanel\";\nimport WebSocketApiConstructPanel from \"./WebSocketApiConstructPanel\";\nimport KinesisStreamConstructPanel from \"./KinesisStreamConstructPanel\";\nimport { errorHandler } from \"../lib/errorLib\";\nimport \"./ConstructPanel.scss\";\n\nexport default function ConstructPanel({ construct, handleTrigger, ...props }) {\n  const [triggering, setTriggering] = useState(false);\n\n  //////////////\n  // Callbacks\n  //////////////\n\n  async function onTrigger(payload) {\n    setTriggering(true);\n\n    try {\n      await handleTrigger(payload);\n    } catch (e) {\n      errorHandler(e);\n    }\n\n    setTriggering(false);\n  }\n\n  //////////////\n  // Render\n  //////////////\n\n  function renderConstruct() {\n    switch (construct.type) {\n      case \"Auth\":\n        return renderAuth(construct);\n      case \"Api\":\n        return renderApi(construct);\n      case \"ApiGatewayV1Api\":\n        return renderApiGatewayV1Api(construct);\n      case \"ApolloApi\":\n        return renderApolloApi(construct);\n      case \"AppSyncApi\":\n        return renderAppSyncApi(construct);\n      case \"WebSocketApi\":\n        return renderWebSocketApi(construct);\n      case \"Queue\":\n        return renderQueue(construct);\n      case \"Topic\":\n        return renderTopic(construct);\n      case \"Cron\":\n        return renderCron(construct);\n      case \"Bucket\":\n        return renderBucket(construct);\n      case \"Table\":\n        return renderTable(construct);\n      case \"EventBus\":\n        return renderEventBus(construct);\n      case \"KinesisStream\":\n        return renderKinesisStream(construct);\n      case \"StaticSite\":\n        return renderStaticSite(construct);\n      case \"ReactStaticSite\":\n        return renderReactStaticSite(construct);\n      case \"NextjsSite\":\n        return renderNextjsSite(construct);\n      case \"Script\":\n        return renderScript(construct);\n      default:\n        return;\n    }\n  }\n\n  function renderAuth({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"Auth\"\n        name={name}\n        keyValues={{\n          \"Identity Pool ID\": props.identityPoolId,\n        }}\n      />\n    );\n  }\n\n  function renderApi({ name, props }) {\n    return <ApiConstructPanel type=\"Api\" name={name} props={props} />;\n  }\n\n  function renderApiGatewayV1Api({ name, props }) {\n    return (\n      <ApiConstructPanel type=\"ApiGatewayV1Api\" name={name} props={props} />\n    );\n  }\n\n  function renderApolloApi({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"ApolloApi\"\n        name={name}\n        keyValues={{\n          URL: { url: props.httpApiEndpoint },\n          \"Custom Domain URL\": props.customDomainUrl\n            ? { url: props.customDomainUrl }\n            : undefined,\n        }}\n      />\n    );\n  }\n\n  function renderAppSyncApi({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"AppSyncApi\"\n        name={name}\n        keyValues={{\n          \"GraphQL URL\": { url: props.graphqlApiEndpoint },\n          \"WebSocket URL\": { url: props.realtimeApiEndpoint },\n        }}\n      />\n    );\n  }\n\n  function renderWebSocketApi({ name, props }) {\n    return (\n      <WebSocketApiConstructPanel\n        type=\"WebSocketApi\"\n        name={name}\n        props={props}\n      />\n    );\n  }\n\n  function renderQueue({ name, type, props }) {\n    return (\n      <QueueConstructPanel\n        type={type}\n        name={name}\n        props={props}\n        triggering={triggering}\n        onTrigger={onTrigger}\n      />\n    );\n  }\n\n  function renderTopic({ name, type, props }) {\n    return (\n      <TopicConstructPanel\n        type={type}\n        name={name}\n        props={props}\n        triggering={triggering}\n        onTrigger={onTrigger}\n      />\n    );\n  }\n\n  function renderCron({ name, type, props }) {\n    return (\n      <CronConstructPanel\n        type={type}\n        name={name}\n        props={props}\n        triggering={triggering}\n        onTrigger={onTrigger}\n      />\n    );\n  }\n\n  function renderBucket({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"Bucket\"\n        name={name}\n        keyValues={{\n          \"Bucket Name\": props.bucketName,\n        }}\n      />\n    );\n  }\n\n  function renderTable({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"Table\"\n        name={name}\n        keyValues={{\n          \"Table Name\": props.tableName,\n        }}\n      />\n    );\n  }\n\n  function renderEventBus({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"EventBus\"\n        name={name}\n        keyValues={{\n          \"EventBus Name\": props.eventBusName,\n        }}\n      />\n    );\n  }\n\n  function renderKinesisStream({ name, type, props }) {\n    return (\n      <KinesisStreamConstructPanel\n        type={type}\n        name={name}\n        props={props}\n        triggering={triggering}\n        onTrigger={onTrigger}\n      />\n    );\n  }\n\n  function renderStaticSite({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"StaticSite\"\n        name={name}\n        keyValues={{\n          URL: { url: props.endpoint },\n          \"Custom Domain URL\": props.customDomainUrl\n            ? { url: props.customDomainUrl }\n            : undefined,\n        }}\n      />\n    );\n  }\n\n  function renderReactStaticSite({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"ReactStaticSite\"\n        name={name}\n        keyValues={{\n          URL: { url: props.endpoint },\n          \"Custom Domain URL\": props.customDomainUrl\n            ? { url: props.customDomainUrl }\n            : undefined,\n        }}\n      />\n    );\n  }\n\n  function renderNextjsSite({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"NextjsSite\"\n        name={name}\n        keyValues={{\n          URL: { url: props.endpoint },\n          \"Custom Domain URL\": props.customDomainUrl\n            ? { url: props.customDomainUrl }\n            : undefined,\n        }}\n      />\n    );\n  }\n\n  function renderScript({ name, props }) {\n    return (\n      <BasicConstructPanel\n        type=\"Script\"\n        name={name}\n        keyValues={{\n          \"Function Name\": props.functionName,\n        }}\n      />\n    );\n  }\n\n  return <div className=\"ConstructPanel\">{renderConstruct()}</div>;\n}\n","import React from \"react\";\nimport \"./LoadingSpinner.scss\";\n\nexport default function LoadingSpinner(props) {\n  return (\n    <div className=\"LoadingSpinner\">\n      <div className=\"spinner\">\n        <div className=\"bounce1\"></div>\n        <div className=\"bounce2\"></div>\n        <div className=\"bounce3\"></div>\n      </div>\n    </div>\n  );\n}\n","import { ExclamationOctagonFill } from \"react-bootstrap-icons\";\nimport ConstructPanel from \"./ConstructPanel\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport \"./ConstructsPanel.scss\";\n\nexport default function ConstructsPanel({\n  loading,\n  loadError,\n  constructs,\n  handleTrigger,\n}) {\n  const loadingCs = loading || loadError ? \"loading\" : \"\";\n\n  return (\n    <div className={`ConstructsPanel ${loadingCs}`}>\n      {loading && <LoadingSpinner />}\n      {loadError && (\n        <div className=\"error\">\n          <ExclamationOctagonFill />\n          <p>Failed to load</p>\n        </div>\n      )}\n      {!loading &&\n        !loadError &&\n        constructs &&\n        constructs.map((construct, key) => (\n          <ConstructPanel\n            key={key}\n            construct={construct}\n            handleTrigger={handleTrigger}\n          />\n        ))}\n    </div>\n  );\n}\n","import { useRef, useLayoutEffect } from \"react\";\nimport Ansi from \"ansi-to-react\";\nimport Button from \"./Button\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport \"./RuntimeLogsPanel.scss\";\n\nexport default function RuntimeLogsPanel({\n  loading,\n  loadError,\n  logs,\n  onClear,\n}) {\n  const scrollEl = useRef(null);\n  const oldScrollHeight = useRef(null);\n  const oldClientHeight = useRef(null);\n\n  const hasLogs = logs && logs.length > 0;\n\n  const logsCount = logs ? logs.length : undefined;\n\n  useLayoutEffect(() => {\n    if (logsCount === undefined) {\n      return;\n    }\n\n    const el = scrollEl.current;\n\n    function wasAtBottom() {\n      // Use current scroll position vs old heights\n      return (\n        oldScrollHeight.current - el.scrollTop - oldClientHeight.current < 1\n      );\n    }\n    function scrollToBottom() {\n      el.scrollTop = el.scrollHeight;\n    }\n\n    if (oldScrollHeight.current === null || wasAtBottom()) {\n      scrollToBottom();\n    }\n\n    // Save old heights\n    oldScrollHeight.current = el.scrollHeight;\n    oldClientHeight.current = el.clientHeight;\n  }, [logsCount]);\n\n  return (\n    <div className=\"RuntimeLogsPanel\">\n      <div className=\"header\">\n        <span>Logs</span>\n        <Button variant=\"link\" size=\"sm\" disabled={!hasLogs} onClick={onClear}>\n          Clear\n        </Button>\n      </div>\n      <div ref={scrollEl} className=\"content\">\n        {loading && <LoadingSpinner />}\n        {loadError && <p className=\"error\">Failed to load</p>}\n        {!loading && !loadError && logs && (\n          <>\n            {!hasLogs && <p className=\"loading\">Listening for logs...</p>}\n            {hasLogs &&\n              logs.map((log, key) => (\n                <pre key={key}>\n                  <Ansi>{log.message}</Ansi>\n                </pre>\n              ))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useState } from \"react\";\nimport { ApolloConsumer, useQuery, useMutation, gql } from \"@apollo/client\";\nimport BrandNavbar from \"./components/BrandNavbar\";\nimport StatusPanel from \"./components/StatusPanel\";\nimport WsStatusPanel from \"./components/WsStatusPanel\";\nimport ConstructsPanel from \"./components/ConstructsPanel\";\nimport RuntimeLogsPanel from \"./components/RuntimeLogsPanel\";\nimport \"./App.scss\";\n\nconst GET_CONSTRUCTS = gql`\n  query GetConstructs {\n    getConstructs {\n      error\n      isLoading\n      constructs\n    }\n  }\n`;\nconst GET_RUNTIME_LOGS = gql`\n  query GetRuntimeLogs {\n    getRuntimeLogs {\n      message\n    }\n  }\n`;\nconst GET_INFRA_STATUS = gql`\n  query GetInfraStatus {\n    getInfraStatus {\n      buildStatus\n      buildErrors {\n        type\n        message\n        errorCount\n        warningCount\n      }\n      deployStatus\n      deployErrors {\n        type\n        message\n        errorCount\n        warningCount\n      }\n      canDeploy\n      canQueueDeploy\n      deployQueued\n    }\n  }\n`;\nconst GET_LAMBDA_STATUS = gql`\n  query GetLambdaStatus {\n    getLambdaStatus {\n      buildStatus\n      buildErrors {\n        type\n        message\n        errorCount\n        warningCount\n      }\n    }\n  }\n`;\nconst CONSTRUCTS_SUBSCRIPTION = gql`\n  subscription OnConstructsUpdated {\n    constructsUpdated {\n      error\n      isLoading\n      constructs\n    }\n  }\n`;\nconst RUNTIME_LOGS_SUBSCRIPTION = gql`\n  subscription OnRuntimeLogAdded {\n    runtimeLogAdded {\n      message\n    }\n  }\n`;\nconst INFRA_STATUS_SUBSCRIPTION = gql`\n  subscription OnInfraStatusUpdated {\n    infraStatusUpdated {\n      buildStatus\n      buildErrors {\n        type\n        message\n      }\n      deployStatus\n      deployErrors {\n        type\n        message\n      }\n      canDeploy\n      canQueueDeploy\n      deployQueued\n    }\n  }\n`;\nconst LAMBDA_STATUS_SUBSCRIPTION = gql`\n  subscription OnLambdaStatusUpdated {\n    lambdaStatusUpdated {\n      buildStatus\n      buildErrors {\n        type\n        message\n      }\n    }\n  }\n`;\nconst INVOKE = gql`\n  mutation InvokeConstruct($data: String) {\n    invoke(data: $data)\n  }\n`;\nconst DEPLOY = gql`\n  mutation Deploy {\n    deploy\n  }\n`;\n\nexport default function App({ wsClient, ...props }) {\n  // Setup websocket connection watcher\n  const [wsConnected, setWsConnected] = useState(false);\n  wsClient.onConnected(onWsConnected);\n  wsClient.onReconnected(onWsConnected);\n  wsClient.onDisconnected(onWsDisconnected);\n\n  const [invoke] = useMutation(INVOKE);\n  const [deploy] = useMutation(DEPLOY);\n\n  // Load constructs data\n  let {\n    loading: loadingConstructs,\n    error: constructsError,\n    data: constructs,\n    subscribeToMore: subscribeToConstructs,\n  } = useQuery(GET_CONSTRUCTS);\n\n  if (constructs && constructs.getConstructs) {\n    constructsError = constructs.getConstructs.error;\n    constructs = JSON.parse(constructs.getConstructs.constructs);\n  }\n\n  // Load Lambda logs\n  const {\n    loading: loadingRuntimeLog,\n    error: runtimeLogError,\n    data: runtimeLogs,\n    refetch: refetchRuntimeLogs,\n    subscribeToMore: subscribeToRuntimeLogs,\n  } = useQuery(GET_RUNTIME_LOGS);\n\n  // Load Infrastructure status\n  const {\n    loading: loadingInfraStatus,\n    error: infraStatusError,\n    data: infraStatus,\n    subscribeToMore: subscribeToInfraStatus,\n  } = useQuery(GET_INFRA_STATUS);\n\n  // Load Lambda status\n  const {\n    loading: loadingLambdaStatus,\n    error: lambdaStatusError,\n    data: lambdaStatus,\n    subscribeToMore: subscribeToLambdaStatus,\n  } = useQuery(GET_LAMBDA_STATUS);\n\n  useEffect(() => {\n    try {\n      // Subscribe to constructs data\n      // note: replace initial queried data with subscribed data\n      subscribeToConstructs({\n        document: CONSTRUCTS_SUBSCRIPTION,\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          return {\n            getConstructs: subscriptionData.data.constructsUpdated,\n          };\n        },\n      });\n\n      // Subscribe to Lambda logs\n      // note: append subscribed logs to the initial queried logs\n      subscribeToRuntimeLogs({\n        document: RUNTIME_LOGS_SUBSCRIPTION,\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          return {\n            // note: if initial query failed \"prev.getRuntimeLogs\" is undefined,\n            //       we need to initialize it to empty array.\n            //       A sequence that can lead to this would be:\n            //       1. sst start is not running\n            //       2. open the browser console, and the initial query will fail\n            //       3. run sst start\n            //       4. invoke a request and the browser console will receive a\n            //          websocket event, and this code will be invoked\n            getRuntimeLogs: [\n              ...(prev.getRuntimeLogs || []),\n              subscriptionData.data.runtimeLogAdded,\n            ],\n          };\n        },\n      });\n\n      // Subscribe to Infrastructure status\n      subscribeToInfraStatus({\n        document: INFRA_STATUS_SUBSCRIPTION,\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          return {\n            getInfraStatus: subscriptionData.data.infraStatusUpdated,\n          };\n        },\n      });\n\n      // Subscribe to Lambda status\n      subscribeToLambdaStatus({\n        document: LAMBDA_STATUS_SUBSCRIPTION,\n        updateQuery: (prev, { subscriptionData }) => {\n          if (!subscriptionData.data) return prev;\n          return {\n            getLambdaStatus: subscriptionData.data.lambdaStatusUpdated,\n          };\n        },\n      });\n    } catch (e) {\n      // Apollo client's subscriptions get disconnected on React hot reload, and\n      // calling `subscribeToMore` fails with the error:\n      //  TypeError: Cannot read property 'subscribeToMore' of undefined\n      // For development purposes, we are ignoring the error so the page doesn't\n      // show an error on hot reload.\n      // Note the subscription connection is closed.\n      // https://github.com/apollographql/apollo-client/issues/6437\n      if (\n        process.env.NODE_ENV === \"development\" &&\n        (e.message === \"Cannot read property 'subscribeToMore' of undefined\" ||\n          e.message ===\n            \"undefined is not an object (evaluating '_this.currentObservable.subscribeToMore')\")\n      ) {\n        return;\n      }\n      throw e;\n    }\n  }, [\n    subscribeToConstructs,\n    subscribeToInfraStatus,\n    subscribeToLambdaStatus,\n    subscribeToRuntimeLogs,\n  ]);\n\n  //////////////\n  // Callbacks\n  //////////////\n\n  async function onTrigger(payload) {\n    await invoke({ variables: { data: JSON.stringify(payload) } });\n  }\n\n  async function onDeploy() {\n    await deploy();\n  }\n\n  async function onClearRuntimeLogs(client) {\n    // Trying to clear the logs here. There might be a better way to do\n    // this. Currently, we are clearing the Apollo Client's cache, and\n    // then triggering a refetch.\n    await client.clearStore();\n    refetchRuntimeLogs();\n  }\n\n  function onWsConnected() {\n    // If the page has never been successfully loaded (ie. sst start not running\n    // when page loaded), then refresh the page.\n    if (\n      constructsError ||\n      runtimeLogError ||\n      infraStatusError ||\n      lambdaStatusError\n    ) {\n      window.location.reload();\n      return;\n    }\n\n    setWsConnected(true);\n  }\n\n  function onWsDisconnected() {\n    setWsConnected(false);\n  }\n\n  //////////////\n  // Render\n  //////////////\n\n  return (\n    <div className=\"App\">\n      <BrandNavbar statusPanel={<WsStatusPanel connected={wsConnected} />} />\n\n      <div className=\"panels\">\n        <div className=\"left\">\n          <ConstructsPanel\n            constructs={constructs}\n            handleTrigger={onTrigger}\n            loading={loadingConstructs}\n            loadError={constructsError}\n          />\n        </div>\n        <div className=\"right\">\n          <ApolloConsumer>\n            {(client) => (\n              <RuntimeLogsPanel\n                loading={loadingRuntimeLog}\n                loadError={runtimeLogError}\n                logs={runtimeLogs?.getRuntimeLogs}\n                onClear={() => onClearRuntimeLogs(client)}\n              />\n            )}\n          </ApolloConsumer>\n          <StatusPanel\n            loading={loadingInfraStatus || loadingLambdaStatus}\n            loadError={infraStatusError || lambdaStatusError}\n            infraBuildStatus={infraStatus?.getInfraStatus.buildStatus}\n            infraBuildErrors={infraStatus?.getInfraStatus.buildErrors}\n            infraDeployStatus={infraStatus?.getInfraStatus.deployStatus}\n            infraDeployErrors={infraStatus?.getInfraStatus.deployErrors}\n            infraCanDeploy={infraStatus?.getInfraStatus.canDeploy}\n            infraCanQueueDeploy={infraStatus?.getInfraStatus.canQueueDeploy}\n            infraDeployQueued={infraStatus?.getInfraStatus.deployQueued}\n            lambdaBuildStatus={lambdaStatus?.getLambdaStatus.buildStatus}\n            lambdaBuildErrors={lambdaStatus?.getLambdaStatus.buildErrors}\n            handleDeploy={onDeploy}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\n  split,\n  HttpLink,\n  ApolloClient,\n  ApolloProvider,\n  InMemoryCache,\n} from \"@apollo/client\";\nimport { WebSocketLink } from \"@apollo/client/link/ws\";\nimport { getMainDefinition } from \"@apollo/client/utilities\";\nimport { SubscriptionClient } from \"subscriptions-transport-ws\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nimport \"./sass/custom.scss\";\nimport \"./index.css\";\n\n// Build url host. When working on SST console, the React app is started\n// separately. Need to pass in the GraphQL server port via REACT_APP_SST_PORT.\nconst hostname = window.location.hostname;\nconst port = process.env.REACT_APP_SST_PORT || window.location.port;\nconst httpLink = new HttpLink({\n  uri: `http://${hostname}:${port}/graphql`,\n});\n\nconst wsClient = new SubscriptionClient(`ws://${hostname}:${port}/graphql`, {\n  reconnect: true,\n});\n\nconst wsLink = new WebSocketLink(wsClient);\n\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === \"OperationDefinition\" &&\n      definition.operation === \"subscription\"\n    );\n  },\n  wsLink,\n  httpLink\n);\n\nconst client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App wsClient={wsClient} />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}