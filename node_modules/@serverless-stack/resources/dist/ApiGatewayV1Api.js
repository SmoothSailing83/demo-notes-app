"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayV1Api = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const route53 = __importStar(require("@aws-cdk/aws-route53"));
const route53Targets = __importStar(require("@aws-cdk/aws-route53-targets"));
const acm = __importStar(require("@aws-cdk/aws-certificatemanager"));
const apig = __importStar(require("@aws-cdk/aws-apigateway"));
const apigV1AccessLog = __importStar(require("./util/apiGatewayV1AccessLog"));
const Stack_1 = require("./Stack");
const Function_1 = require("./Function");
const allowedMethods = [
    "ANY",
    "GET",
    "PUT",
    "POST",
    "HEAD",
    "PATCH",
    "DELETE",
    "OPTIONS",
];
/////////////////////
// Construct
/////////////////////
class ApiGatewayV1Api extends cdk.Construct {
    constructor(scope, id, props) {
        var _a, _b, _c, _d, _e, _f, _g;
        super(scope, id);
        const root = scope.node.root;
        const { restApi, routes, cors, accessLog, customDomain, importedPaths, defaultFunctionProps, defaultAuthorizer, defaultAuthorizationType, defaultAuthorizationScopes, } = props || {};
        this.functions = {};
        this.routesInfo = {};
        this.importedResources = {};
        this.permissionsAttachedForAllRoutes = [];
        this.defaultFunctionProps = defaultFunctionProps;
        this.defaultAuthorizer = defaultAuthorizer;
        this.defaultAuthorizationType = defaultAuthorizationType;
        this.defaultAuthorizationScopes = defaultAuthorizationScopes;
        ////////////////////
        // Create Api
        ////////////////////
        if (cdk.Construct.isConstruct(restApi)) {
            if (cors !== undefined) {
                throw new Error(`Cannot configure the "cors" when the "restApi" is imported`);
            }
            if (accessLog !== undefined) {
                throw new Error(`Cannot configure the "accessLog" when the "restApi" is imported`);
            }
            if (customDomain !== undefined) {
                throw new Error(`Cannot configure the "customDomain" when the "restApi" is imported`);
            }
            this.restApi = restApi;
            // Create an API Gateway deployment resource to trigger a deployment
            this._deployment = new apig.Deployment(this, "Deployment", {
                api: this.restApi,
            });
            const cfnDeployment = this._deployment.node
                .defaultChild;
            cfnDeployment.stageName = root.stage;
            if (importedPaths) {
                this.importResources(importedPaths);
            }
        }
        else {
            const restApiProps = (restApi || {});
            // Validate input
            if (importedPaths !== undefined) {
                throw new Error(`Cannot import route paths when creating a new API.`);
            }
            if (customDomain !== undefined && restApiProps.domainName !== undefined) {
                throw new Error(`Use either the "customDomain" or the "restApi.domainName" to configure the Api domain. Do not use both.`);
            }
            if (cors !== undefined &&
                restApiProps.defaultCorsPreflightOptions !== undefined) {
                throw new Error(`Use either the "cors" or the "restApi.defaultCorsPreflightOptions" to configure the Api's CORS config. Do not use both.`);
            }
            if (accessLog !== undefined &&
                ((_a = restApiProps.deployOptions) === null || _a === void 0 ? void 0 : _a.accessLogDestination) !== undefined) {
                throw new Error(`Use either the "accessLog" or the "restApi.deployOptions.accessLogDestination" to configure the Api's access log. Do not use both.`);
            }
            if (accessLog !== undefined &&
                ((_b = restApiProps.deployOptions) === null || _b === void 0 ? void 0 : _b.accessLogFormat) !== undefined) {
                throw new Error(`Use either the "accessLog" or the "restApi.deployOptions.accessLogFormat" to configure the Api's access log. Do not use both.`);
            }
            const stageName = ((_c = restApiProps.deployOptions) === null || _c === void 0 ? void 0 : _c.stageName) || this.node.root.stage;
            const accessLogData = apigV1AccessLog.buildAccessLogData(this, accessLog);
            this.accessLogGroup = accessLogData === null || accessLogData === void 0 ? void 0 : accessLogData.logGroup;
            this.restApi = new apig.RestApi(this, "Api", Object.assign(Object.assign({}, restApiProps), { restApiName: root.logicalPrefixedName(id), domainName: restApiProps.domainName, defaultCorsPreflightOptions: restApiProps.defaultCorsPreflightOptions ||
                    this.buildCorsConfig(cors), deployOptions: Object.assign(Object.assign({}, (restApiProps.deployOptions || {})), { accessLogDestination: ((_d = restApiProps.deployOptions) === null || _d === void 0 ? void 0 : _d.accessLogDestination) ||
                        (accessLogData === null || accessLogData === void 0 ? void 0 : accessLogData.destination), accessLogFormat: ((_e = restApiProps.deployOptions) === null || _e === void 0 ? void 0 : _e.accessLogFormat) ||
                        (accessLogData === null || accessLogData === void 0 ? void 0 : accessLogData.format), 
                    // default to the name of the sage
                    stageName: stageName, 
                    // default to true
                    tracingEnabled: ((_f = restApiProps.deployOptions) === null || _f === void 0 ? void 0 : _f.tracingEnabled) === undefined
                        ? true
                        : (_g = restApiProps.deployOptions) === null || _g === void 0 ? void 0 : _g.tracingEnabled }) }));
            this.createCustomDomain(customDomain);
            this.createGatewayResponseForCors(cors);
        }
        ///////////////////////////
        // Configure routes
        ///////////////////////////
        if (routes) {
            Object.keys(routes).forEach((routeKey) => this.addRoute(this, routeKey, routes[routeKey]));
        }
        ///////////////////
        // Register Construct
        ///////////////////
        root.registerConstruct(this);
    }
    get url() {
        return this.restApi.url;
    }
    get customDomainUrl() {
        return this._customDomainUrl;
    }
    get routes() {
        return Object.keys(this.functions);
    }
    addRoutes(scope, routes) {
        Object.keys(routes).forEach((routeKey) => {
            // add route
            const fn = this.addRoute(scope, routeKey, routes[routeKey]);
            // attached existing permissions
            this.permissionsAttachedForAllRoutes.forEach((permissions) => fn.attachPermissions(permissions));
        });
    }
    getFunction(routeKey) {
        return this.functions[this.normalizeRouteKey(routeKey)];
    }
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllRoutes.push(permissions);
    }
    getConstructInfo() {
        // imported
        if (!cdk.Token.isUnresolved(this.restApi.restApiId)) {
            return {
                restApiId: this.restApi.restApiId,
                routes: this.routesInfo,
            };
        }
        // created
        const cfn = this.restApi.node.defaultChild;
        return {
            restApiLogicalId: Stack_1.Stack.of(this).getLogicalId(cfn),
            customDomainUrl: this._customDomainUrl,
            routes: this.routesInfo,
        };
    }
    attachPermissionsToRoute(routeKey, permissions) {
        const fn = this.getFunction(routeKey);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Route "${routeKey}" does not exist.`);
        }
        fn.attachPermissions(permissions);
    }
    buildCorsConfig(cors) {
        // Case: cors is false
        if (cors === false) {
            return undefined;
        }
        // Case: cors is true or undefined
        return {
            allowOrigins: apig.Cors.ALL_ORIGINS,
        };
    }
    createGatewayResponseForCors(cors) {
        if (!cors) {
            return;
        }
        this.restApi.addGatewayResponse("GatewayResponseDefault4XX", {
            type: apig.ResponseType.DEFAULT_4XX,
            responseHeaders: {
                "Access-Control-Allow-Origin": "'*'",
                "Access-Control-Allow-Headers": "'*'",
            },
        });
        this.restApi.addGatewayResponse("GatewayResponseDefault5XX", {
            type: apig.ResponseType.DEFAULT_5XX,
            responseHeaders: {
                "Access-Control-Allow-Origin": "'*'",
                "Access-Control-Allow-Headers": "'*'",
            },
        });
    }
    createCustomDomain(customDomain) {
        // Case: customDomain is not set
        if (customDomain === undefined) {
            return;
        }
        // To be implemented: to allow more flexible use cases, SST should support 3 more use cases:
        //  1. Allow user passing in `hostedZone` object. The use case is when there are multiple
        //     HostedZones with the same domain, but one is public, and one is private.
        //  2. Allow user passing in `certificate` object. The use case is for user to create wildcard
        //     certificate or using an imported certificate.
        //  3. Allow user passing in `apigDomainName` object. The use case is a user creates multiple API
        //     endpoints, and is mapping them under the same custom domain. `sst.Api` needs to expose the
        //     `apigDomainName` construct created in the first Api, and lets user pass it in when creating
        //     the second Api.
        let domainName, hostedZone, hostedZoneDomain, certificate, apigDomainName, basePath, endpointType, mtls, securityPolicy;
        /////////////////////
        // Parse input
        /////////////////////
        // Case: customDomain is a string
        if (typeof customDomain === "string") {
            // validate: customDomain is a TOKEN string
            // ie. imported SSM value: ssm.StringParameter.valueForStringParameter()
            if (cdk.Token.isUnresolved(customDomain)) {
                throw new Error(`You also need to specify the "hostedZone" if the "domainName" is passed in as a reference.`);
            }
            domainName = customDomain;
            this.assertDomainNameIsLowerCase(domainName);
            hostedZoneDomain = customDomain.split(".").slice(1).join(".");
        }
        // Case: customDomain.domainName not exists
        else if (!customDomain.domainName) {
            throw new Error(`Missing "domainName" in Api's customDomain setting`);
        }
        // Case: customDomain.domainName is a string
        else if (typeof customDomain.domainName === "string") {
            domainName = customDomain.domainName;
            // parse customDomain.domainName
            if (cdk.Token.isUnresolved(customDomain.domainName)) {
                // If customDomain is a TOKEN string, "hostedZone" has to be passed in. This
                // is because "hostedZone" cannot be parsed from a TOKEN value.
                if (!customDomain.hostedZone) {
                    throw new Error(`You also need to specify the "hostedZone" if the "domainName" is passed in as a reference.`);
                }
                domainName = customDomain.domainName;
            }
            else {
                domainName = customDomain.domainName;
                this.assertDomainNameIsLowerCase(domainName);
            }
            // parse customDomain.hostedZone
            if (!customDomain.hostedZone) {
                hostedZoneDomain = domainName.split(".").slice(1).join(".");
            }
            else if (typeof customDomain.hostedZone === "string") {
                hostedZoneDomain = customDomain.hostedZone;
            }
            else {
                hostedZone = customDomain.hostedZone;
            }
            certificate = customDomain.certificate;
            basePath = customDomain.path;
            endpointType = customDomain.endpointType;
            mtls = customDomain.mtls;
            securityPolicy = customDomain.securityPolicy;
        }
        // Case: customDomain.domainName is a construct
        else {
            apigDomainName = customDomain.domainName;
            // customDomain.domainName is imported
            if (apigDomainName && customDomain.hostedZone) {
                throw new Error(`Cannot configure the "hostedZone" when the "domainName" is a construct`);
            }
            if (apigDomainName && customDomain.certificate) {
                throw new Error(`Cannot configure the "certificate" when the "domainName" is a construct`);
            }
            if (apigDomainName && customDomain.endpointType) {
                throw new Error(`Cannot configure the "endpointType" when the "domainName" is a construct`);
            }
            if (apigDomainName && customDomain.mtls) {
                throw new Error(`Cannot configure the "mtls" when the "domainName" is a construct`);
            }
            if (apigDomainName && customDomain.securityPolicy) {
                throw new Error(`Cannot configure the "securityPolicy" when the "domainName" is a construct`);
            }
            basePath = customDomain.path;
        }
        /////////////////////
        // Find hosted zone
        /////////////////////
        if (!apigDomainName && !hostedZone) {
            // Look up hosted zone
            if (!hostedZone && hostedZoneDomain) {
                hostedZone = route53.HostedZone.fromLookup(this, "HostedZone", {
                    domainName: hostedZoneDomain,
                });
            }
        }
        /////////////////////
        // Create certificate
        /////////////////////
        if (!apigDomainName && !certificate) {
            if (endpointType === apig.EndpointType.EDGE) {
                certificate = new acm.DnsValidatedCertificate(this, "CrossRegionCertificate", {
                    domainName: domainName,
                    hostedZone: hostedZone,
                    region: "us-east-1",
                });
            }
            else {
                certificate = new acm.Certificate(this, "Certificate", {
                    domainName: domainName,
                    validation: acm.CertificateValidation.fromDns(hostedZone),
                });
            }
            this.acmCertificate = certificate;
        }
        /////////////////////
        // Create API Gateway domain name
        /////////////////////
        if (!apigDomainName && domainName) {
            // Create custom domain in API Gateway
            apigDomainName = new apig.DomainName(this, "DomainName", {
                domainName,
                certificate: certificate,
                endpointType,
                mtls,
                securityPolicy,
            });
            this.apiGatewayDomain = apigDomainName;
            // Create DNS record
            const record = new route53.ARecord(this, "AliasRecord", {
                recordName: domainName,
                zone: hostedZone,
                target: route53.RecordTarget.fromAlias(new route53Targets.ApiGatewayDomain(apigDomainName)),
            });
            // note: If domainName is a TOKEN string ie. ${TOKEN..}, the route53.ARecord
            //       construct will append ".${hostedZoneName}" to the end of the domain.
            //       This is because the construct tries to check if the record name
            //       ends with the domain name. If not, it will append the domain name.
            //       So, we need remove this behavior.
            if (cdk.Token.isUnresolved(domainName)) {
                const cfnRecord = record.node.defaultChild;
                cfnRecord.name = domainName;
            }
        }
        /////////////////////
        // Create base mapping
        /////////////////////
        if (apigDomainName) {
            new apig.BasePathMapping(this, "BasePath", {
                domainName: apigDomainName,
                restApi: this.restApi,
                basePath,
            });
        }
        // Note: We only know the full custom domain if domainName is a string.
        //       _customDomainUrl will be undefined if apigDomainName is imported.
        if (domainName && !cdk.Token.isUnresolved(domainName)) {
            this._customDomainUrl = basePath
                ? `https://${domainName}/${basePath}/`
                : `https://${domainName}`;
        }
    }
    importResources(resources) {
        Object.keys(resources).forEach((path) => {
            const resource = apig.Resource.fromResourceAttributes(this, `Resource_${path}`, {
                path,
                resourceId: resources[path],
                restApi: this.restApi,
            });
            this.importedResources[path] = resource;
        });
    }
    getResourceForPath(path) {
        // Lookup exact match imported resource
        if (this.importedResources[path]) {
            return this.importedResources[path];
        }
        // Lookup parents matching imported resource first
        const parts = path.split("/");
        for (let i = parts.length; i >= 1; i--) {
            const partialPath = parts.slice(0, i).join("/");
            if (this.importedResources[partialPath]) {
                return this.importedResources[partialPath].resourceForPath(parts.slice(i).join("/"));
            }
        }
        // Not child of imported resources, create off the root
        return this.restApi.root.resourceForPath(path);
    }
    addRoute(scope, routeKey, routeValue) {
        // Normalize routeProps
        const routeProps = (this.isInstanceOfApiRouteProps(routeValue)
            ? routeValue
            : {
                function: routeValue,
            });
        // Normalize routeKey
        routeKey = this.normalizeRouteKey(routeKey);
        if (this.functions[routeKey]) {
            throw new Error(`A route already exists for "${routeKey}"`);
        }
        ///////////////////
        // Get path and method
        ///////////////////
        const routeKeyParts = routeKey.split(" ");
        if (routeKeyParts.length !== 2) {
            throw new Error(`Invalid route ${routeKey}`);
        }
        const methodStr = routeKeyParts[0].toUpperCase();
        const path = routeKeyParts[1];
        const method = allowedMethods.find((per) => per === methodStr);
        if (!method) {
            throw new Error(`Invalid method defined for "${routeKey}"`);
        }
        if (path.length === 0) {
            throw new Error(`Invalid path defined for "${routeKey}"`);
        }
        ///////////////////
        // Create Resources
        ///////////////////
        let resource;
        if (path.endsWith("/{proxy+}")) {
            const parentResource = this.getResourceForPath(path.split("/").slice(0, -1).join("/"));
            resource = parentResource.addProxy({ anyMethod: false });
        }
        else {
            resource = this.getResourceForPath(path);
        }
        ///////////////////
        // Create Method
        ///////////////////
        const lambda = Function_1.Function.fromDefinition(scope, `Lambda_${methodStr}_${path}`, routeProps.function, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the routes using FunctionProps, so the Api construct can apply the "defaultFunctionProps" to them.`);
        const integration = new apig.LambdaIntegration(lambda, routeProps.integrationOptions);
        const methodOptions = this.buildRouteMethodOptions(routeProps.methodOptions);
        const apigMethod = resource.addMethod(method, integration, methodOptions);
        // Add an environment variable to determine if the function is an Api route.
        // If it is, when "sst start" is not connected, we want to return an 500
        // status code and a descriptive error message.
        const root = scope.node.root;
        if (root.local) {
            lambda.addEnvironment("SST_DEBUG_IS_API_ROUTE", "1", {
                removeInEdge: true,
            });
        }
        ///////////////////
        // Handle manually created Deployment resource (ie. imported REST API)
        ///////////////////
        if (this._deployment) {
            this._deployment.addToLogicalId({ route: { routeKey, routeValue } });
            this._deployment.node.addDependency(apigMethod);
        }
        ///////////////////
        // Store function
        ///////////////////
        this.functions[routeKey] = lambda;
        this.routesInfo[routeKey] = {
            method: methodStr,
            path,
        };
        return lambda;
    }
    buildRouteMethodOptions(options) {
        // Merge method options
        const methodOptions = Object.assign({ authorizationType: this.defaultAuthorizationType }, (options || {}));
        // Set authorization info
        if (methodOptions.authorizationType !== apig.AuthorizationType.NONE &&
            methodOptions.authorizationType !== apig.AuthorizationType.IAM) {
            methodOptions.authorizer =
                methodOptions.authorizer || this.defaultAuthorizer;
            methodOptions.authorizationScopes =
                methodOptions.authorizationScopes || this.defaultAuthorizationScopes;
        }
        return methodOptions;
    }
    isInstanceOfApiRouteProps(object) {
        return object.function !== undefined;
    }
    normalizeRouteKey(routeKey) {
        return routeKey.split(/\s+/).join(" ");
    }
    assertDomainNameIsLowerCase(domainName) {
        if (domainName !== domainName.toLowerCase()) {
            throw new Error(`The domain name needs to be in lowercase`);
        }
    }
}
exports.ApiGatewayV1Api = ApiGatewayV1Api;
//# sourceMappingURL=data:application/json;base64,