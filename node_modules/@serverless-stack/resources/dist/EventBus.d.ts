import * as cdk from "@aws-cdk/core";
import * as events from "@aws-cdk/aws-events";
import * as eventsTargets from "@aws-cdk/aws-events-targets";
import { Queue } from "./Queue";
import { ISstConstruct, ISstConstructInfo } from "./Construct";
import { FunctionProps, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
export declare type EventBusProps = {
    readonly eventBridgeEventBus?: events.IEventBus | events.EventBusProps;
    readonly rules?: {
        [key: string]: EventBusCdkRuleProps;
    };
    readonly defaultFunctionProps?: FunctionProps;
};
export declare type EventBusCdkRuleProps = Omit<events.RuleProps, "eventBus" | "targets"> & {
    readonly targets?: (FunctionDefinition | EventBusFunctionTargetProps | Queue | EventBusQueueTargetProps)[];
};
export declare type EventBusFunctionTargetProps = {
    readonly function: FunctionDefinition;
    readonly targetProps?: eventsTargets.LambdaFunctionProps;
};
export declare type EventBusQueueTargetProps = {
    readonly queue: Queue;
    readonly targetProps?: eventsTargets.SqsQueueProps;
};
export declare class EventBus extends cdk.Construct implements ISstConstruct {
    readonly eventBridgeEventBus: events.IEventBus;
    private readonly targetsData;
    private readonly permissionsAttachedForAllTargets;
    private readonly defaultFunctionProps?;
    constructor(scope: cdk.Construct, id: string, props?: EventBusProps);
    get eventBusArn(): string;
    get eventBusName(): string;
    addRules(scope: cdk.Construct, rules: {
        [key: string]: EventBusCdkRuleProps;
    }): void;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToTarget(ruleKey: string, targetIndex: number, permissions: Permissions): void;
    getConstructInfo(): ISstConstructInfo;
    private addRule;
    private addTarget;
    private addQueueTarget;
    private addFunctionTarget;
}
