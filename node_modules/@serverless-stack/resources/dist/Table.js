"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = exports.TableFieldType = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const dynamodb = __importStar(require("@aws-cdk/aws-dynamodb"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const lambdaEventSources = __importStar(require("@aws-cdk/aws-lambda-event-sources"));
const core_1 = require("@serverless-stack/core");
const Stack_1 = require("./Stack");
const Function_1 = require("./Function");
const logger = (0, core_1.getChildLogger)("resources");
var TableFieldType;
(function (TableFieldType) {
    TableFieldType["BINARY"] = "B";
    TableFieldType["NUMBER"] = "N";
    TableFieldType["STRING"] = "S";
})(TableFieldType = exports.TableFieldType || (exports.TableFieldType = {}));
/////////////////////
// Construct
/////////////////////
class Table extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { fields, primaryIndex, globalIndexes, localIndexes, secondaryIndexes, dynamodbTable, kinesisStream, stream, consumers, defaultFunctionProps, } = props;
        this.functions = {};
        this.fields = fields;
        this.permissionsAttachedForAllConsumers = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Input Validation
        ////////////////////
        if (consumers)
            this.checkDeprecatedConsumers(consumers);
        if (secondaryIndexes)
            this.checkDeprecatedSecondaryIndexes();
        this.validateFieldsAndIndexes(id, props);
        ////////////////////
        // Create Table
        ////////////////////
        if (cdk.Construct.isConstruct(dynamodbTable)) {
            // Validate "fields" is not configured
            if (fields !== undefined) {
                throw new Error(`Cannot configure the "fields" when "dynamodbTable" is a construct in the "${id}" Table`);
            }
            // Validate "stream" is not configured
            if (stream !== undefined) {
                throw new Error(`Cannot configure the "stream" when "dynamodbTable" is a construct in the "${id}" Table`);
            }
            this.dynamodbTableType = "IMPORTED";
            this.dynamodbTable = dynamodbTable;
        }
        else {
            let dynamodbTableProps = (dynamodbTable || {});
            // Validate "fields" is configured
            if (fields === undefined) {
                throw new Error(`Missing "fields" in the "${id}" Table`);
            }
            // Validate dynamodbTableProps does not contain "partitionKey", "sortKey" and "stream"
            if (dynamodbTableProps.partitionKey) {
                throw new Error(`Cannot configure the "dynamodbTableProps.partitionKey" in the "${id}" Table`);
            }
            if (dynamodbTableProps.sortKey) {
                throw new Error(`Cannot configure the "dynamodbTableProps.sortKey" in the "${id}" Table`);
            }
            if (dynamodbTableProps.stream) {
                throw new Error(`Cannot configure the "dynamodbTableProps.stream" in the "${id}" Table`);
            }
            if (fields && primaryIndex) {
                dynamodbTableProps = Object.assign(Object.assign({}, dynamodbTableProps), { partitionKey: this.buildAttribute(fields, primaryIndex.partitionKey), sortKey: primaryIndex.sortKey
                        ? this.buildAttribute(fields, primaryIndex.sortKey)
                        : undefined });
            }
            this.dynamodbTableType = "CREATED";
            this.dynamodbTable = new dynamodb.Table(this, "Table", Object.assign({ tableName: root.logicalPrefixedName(id), pointInTimeRecovery: true, billingMode: dynamodb.BillingMode.PAY_PER_REQUEST, stream: this.buildStreamConfig(stream) }, dynamodbTableProps));
        }
        //////////////////////////////
        // Create Secondary Indexes
        //////////////////////////////
        const allGlobalIndexes = globalIndexes || secondaryIndexes;
        if (allGlobalIndexes)
            this.addGlobalIndexes(allGlobalIndexes);
        if (localIndexes)
            this.addLocalIndexes(localIndexes);
        ///////////////////////////
        // Create Consumers
        ///////////////////////////
        if (consumers) {
            Object.keys(consumers).forEach((consumerName) => this.addConsumer(this, consumerName, consumers[consumerName]));
        }
        // Create Kinesis Stream
        this.buildKinesisStreamSpec(kinesisStream);
        ///////////////////
        // Register Construct
        ///////////////////
        root.registerConstruct(this);
    }
    addGlobalIndexes(secondaryIndexes) {
        var _a, _b, _c;
        if (!this.fields)
            throw new Error(`Cannot add secondary indexes to "${this.node.id}" Table without defining "fields"`);
        for (const [indexName, { partitionKey, sortKey, indexProps },] of Object.entries(secondaryIndexes)) {
            // Validate indexProps does not contain "indexName", "partitionKey" and "sortKey"
            if ((_a = indexProps) === null || _a === void 0 ? void 0 : _a.indexName) {
                throw new Error(`Cannot configure the "indexProps.indexName" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_b = indexProps) === null || _b === void 0 ? void 0 : _b.partitionKey) {
                throw new Error(`Cannot configure the "indexProps.partitionKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_c = indexProps) === null || _c === void 0 ? void 0 : _c.sortKey) {
                throw new Error(`Cannot configure the "indexProps.sortKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            this.dynamodbTable.addGlobalSecondaryIndex(Object.assign({ indexName, partitionKey: this.buildAttribute(this.fields, partitionKey), sortKey: sortKey
                    ? this.buildAttribute(this.fields, sortKey)
                    : undefined }, indexProps));
        }
    }
    addLocalIndexes(secondaryIndexes) {
        var _a, _b;
        if (!this.fields)
            throw new Error(`Cannot add local secondary indexes to "${this.node.id}" Table without defining "fields"`);
        for (const [indexName, { sortKey, indexProps }] of Object.entries(secondaryIndexes)) {
            // Validate indexProps does not contain "indexName", "partitionKey" and "sortKey"
            if ((_a = indexProps) === null || _a === void 0 ? void 0 : _a.indexName) {
                throw new Error(`Cannot configure the "indexProps.indexName" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_b = indexProps) === null || _b === void 0 ? void 0 : _b.sortKey) {
                throw new Error(`Cannot configure the "indexProps.sortKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            this.dynamodbTable.addLocalSecondaryIndex(Object.assign({ indexName, sortKey: this.buildAttribute(this.fields, sortKey) }, indexProps));
        }
    }
    get tableArn() {
        return this.dynamodbTable.tableArn;
    }
    get tableName() {
        return this.dynamodbTable.tableName;
    }
    addConsumers(scope, consumers) {
        // Handle deprecated consumers
        this.checkDeprecatedConsumers(consumers);
        Object.keys(consumers).forEach((consumerName) => {
            this.addConsumer(scope, consumerName, consumers[consumerName]);
        });
    }
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
    attachPermissionsToConsumer(consumerName, permissions) {
        if (!this.functions[consumerName]) {
            throw new Error(`The "${consumerName}" consumer was not found in the "${this.node.id}" Table.`);
        }
        this.functions[consumerName].attachPermissions(permissions);
    }
    getFunction(consumerName) {
        return this.functions[consumerName];
    }
    getConstructInfo() {
        // imported
        if (!cdk.Token.isUnresolved(this.dynamodbTable.tableName)) {
            return {
                tableName: this.dynamodbTable.tableName,
            };
        }
        // created
        const cfn = this.dynamodbTable.node.defaultChild;
        return {
            tableLogicalId: Stack_1.Stack.of(this).getLogicalId(cfn),
        };
    }
    addConsumer(scope, consumerName, consumer) {
        // validate stream enabled
        // note: if table is imported, do not check because we want to allow ppl to
        //       import without specifying the "tableStreamArn". And let them add
        //       consumers to it.
        if (!this.dynamodbTable.tableStreamArn) {
            const errorMsgs = [
                `Please enable the "stream" option to add consumers to the "${this.node.id}" Table.`,
            ];
            if (this.dynamodbTableType === "IMPORTED") {
                errorMsgs.push(`To import a table with stream enabled, use the "Table.fromTableAttributes()" method, and set the "tableStreamArn" in the attributes.`);
            }
            throw new Error(errorMsgs.join(" "));
        }
        // parse consumer
        let consumerFunction, consumerProps;
        if (consumer.function) {
            consumer = consumer;
            consumerFunction = consumer.function;
            consumerProps = consumer.consumerProps;
        }
        else {
            consumerFunction = consumer;
        }
        consumerProps = Object.assign({ startingPosition: lambda.StartingPosition.LATEST }, (consumerProps || {}));
        // create function
        const fn = Function_1.Function.fromDefinition(scope, consumerName, consumerFunction, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the consumers using FunctionProps, so the Table construct can apply the "defaultFunctionProps" to them.`);
        this.functions[consumerName] = fn;
        // create event source
        const eventSource = new lambdaEventSources.DynamoEventSource(this.dynamodbTable, consumerProps);
        fn.addEventSource(eventSource);
        // attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            fn.attachPermissions(permissions);
        });
        return fn;
    }
    buildAttribute(fields, name) {
        return {
            name,
            type: this.convertTableFieldTypeToAttributeType(fields[name]),
        };
    }
    buildStreamConfig(stream) {
        if (stream === true) {
            return dynamodb.StreamViewType.NEW_AND_OLD_IMAGES;
        }
        else if (stream === false) {
            return undefined;
        }
        return stream;
    }
    convertTableFieldTypeToAttributeType(fieldType) {
        if (fieldType === TableFieldType.BINARY) {
            return dynamodb.AttributeType.BINARY;
        }
        else if (fieldType === TableFieldType.NUMBER) {
            return dynamodb.AttributeType.NUMBER;
        }
        else {
            return dynamodb.AttributeType.STRING;
        }
    }
    buildKinesisStreamSpec(kinesisStream) {
        if (!kinesisStream) {
            return;
        }
        const cfTable = this.dynamodbTable.node.defaultChild;
        cfTable.addPropertyOverride("KinesisStreamSpecification.StreamArn", kinesisStream.streamArn);
    }
    validateFieldsAndIndexes(id, props) {
        const { fields, primaryIndex } = props;
        // Validate "fields"
        if (fields && Object.keys(fields).length === 0) {
            throw new Error(`No fields defined for the "${id}" Table`);
        }
        // Validate "primaryIndex"
        if (primaryIndex && !primaryIndex.partitionKey) {
            throw new Error(`Missing "partitionKey" in primary index for the "${id}" Table`);
        }
        // Validate "fields" and "primaryIndex" co-exists
        if (fields) {
            if (!primaryIndex) {
                throw new Error(`Missing "primaryIndex" in "${id}" Table`);
            }
        }
        else {
            if (primaryIndex) {
                throw new Error(`Cannot configure the "primaryIndex" without setting the "fields" in "${id}" Table`);
            }
        }
    }
    checkDeprecatedConsumers(consumers) {
        if (Array.isArray(consumers)) {
            throw new Error(`The "consumers" property no longer takes an array. It nows takes an associative array with the consumer name being the index key. More details on upgrading - https://docs.serverless-stack.com/constructs/Table#upgrading-to-v0210`);
        }
    }
    checkDeprecatedSecondaryIndexes() {
        logger.debug(`WARNING: The "secondaryIndexes" property has been renamed to "globalIndexes". "secondaryIndexes" will continue to work but will be removed at a later date. More details on the deprecation - https://docs.serverless-stack.com/constructs/Table#secondaryindexes-deprecated`);
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGFibGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVGFibGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1EQUFxQztBQUNyQyxnRUFBa0Q7QUFDbEQsNERBQThDO0FBQzlDLHNGQUF3RTtBQUN4RSxpREFBd0Q7QUFFeEQsbUNBQWdDO0FBRWhDLHlDQUErRTtBQUkvRSxNQUFNLE1BQU0sR0FBRyxJQUFBLHFCQUFjLEVBQUMsV0FBVyxDQUFDLENBQUM7QUFFM0MsSUFBWSxjQUlYO0FBSkQsV0FBWSxjQUFjO0lBQ3hCLDhCQUFzQyxDQUFBO0lBQ3RDLDhCQUFzQyxDQUFBO0lBQ3RDLDhCQUFzQyxDQUFBO0FBQ3hDLENBQUMsRUFKVyxjQUFjLEdBQWQsc0JBQWMsS0FBZCxzQkFBYyxRQUl6QjtBQXdERCxxQkFBcUI7QUFDckIsWUFBWTtBQUNaLHFCQUFxQjtBQUVyQixNQUFhLEtBQU0sU0FBUSxHQUFHLENBQUMsU0FBUztJQVN0QyxZQUFZLEtBQW9CLEVBQUUsRUFBVSxFQUFFLEtBQWlCO1FBQzdELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFXLENBQUM7UUFDcEMsTUFBTSxFQUNKLE1BQU0sRUFDTixZQUFZLEVBQ1osYUFBYSxFQUNiLFlBQVksRUFDWixnQkFBZ0IsRUFDaEIsYUFBYSxFQUNiLGFBQWEsRUFDYixNQUFNLEVBQ04sU0FBUyxFQUNULG9CQUFvQixHQUNyQixHQUFHLEtBQUssQ0FBQztRQUNWLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxrQ0FBa0MsR0FBRyxFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBRWpELG9CQUFvQjtR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QUMxQixJQUFJLFlBQVksSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLEVBQUU7WUFDOUMsTUFBTSxJQUFJLEtBQUssQ0FDYixvREFBb0QsRUFBRSxTQUFTLENBQ2hFLENBQUM7U0FDSDtRQUVELGlEQUFpRDtRQUNqRCxJQUFJLE1BQU0sRUFBRTtZQUNWLElBQUksQ0FBQyxZQUFZLEVBQUU7Z0JBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDNUQ7U0FDRjthQUFNO1lBQ0wsSUFBSSxZQUFZLEVBQUU7Z0JBQ2hCLE1BQU0sSUFBSSxLQUFLLENBQ2Isd0VBQXdFLEVBQUUsU0FBUyxDQUNwRixDQUFDO2FBQ0g7U0FDRjtJQUNILENBQUM7SUFFTyx3QkFBd0IsQ0FBQyxTQUVoQztRQUNDLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUM1QixNQUFNLElBQUksS0FBSyxDQUNiLHFPQUFxTyxDQUN0TyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRU8sK0JBQStCO1FBQ3JDLE1BQU0sQ0FBQyxLQUFLLENBQ1YsOFFBQThRLENBQy9RLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF0WkQsc0JBc1pDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJAYXdzLWNkay9jb3JlXCI7XG5pbXBvcnQgKiBhcyBkeW5hbW9kYiBmcm9tIFwiQGF3cy1jZGsvYXdzLWR5bmFtb2RiXCI7XG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSBcIkBhd3MtY2RrL2F3cy1sYW1iZGFcIjtcbmltcG9ydCAqIGFzIGxhbWJkYUV2ZW50U291cmNlcyBmcm9tIFwiQGF3cy1jZGsvYXdzLWxhbWJkYS1ldmVudC1zb3VyY2VzXCI7XG5pbXBvcnQgeyBnZXRDaGlsZExvZ2dlciB9IGZyb20gXCJAc2VydmVybGVzcy1zdGFjay9jb3JlXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSBcIi4vU3RhY2tcIjtcbmltcG9ydCB7IElTc3RDb25zdHJ1Y3QsIElTc3RDb25zdHJ1Y3RJbmZvIH0gZnJvbSBcIi4vQ29uc3RydWN0XCI7XG5pbXBvcnQgeyBGdW5jdGlvbiBhcyBGbiwgRnVuY3Rpb25Qcm9wcywgRnVuY3Rpb25EZWZpbml0aW9uIH0gZnJvbSBcIi4vRnVuY3Rpb25cIjtcbmltcG9ydCB7IEtpbmVzaXNTdHJlYW0gfSBmcm9tIFwiLi9LaW5lc2lzU3RyZWFtXCI7XG5pbXBvcnQgeyBQZXJtaXNzaW9ucyB9IGZyb20gXCIuL3V0aWwvcGVybWlzc2lvblwiO1xuXG5jb25zdCBsb2dnZXIgPSBnZXRDaGlsZExvZ2dlcihcInJlc291cmNlc1wiKTtcblxuZXhwb3J0IGVudW0gVGFibGVGaWVsZFR5cGUge1xuICBCSU5BUlkgPSBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLkJJTkFSWSxcbiAgTlVNQkVSID0gZHluYW1vZGIuQXR0cmlidXRlVHlwZS5OVU1CRVIsXG4gIFNUUklORyA9IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HLFxufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEludGVyZmFjZXNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgaW50ZXJmYWNlIFRhYmxlUHJvcHMge1xuICByZWFkb25seSBmaWVsZHM/OiBSZWNvcmQ8c3RyaW5nLCBUYWJsZUZpZWxkVHlwZT47XG4gIHJlYWRvbmx5IHByaW1hcnlJbmRleD86IFRhYmxlR2xvYmFsSW5kZXhQcm9wcztcbiAgLyoqXG4gICAqIEBkZXByZWNhdGVkIFVzZSBnbG9iYWxJbmRleGVzXG4gICAqL1xuICByZWFkb25seSBzZWNvbmRhcnlJbmRleGVzPzogUmVjb3JkPHN0cmluZywgVGFibGVHbG9iYWxJbmRleFByb3BzPjtcbiAgcmVhZG9ubHkgZ2xvYmFsSW5kZXhlcz86IFJlY29yZDxzdHJpbmcsIFRhYmxlR2xvYmFsSW5kZXhQcm9wcz47XG4gIHJlYWRvbmx5IGxvY2FsSW5kZXhlcz86IFJlY29yZDxzdHJpbmcsIFRhYmxlTG9jYWxJbmRleFByb3BzPjtcbiAgcmVhZG9ubHkgZHluYW1vZGJUYWJsZT86IGR5bmFtb2RiLklUYWJsZSB8IFRhYmxlQ2RrUHJvcHM7XG4gIHJlYWRvbmx5IGtpbmVzaXNTdHJlYW0/OiBLaW5lc2lzU3RyZWFtO1xuICByZWFkb25seSBzdHJlYW0/OiBib29sZWFuIHwgZHluYW1vZGIuU3RyZWFtVmlld1R5cGU7XG4gIHJlYWRvbmx5IGNvbnN1bWVycz86IHtcbiAgICBbY29uc3VtZXJOYW1lOiBzdHJpbmddOiBGdW5jdGlvbkRlZmluaXRpb24gfCBUYWJsZUNvbnN1bWVyUHJvcHM7XG4gIH07XG4gIHJlYWRvbmx5IGRlZmF1bHRGdW5jdGlvblByb3BzPzogRnVuY3Rpb25Qcm9wcztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUYWJsZUNvbnN1bWVyUHJvcHMge1xuICByZWFkb25seSBmdW5jdGlvbjogRnVuY3Rpb25EZWZpbml0aW9uO1xuICByZWFkb25seSBjb25zdW1lclByb3BzPzogbGFtYmRhRXZlbnRTb3VyY2VzLkR5bmFtb0V2ZW50U291cmNlUHJvcHM7XG59XG5cbmV4cG9ydCB0eXBlIFRhYmxlTG9jYWxJbmRleFByb3BzID0ge1xuICByZWFkb25seSBzb3J0S2V5OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGluZGV4UHJvcHM/OiBPbWl0PFxuICAgIGR5bmFtb2RiLkxvY2FsU2Vjb25kYXJ5SW5kZXhQcm9wcyxcbiAgICBrZXlvZiBUYWJsZUxvY2FsSW5kZXhQcm9wcyB8IFwiaW5kZXhOYW1lXCJcbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIFRhYmxlR2xvYmFsSW5kZXhQcm9wcyA9IHtcbiAgcmVhZG9ubHkgcGFydGl0aW9uS2V5OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHNvcnRLZXk/OiBzdHJpbmc7XG4gIHJlYWRvbmx5IGluZGV4UHJvcHM/OiBUYWJsZUNka0luZGV4UHJvcHM7XG59O1xuXG4vLyBPbGQgZXhwb3J0XG5leHBvcnQgdHlwZSBUYWJsZUluZGV4UHJvcHMgPSBUYWJsZUdsb2JhbEluZGV4UHJvcHM7XG5cbmV4cG9ydCB0eXBlIFRhYmxlQ2RrUHJvcHMgPSBPbWl0PFxuICBkeW5hbW9kYi5UYWJsZVByb3BzLFxuICBcInBhcnRpdGlvbktleVwiIHwgXCJzb3J0S2V5XCJcbj47XG5cbmV4cG9ydCB0eXBlIFRhYmxlQ2RrSW5kZXhQcm9wcyA9IE9taXQ8XG4gIGR5bmFtb2RiLkdsb2JhbFNlY29uZGFyeUluZGV4UHJvcHMsXG4gIFwiaW5kZXhOYW1lXCIgfCBcInBhcnRpdGlvbktleVwiIHwgXCJzb3J0S2V5XCJcbj47XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gQ29uc3RydWN0XG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGNsYXNzIFRhYmxlIGV4dGVuZHMgY2RrLkNvbnN0cnVjdCBpbXBsZW1lbnRzIElTc3RDb25zdHJ1Y3Qge1xuICBwdWJsaWMgcmVhZG9ubHkgZHluYW1vZGJUYWJsZTogZHluYW1vZGIuVGFibGU7XG4gIHByaXZhdGUgcmVhZG9ubHkgZHluYW1vZGJUYWJsZVR5cGU6IFwiQ1JFQVRFRFwiIHwgXCJJTVBPUlRFRFwiO1xuICBwcml2YXRlIGZ1bmN0aW9uczogeyBbY29uc3VtZXJOYW1lOiBzdHJpbmddOiBGbiB9O1xuICBwcml2YXRlIHJlYWRvbmx5IHBlcm1pc3Npb25zQXR0YWNoZWRGb3JBbGxDb25zdW1lcnM6IFBlcm1pc3Npb25zW107XG4gIHByaXZhdGUgcmVhZG9ubHkgZGVmYXVsdEZ1bmN0aW9uUHJvcHM/OiBGdW5jdGlvblByb3BzO1xuICBwcml2YXRlIHJlYWRvbmx5IHN0cmVhbT86IGR5bmFtb2RiLlN0cmVhbVZpZXdUeXBlO1xuICBwcml2YXRlIHJlYWRvbmx5IGZpZWxkcz86IFJlY29yZDxzdHJpbmcsIFRhYmxlRmllbGRUeXBlPjtcblxuICBjb25zdHJ1Y3RvcihzY29wZTogY2RrLkNvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IFRhYmxlUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQpO1xuXG4gICAgY29uc3Qgcm9vdCA9IHNjb3BlLm5vZGUucm9vdCBhcyBBcHA7XG4gICAgY29uc3Qge1xuICAgICAgZmllbGRzLFxuICAgICAgcHJpbWFyeUluZGV4LFxuICAgICAgZ2xvYmFsSW5kZXhlcyxcbiAgICAgIGxvY2FsSW5kZXhlcyxcbiAgICAgIHNlY29uZGFyeUluZGV4ZXMsXG4gICAgICBkeW5hbW9kYlRhYmxlLFxuICAgICAga2luZXNpc1N0cmVhbSxcbiAgICAgIHN0cmVhbSxcbiAgICAgIGNvbnN1bWVycyxcbiAgICAgIGRlZmF1bHRGdW5jdGlvblByb3BzLFxuICAgIH0gPSBwcm9wcztcbiAgICB0aGlzLmZ1bmN0aW9ucyA9IHt9O1xuICAgIHRoaXMuZmllbGRzID0gZmllbGRzO1xuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbENvbnN1bWVycyA9IFtdO1xuICAgIHRoaXMuZGVmYXVsdEZ1bmN0aW9uUHJvcHMgPSBkZWZhdWx0RnVuY3Rpb25Qcm9wcztcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gSW5wdXQgVmFsaWRhdGlvblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgaWYgKGNvbnN1bWVycykgdGhpcy5jaGVja0RlcHJlY2F0ZWRDb25zdW1lcnMoY29uc3VtZXJzKTtcbiAgICBpZiAoc2Vjb25kYXJ5SW5kZXhlcykgdGhpcy5jaGVja0RlcHJlY2F0ZWRTZWNvbmRhcnlJbmRleGVzKCk7XG4gICAgdGhpcy52YWxpZGF0ZUZpZWxkc0FuZEluZGV4ZXMoaWQsIHByb3BzKTtcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3JlYXRlIFRhYmxlXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICBpZiAoY2RrLkNvbnN0cnVjdC5pc0NvbnN0cnVjdChkeW5hbW9kYlRhYmxlKSkge1xuICAgICAgLy8gVmFsaWRhdGUgXCJmaWVsZHNcIiBpcyBub3QgY29uZmlndXJlZFxuICAgICAgaWYgKGZpZWxkcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IGNvbmZpZ3VyZSB0aGUgXCJmaWVsZHNcIiB3aGVuIFwiZHluYW1vZGJUYWJsZVwiIGlzIGEgY29uc3RydWN0IGluIHRoZSBcIiR7aWR9XCIgVGFibGVgXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIFwic3RyZWFtXCIgaXMgbm90IGNvbmZpZ3VyZWRcbiAgICAgIGlmIChzdHJlYW0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENhbm5vdCBjb25maWd1cmUgdGhlIFwic3RyZWFtXCIgd2hlbiBcImR5bmFtb2RiVGFibGVcIiBpcyBhIGNvbnN0cnVjdCBpbiB0aGUgXCIke2lkfVwiIFRhYmxlYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmR5bmFtb2RiVGFibGVUeXBlID0gXCJJTVBPUlRFRFwiO1xuICAgICAgdGhpcy5keW5hbW9kYlRhYmxlID0gZHluYW1vZGJUYWJsZSBhcyBkeW5hbW9kYi5UYWJsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGR5bmFtb2RiVGFibGVQcm9wcyA9IChkeW5hbW9kYlRhYmxlIHx8IHt9KSBhcyBkeW5hbW9kYi5UYWJsZVByb3BzO1xuXG4gICAgICAvLyBWYWxpZGF0ZSBcImZpZWxkc1wiIGlzIGNvbmZpZ3VyZWRcbiAgICAgIGlmIChmaWVsZHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgXCJmaWVsZHNcIiBpbiB0aGUgXCIke2lkfVwiIFRhYmxlYCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFZhbGlkYXRlIGR5bmFtb2RiVGFibGVQcm9wcyBkb2VzIG5vdCBjb250YWluIFwicGFydGl0aW9uS2V5XCIsIFwic29ydEtleVwiIGFuZCBcInN0cmVhbVwiXG4gICAgICBpZiAoZHluYW1vZGJUYWJsZVByb3BzLnBhcnRpdGlvbktleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENhbm5vdCBjb25maWd1cmUgdGhlIFwiZHluYW1vZGJUYWJsZVByb3BzLnBhcnRpdGlvbktleVwiIGluIHRoZSBcIiR7aWR9XCIgVGFibGVgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZHluYW1vZGJUYWJsZVByb3BzLnNvcnRLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDYW5ub3QgY29uZmlndXJlIHRoZSBcImR5bmFtb2RiVGFibGVQcm9wcy5zb3J0S2V5XCIgaW4gdGhlIFwiJHtpZH1cIiBUYWJsZWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChkeW5hbW9kYlRhYmxlUHJvcHMuc3RyZWFtKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IGNvbmZpZ3VyZSB0aGUgXCJkeW5hbW9kYlRhYmxlUHJvcHMuc3RyZWFtXCIgaW4gdGhlIFwiJHtpZH1cIiBUYWJsZWBcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpZWxkcyAmJiBwcmltYXJ5SW5kZXgpIHtcbiAgICAgICAgZHluYW1vZGJUYWJsZVByb3BzID0ge1xuICAgICAgICAgIC4uLmR5bmFtb2RiVGFibGVQcm9wcyxcbiAgICAgICAgICBwYXJ0aXRpb25LZXk6IHRoaXMuYnVpbGRBdHRyaWJ1dGUoZmllbGRzLCBwcmltYXJ5SW5kZXgucGFydGl0aW9uS2V5KSxcbiAgICAgICAgICBzb3J0S2V5OiBwcmltYXJ5SW5kZXguc29ydEtleVxuICAgICAgICAgICAgPyB0aGlzLmJ1aWxkQXR0cmlidXRlKGZpZWxkcywgcHJpbWFyeUluZGV4LnNvcnRLZXkpXG4gICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5keW5hbW9kYlRhYmxlVHlwZSA9IFwiQ1JFQVRFRFwiO1xuICAgICAgdGhpcy5keW5hbW9kYlRhYmxlID0gbmV3IGR5bmFtb2RiLlRhYmxlKHRoaXMsIFwiVGFibGVcIiwge1xuICAgICAgICB0YWJsZU5hbWU6IHJvb3QubG9naWNhbFByZWZpeGVkTmFtZShpZCksXG4gICAgICAgIHBvaW50SW5UaW1lUmVjb3Zlcnk6IHRydWUsXG4gICAgICAgIGJpbGxpbmdNb2RlOiBkeW5hbW9kYi5CaWxsaW5nTW9kZS5QQVlfUEVSX1JFUVVFU1QsXG4gICAgICAgIHN0cmVhbTogdGhpcy5idWlsZFN0cmVhbUNvbmZpZyhzdHJlYW0pLFxuICAgICAgICAuLi4oZHluYW1vZGJUYWJsZVByb3BzIGFzIGR5bmFtb2RiLlRhYmxlUHJvcHMpLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gQ3JlYXRlIFNlY29uZGFyeSBJbmRleGVzXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgY29uc3QgYWxsR2xvYmFsSW5kZXhlcyA9IGdsb2JhbEluZGV4ZXMgfHwgc2Vjb25kYXJ5SW5kZXhlcztcbiAgICBpZiAoYWxsR2xvYmFsSW5kZXhlcykgdGhpcy5hZGRHbG9iYWxJbmRleGVzKGFsbEdsb2JhbEluZGV4ZXMpO1xuICAgIGlmIChsb2NhbEluZGV4ZXMpIHRoaXMuYWRkTG9jYWxJbmRleGVzKGxvY2FsSW5kZXhlcyk7XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDcmVhdGUgQ29uc3VtZXJzXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgaWYgKGNvbnN1bWVycykge1xuICAgICAgT2JqZWN0LmtleXMoY29uc3VtZXJzKS5mb3JFYWNoKChjb25zdW1lck5hbWU6IHN0cmluZykgPT5cbiAgICAgICAgdGhpcy5hZGRDb25zdW1lcih0aGlzLCBjb25zdW1lck5hbWUsIGNvbnN1bWVyc1tjb25zdW1lck5hbWVdKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgS2luZXNpcyBTdHJlYW1cbiAgICB0aGlzLmJ1aWxkS2luZXNpc1N0cmVhbVNwZWMoa2luZXNpc1N0cmVhbSk7XG5cbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gUmVnaXN0ZXIgQ29uc3RydWN0XG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIHJvb3QucmVnaXN0ZXJDb25zdHJ1Y3QodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgYWRkR2xvYmFsSW5kZXhlcyhcbiAgICBzZWNvbmRhcnlJbmRleGVzOiBOb25OdWxsYWJsZTxUYWJsZVByb3BzW1wiZ2xvYmFsSW5kZXhlc1wiXT5cbiAgKSB7XG4gICAgaWYgKCF0aGlzLmZpZWxkcylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENhbm5vdCBhZGQgc2Vjb25kYXJ5IGluZGV4ZXMgdG8gXCIke3RoaXMubm9kZS5pZH1cIiBUYWJsZSB3aXRob3V0IGRlZmluaW5nIFwiZmllbGRzXCJgXG4gICAgICApO1xuICAgIGZvciAoY29uc3QgW1xuICAgICAgaW5kZXhOYW1lLFxuICAgICAgeyBwYXJ0aXRpb25LZXksIHNvcnRLZXksIGluZGV4UHJvcHMgfSxcbiAgICBdIG9mIE9iamVjdC5lbnRyaWVzKHNlY29uZGFyeUluZGV4ZXMpKSB7XG4gICAgICAvLyBWYWxpZGF0ZSBpbmRleFByb3BzIGRvZXMgbm90IGNvbnRhaW4gXCJpbmRleE5hbWVcIiwgXCJwYXJ0aXRpb25LZXlcIiBhbmQgXCJzb3J0S2V5XCJcbiAgICAgIGlmICgoaW5kZXhQcm9wcyBhcyBkeW5hbW9kYi5HbG9iYWxTZWNvbmRhcnlJbmRleFByb3BzKT8uaW5kZXhOYW1lKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICBgQ2Fubm90IGNvbmZpZ3VyZSB0aGUgXCJpbmRleFByb3BzLmluZGV4TmFtZVwiIGluIHRoZSBcIiR7aW5kZXhOYW1lfVwiIGluZGV4IG9mIHRoZSBcIiR7dGhpcy5ub2RlLmlkfVwiIFRhYmxlYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKChpbmRleFByb3BzIGFzIGR5bmFtb2RiLkdsb2JhbFNlY29uZGFyeUluZGV4UHJvcHMpPy5wYXJ0aXRpb25LZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDYW5ub3QgY29uZmlndXJlIHRoZSBcImluZGV4UHJvcHMucGFydGl0aW9uS2V5XCIgaW4gdGhlIFwiJHtpbmRleE5hbWV9XCIgaW5kZXggb2YgdGhlIFwiJHt0aGlzLm5vZGUuaWR9XCIgVGFibGVgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGluZGV4UHJvcHMgYXMgZHluYW1vZGIuR2xvYmFsU2Vjb25kYXJ5SW5kZXhQcm9wcyk/LnNvcnRLZXkpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDYW5ub3QgY29uZmlndXJlIHRoZSBcImluZGV4UHJvcHMuc29ydEtleVwiIGluIHRoZSBcIiR7aW5kZXhOYW1lfVwiIGluZGV4IG9mIHRoZSBcIiR7dGhpcy5ub2RlLmlkfVwiIFRhYmxlYFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB0aGlzLmR5bmFtb2RiVGFibGUuYWRkR2xvYmFsU2Vjb25kYXJ5SW5kZXgoe1xuICAgICAgICBpbmRleE5hbWUsXG4gICAgICAgIHBhcnRpdGlvbktleTogdGhpcy5idWlsZEF0dHJpYnV0ZSh0aGlzLmZpZWxkcywgcGFydGl0aW9uS2V5KSxcbiAgICAgICAgc29ydEtleTogc29ydEtleVxuICAgICAgICAgID8gdGhpcy5idWlsZEF0dHJpYnV0ZSh0aGlzLmZpZWxkcywgc29ydEtleSlcbiAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgLi4uaW5kZXhQcm9wcyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBhZGRMb2NhbEluZGV4ZXMoXG4gICAgc2Vjb25kYXJ5SW5kZXhlczogTm9uTnVsbGFibGU8VGFibGVQcm9wc1tcImxvY2FsSW5kZXhlc1wiXT5cbiAgKSB7XG4gICAgaWYgKCF0aGlzLmZpZWxkcylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENhbm5vdCBhZGQgbG9jYWwgc2Vjb25kYXJ5IGluZGV4ZXMgdG8gXCIke3RoaXMubm9kZS5pZH1cIiBUYWJsZSB3aXRob3V0IGRlZmluaW5nIFwiZmllbGRzXCJgXG4gICAgICApO1xuICAgIGZvciAoY29uc3QgW2luZGV4TmFtZSwgeyBzb3J0S2V5LCBpbmRleFByb3BzIH1dIG9mIE9iamVjdC5lbnRyaWVzKFxuICAgICAgc2Vjb25kYXJ5SW5kZXhlcyFcbiAgICApKSB7XG4gICAgICAvLyBWYWxpZGF0ZSBpbmRleFByb3BzIGRvZXMgbm90IGNvbnRhaW4gXCJpbmRleE5hbWVcIiwgXCJwYXJ0aXRpb25LZXlcIiBhbmQgXCJzb3J0S2V5XCJcbiAgICAgIGlmICgoaW5kZXhQcm9wcyBhcyBkeW5hbW9kYi5Mb2NhbFNlY29uZGFyeUluZGV4UHJvcHMpPy5pbmRleE5hbWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIGBDYW5ub3QgY29uZmlndXJlIHRoZSBcImluZGV4UHJvcHMuaW5kZXhOYW1lXCIgaW4gdGhlIFwiJHtpbmRleE5hbWV9XCIgaW5kZXggb2YgdGhlIFwiJHt0aGlzLm5vZGUuaWR9XCIgVGFibGVgXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGluZGV4UHJvcHMgYXMgZHluYW1vZGIuTG9jYWxTZWNvbmRhcnlJbmRleFByb3BzKT8uc29ydEtleSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENhbm5vdCBjb25maWd1cmUgdGhlIFwiaW5kZXhQcm9wcy5zb3J0S2V5XCIgaW4gdGhlIFwiJHtpbmRleE5hbWV9XCIgaW5kZXggb2YgdGhlIFwiJHt0aGlzLm5vZGUuaWR9XCIgVGFibGVgXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuZHluYW1vZGJUYWJsZS5hZGRMb2NhbFNlY29uZGFyeUluZGV4KHtcbiAgICAgICAgaW5kZXhOYW1lLFxuICAgICAgICBzb3J0S2V5OiB0aGlzLmJ1aWxkQXR0cmlidXRlKHRoaXMuZmllbGRzLCBzb3J0S2V5KSxcbiAgICAgICAgLi4uaW5kZXhQcm9wcyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBnZXQgdGFibGVBcm4oKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5keW5hbW9kYlRhYmxlLnRhYmxlQXJuO1xuICB9XG5cbiAgcHVibGljIGdldCB0YWJsZU5hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5keW5hbW9kYlRhYmxlLnRhYmxlTmFtZTtcbiAgfVxuXG4gIHB1YmxpYyBhZGRDb25zdW1lcnMoXG4gICAgc2NvcGU6IGNkay5Db25zdHJ1Y3QsXG4gICAgY29uc3VtZXJzOiB7XG4gICAgICBbY29uc3VtZXJOYW1lOiBzdHJpbmddOiBGdW5jdGlvbkRlZmluaXRpb24gfCBUYWJsZUNvbnN1bWVyUHJvcHM7XG4gICAgfVxuICApOiB2b2lkIHtcbiAgICAvLyBIYW5kbGUgZGVwcmVjYXRlZCBjb25zdW1lcnNcbiAgICB0aGlzLmNoZWNrRGVwcmVjYXRlZENvbnN1bWVycyhjb25zdW1lcnMpO1xuXG4gICAgT2JqZWN0LmtleXMoY29uc3VtZXJzKS5mb3JFYWNoKChjb25zdW1lck5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgdGhpcy5hZGRDb25zdW1lcihzY29wZSwgY29uc3VtZXJOYW1lLCBjb25zdW1lcnNbY29uc3VtZXJOYW1lXSk7XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgYXR0YWNoUGVybWlzc2lvbnMocGVybWlzc2lvbnM6IFBlcm1pc3Npb25zKTogdm9pZCB7XG4gICAgT2JqZWN0LnZhbHVlcyh0aGlzLmZ1bmN0aW9ucykuZm9yRWFjaCgoZm4pID0+XG4gICAgICBmbi5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucylcbiAgICApO1xuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbENvbnN1bWVycy5wdXNoKHBlcm1pc3Npb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBhdHRhY2hQZXJtaXNzaW9uc1RvQ29uc3VtZXIoXG4gICAgY29uc3VtZXJOYW1lOiBzdHJpbmcsXG4gICAgcGVybWlzc2lvbnM6IFBlcm1pc3Npb25zXG4gICk6IHZvaWQge1xuICAgIGlmICghdGhpcy5mdW5jdGlvbnNbY29uc3VtZXJOYW1lXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgVGhlIFwiJHtjb25zdW1lck5hbWV9XCIgY29uc3VtZXIgd2FzIG5vdCBmb3VuZCBpbiB0aGUgXCIke3RoaXMubm9kZS5pZH1cIiBUYWJsZS5gXG4gICAgICApO1xuICAgIH1cblxuICAgIHRoaXMuZnVuY3Rpb25zW2NvbnN1bWVyTmFtZV0uYXR0YWNoUGVybWlzc2lvbnMocGVybWlzc2lvbnMpO1xuICB9XG5cbiAgcHVibGljIGdldEZ1bmN0aW9uKGNvbnN1bWVyTmFtZTogc3RyaW5nKTogRm4gfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmZ1bmN0aW9uc1tjb25zdW1lck5hbWVdO1xuICB9XG5cbiAgcHVibGljIGdldENvbnN0cnVjdEluZm8oKTogSVNzdENvbnN0cnVjdEluZm8ge1xuICAgIC8vIGltcG9ydGVkXG4gICAgaWYgKCFjZGsuVG9rZW4uaXNVbnJlc29sdmVkKHRoaXMuZHluYW1vZGJUYWJsZS50YWJsZU5hbWUpKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0YWJsZU5hbWU6IHRoaXMuZHluYW1vZGJUYWJsZS50YWJsZU5hbWUsXG4gICAgICB9O1xuICAgIH1cbiAgICAvLyBjcmVhdGVkXG4gICAgY29uc3QgY2ZuID0gdGhpcy5keW5hbW9kYlRhYmxlLm5vZGUuZGVmYXVsdENoaWxkIGFzIGR5bmFtb2RiLkNmblRhYmxlO1xuICAgIHJldHVybiB7XG4gICAgICB0YWJsZUxvZ2ljYWxJZDogU3RhY2sub2YodGhpcykuZ2V0TG9naWNhbElkKGNmbiksXG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkQ29uc3VtZXIoXG4gICAgc2NvcGU6IGNkay5Db25zdHJ1Y3QsXG4gICAgY29uc3VtZXJOYW1lOiBzdHJpbmcsXG4gICAgY29uc3VtZXI6IEZ1bmN0aW9uRGVmaW5pdGlvbiB8IFRhYmxlQ29uc3VtZXJQcm9wc1xuICApOiBGbiB7XG4gICAgLy8gdmFsaWRhdGUgc3RyZWFtIGVuYWJsZWRcbiAgICAvLyBub3RlOiBpZiB0YWJsZSBpcyBpbXBvcnRlZCwgZG8gbm90IGNoZWNrIGJlY2F1c2Ugd2Ugd2FudCB0byBhbGxvdyBwcGwgdG9cbiAgICAvLyAgICAgICBpbXBvcnQgd2l0aG91dCBzcGVjaWZ5aW5nIHRoZSBcInRhYmxlU3RyZWFtQXJuXCIuIEFuZCBsZXQgdGhlbSBhZGRcbiAgICAvLyAgICAgICBjb25zdW1lcnMgdG8gaXQuXG4gICAgaWYgKCF0aGlzLmR5bmFtb2RiVGFibGUudGFibGVTdHJlYW1Bcm4pIHtcbiAgICAgIGNvbnN0IGVycm9yTXNncyA9IFtcbiAgICAgICAgYFBsZWFzZSBlbmFibGUgdGhlIFwic3RyZWFtXCIgb3B0aW9uIHRvIGFkZCBjb25zdW1lcnMgdG8gdGhlIFwiJHt0aGlzLm5vZGUuaWR9XCIgVGFibGUuYCxcbiAgICAgIF07XG4gICAgICBpZiAodGhpcy5keW5hbW9kYlRhYmxlVHlwZSA9PT0gXCJJTVBPUlRFRFwiKSB7XG4gICAgICAgIGVycm9yTXNncy5wdXNoKFxuICAgICAgICAgIGBUbyBpbXBvcnQgYSB0YWJsZSB3aXRoIHN0cmVhbSBlbmFibGVkLCB1c2UgdGhlIFwiVGFibGUuZnJvbVRhYmxlQXR0cmlidXRlcygpXCIgbWV0aG9kLCBhbmQgc2V0IHRoZSBcInRhYmxlU3RyZWFtQXJuXCIgaW4gdGhlIGF0dHJpYnV0ZXMuYFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNncy5qb2luKFwiIFwiKSk7XG4gICAgfVxuXG4gICAgLy8gcGFyc2UgY29uc3VtZXJcbiAgICBsZXQgY29uc3VtZXJGdW5jdGlvbiwgY29uc3VtZXJQcm9wcztcbiAgICBpZiAoKGNvbnN1bWVyIGFzIFRhYmxlQ29uc3VtZXJQcm9wcykuZnVuY3Rpb24pIHtcbiAgICAgIGNvbnN1bWVyID0gY29uc3VtZXIgYXMgVGFibGVDb25zdW1lclByb3BzO1xuICAgICAgY29uc3VtZXJGdW5jdGlvbiA9IGNvbnN1bWVyLmZ1bmN0aW9uO1xuICAgICAgY29uc3VtZXJQcm9wcyA9IGNvbnN1bWVyLmNvbnN1bWVyUHJvcHM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN1bWVyRnVuY3Rpb24gPSBjb25zdW1lciBhcyBGdW5jdGlvbkRlZmluaXRpb247XG4gICAgfVxuICAgIGNvbnN1bWVyUHJvcHMgPSB7XG4gICAgICBzdGFydGluZ1Bvc2l0aW9uOiBsYW1iZGEuU3RhcnRpbmdQb3NpdGlvbi5MQVRFU1QsXG4gICAgICAuLi4oY29uc3VtZXJQcm9wcyB8fCB7fSksXG4gICAgfTtcblxuICAgIC8vIGNyZWF0ZSBmdW5jdGlvblxuICAgIGNvbnN0IGZuID0gRm4uZnJvbURlZmluaXRpb24oXG4gICAgICBzY29wZSxcbiAgICAgIGNvbnN1bWVyTmFtZSxcbiAgICAgIGNvbnN1bWVyRnVuY3Rpb24sXG4gICAgICB0aGlzLmRlZmF1bHRGdW5jdGlvblByb3BzLFxuICAgICAgYFRoZSBcImRlZmF1bHRGdW5jdGlvblByb3BzXCIgY2Fubm90IGJlIGFwcGxpZWQgaWYgYW4gaW5zdGFuY2Ugb2YgYSBGdW5jdGlvbiBjb25zdHJ1Y3QgaXMgcGFzc2VkIGluLiBNYWtlIHN1cmUgdG8gZGVmaW5lIGFsbCB0aGUgY29uc3VtZXJzIHVzaW5nIEZ1bmN0aW9uUHJvcHMsIHNvIHRoZSBUYWJsZSBjb25zdHJ1Y3QgY2FuIGFwcGx5IHRoZSBcImRlZmF1bHRGdW5jdGlvblByb3BzXCIgdG8gdGhlbS5gXG4gICAgKTtcbiAgICB0aGlzLmZ1bmN0aW9uc1tjb25zdW1lck5hbWVdID0gZm47XG5cbiAgICAvLyBjcmVhdGUgZXZlbnQgc291cmNlXG4gICAgY29uc3QgZXZlbnRTb3VyY2UgPSBuZXcgbGFtYmRhRXZlbnRTb3VyY2VzLkR5bmFtb0V2ZW50U291cmNlKFxuICAgICAgdGhpcy5keW5hbW9kYlRhYmxlLFxuICAgICAgY29uc3VtZXJQcm9wc1xuICAgICk7XG4gICAgZm4uYWRkRXZlbnRTb3VyY2UoZXZlbnRTb3VyY2UpO1xuXG4gICAgLy8gYXR0YWNoIHBlcm1pc3Npb25zXG4gICAgdGhpcy5wZXJtaXNzaW9uc0F0dGFjaGVkRm9yQWxsQ29uc3VtZXJzLmZvckVhY2goKHBlcm1pc3Npb25zKSA9PiB7XG4gICAgICBmbi5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZm47XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkQXR0cmlidXRlKFxuICAgIGZpZWxkczogeyBba2V5OiBzdHJpbmddOiBUYWJsZUZpZWxkVHlwZSB9LFxuICAgIG5hbWU6IHN0cmluZ1xuICApOiBkeW5hbW9kYi5BdHRyaWJ1dGUge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lLFxuICAgICAgdHlwZTogdGhpcy5jb252ZXJ0VGFibGVGaWVsZFR5cGVUb0F0dHJpYnV0ZVR5cGUoZmllbGRzW25hbWVdKSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBidWlsZFN0cmVhbUNvbmZpZyhcbiAgICBzdHJlYW0/OiBib29sZWFuIHwgZHluYW1vZGIuU3RyZWFtVmlld1R5cGVcbiAgKTogZHluYW1vZGIuU3RyZWFtVmlld1R5cGUgfCB1bmRlZmluZWQge1xuICAgIGlmIChzdHJlYW0gPT09IHRydWUpIHtcbiAgICAgIHJldHVybiBkeW5hbW9kYi5TdHJlYW1WaWV3VHlwZS5ORVdfQU5EX09MRF9JTUFHRVM7XG4gICAgfSBlbHNlIGlmIChzdHJlYW0gPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIHJldHVybiBzdHJlYW07XG4gIH1cblxuICBwcml2YXRlIGNvbnZlcnRUYWJsZUZpZWxkVHlwZVRvQXR0cmlidXRlVHlwZShcbiAgICBmaWVsZFR5cGU6IFRhYmxlRmllbGRUeXBlXG4gICk6IGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUge1xuICAgIGlmIChmaWVsZFR5cGUgPT09IFRhYmxlRmllbGRUeXBlLkJJTkFSWSkge1xuICAgICAgcmV0dXJuIGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuQklOQVJZO1xuICAgIH0gZWxzZSBpZiAoZmllbGRUeXBlID09PSBUYWJsZUZpZWxkVHlwZS5OVU1CRVIpIHtcbiAgICAgIHJldHVybiBkeW5hbW9kYi5BdHRyaWJ1dGVUeXBlLk5VTUJFUjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGR5bmFtb2RiLkF0dHJpYnV0ZVR5cGUuU1RSSU5HO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYnVpbGRLaW5lc2lzU3RyZWFtU3BlYyhraW5lc2lzU3RyZWFtPzogS2luZXNpc1N0cmVhbSk6IHZvaWQge1xuICAgIGlmICgha2luZXNpc1N0cmVhbSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNmVGFibGUgPSB0aGlzLmR5bmFtb2RiVGFibGUubm9kZS5kZWZhdWx0Q2hpbGQgYXMgZHluYW1vZGIuQ2ZuVGFibGU7XG4gICAgY2ZUYWJsZS5hZGRQcm9wZXJ0eU92ZXJyaWRlKFxuICAgICAgXCJLaW5lc2lzU3RyZWFtU3BlY2lmaWNhdGlvbi5TdHJlYW1Bcm5cIixcbiAgICAgIGtpbmVzaXNTdHJlYW0uc3RyZWFtQXJuXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgdmFsaWRhdGVGaWVsZHNBbmRJbmRleGVzKGlkOiBzdHJpbmcsIHByb3BzOiBUYWJsZVByb3BzKTogdm9pZCB7XG4gICAgY29uc3QgeyBmaWVsZHMsIHByaW1hcnlJbmRleCB9ID0gcHJvcHM7XG5cbiAgICAvLyBWYWxpZGF0ZSBcImZpZWxkc1wiXG4gICAgaWYgKGZpZWxkcyAmJiBPYmplY3Qua2V5cyhmaWVsZHMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBObyBmaWVsZHMgZGVmaW5lZCBmb3IgdGhlIFwiJHtpZH1cIiBUYWJsZWApO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIFwicHJpbWFyeUluZGV4XCJcbiAgICBpZiAocHJpbWFyeUluZGV4ICYmICFwcmltYXJ5SW5kZXgucGFydGl0aW9uS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBNaXNzaW5nIFwicGFydGl0aW9uS2V5XCIgaW4gcHJpbWFyeSBpbmRleCBmb3IgdGhlIFwiJHtpZH1cIiBUYWJsZWBcbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgXCJmaWVsZHNcIiBhbmQgXCJwcmltYXJ5SW5kZXhcIiBjby1leGlzdHNcbiAgICBpZiAoZmllbGRzKSB7XG4gICAgICBpZiAoIXByaW1hcnlJbmRleCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgXCJwcmltYXJ5SW5kZXhcIiBpbiBcIiR7aWR9XCIgVGFibGVgKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHByaW1hcnlJbmRleCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYENhbm5vdCBjb25maWd1cmUgdGhlIFwicHJpbWFyeUluZGV4XCIgd2l0aG91dCBzZXR0aW5nIHRoZSBcImZpZWxkc1wiIGluIFwiJHtpZH1cIiBUYWJsZWBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrRGVwcmVjYXRlZENvbnN1bWVycyhjb25zdW1lcnM6IHtcbiAgICBbY29uc3VtZXJOYW1lOiBzdHJpbmddOiBGdW5jdGlvbkRlZmluaXRpb24gfCBUYWJsZUNvbnN1bWVyUHJvcHM7XG4gIH0pOiB2b2lkIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjb25zdW1lcnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUaGUgXCJjb25zdW1lcnNcIiBwcm9wZXJ0eSBubyBsb25nZXIgdGFrZXMgYW4gYXJyYXkuIEl0IG5vd3MgdGFrZXMgYW4gYXNzb2NpYXRpdmUgYXJyYXkgd2l0aCB0aGUgY29uc3VtZXIgbmFtZSBiZWluZyB0aGUgaW5kZXgga2V5LiBNb3JlIGRldGFpbHMgb24gdXBncmFkaW5nIC0gaHR0cHM6Ly9kb2NzLnNlcnZlcmxlc3Mtc3RhY2suY29tL2NvbnN0cnVjdHMvVGFibGUjdXBncmFkaW5nLXRvLXYwMjEwYFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGNoZWNrRGVwcmVjYXRlZFNlY29uZGFyeUluZGV4ZXMoKTogdm9pZCB7XG4gICAgbG9nZ2VyLmRlYnVnKFxuICAgICAgYFdBUk5JTkc6IFRoZSBcInNlY29uZGFyeUluZGV4ZXNcIiBwcm9wZXJ0eSBoYXMgYmVlbiByZW5hbWVkIHRvIFwiZ2xvYmFsSW5kZXhlc1wiLiBcInNlY29uZGFyeUluZGV4ZXNcIiB3aWxsIGNvbnRpbnVlIHRvIHdvcmsgYnV0IHdpbGwgYmUgcmVtb3ZlZCBhdCBhIGxhdGVyIGRhdGUuIE1vcmUgZGV0YWlscyBvbiB0aGUgZGVwcmVjYXRpb24gLSBodHRwczovL2RvY3Muc2VydmVybGVzcy1zdGFjay5jb20vY29uc3RydWN0cy9UYWJsZSNzZWNvbmRhcnlpbmRleGVzLWRlcHJlY2F0ZWRgXG4gICAgKTtcbiAgfVxufVxuIl19