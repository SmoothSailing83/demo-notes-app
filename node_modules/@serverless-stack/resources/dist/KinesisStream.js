"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KinesisStream = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const kinesis = __importStar(require("@aws-cdk/aws-kinesis"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const lambdaEventSources = __importStar(require("@aws-cdk/aws-lambda-event-sources"));
const Stack_1 = require("./Stack");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
class KinesisStream extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { kinesisStream, consumers, defaultFunctionProps } = props || {};
        this.functions = {};
        this.permissionsAttachedForAllConsumers = [];
        this.defaultFunctionProps = defaultFunctionProps;
        ////////////////////
        // Create Stream
        ////////////////////
        if (cdk.Construct.isConstruct(kinesisStream)) {
            this.kinesisStream = kinesisStream;
        }
        else {
            const kinesisStreamProps = (kinesisStream || {});
            this.kinesisStream = new kinesis.Stream(this, "Stream", Object.assign({ streamName: root.logicalPrefixedName(id) }, kinesisStreamProps));
        }
        ///////////////////////////
        // Create Consumers
        ///////////////////////////
        if (consumers) {
            Object.keys(consumers).forEach((consumerName) => this.addConsumer(this, consumerName, consumers[consumerName]));
        }
        ///////////////////
        // Register Construct
        ///////////////////
        root.registerConstruct(this);
    }
    get streamArn() {
        return this.kinesisStream.streamArn;
    }
    get streamName() {
        return this.kinesisStream.streamName;
    }
    addConsumers(scope, consumers) {
        Object.keys(consumers).forEach((consumerName) => {
            this.addConsumer(scope, consumerName, consumers[consumerName]);
        });
    }
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
    attachPermissionsToConsumer(consumerName, permissions) {
        if (!this.functions[consumerName]) {
            throw new Error(`The "${consumerName}" consumer was not found in the "${this.node.id}" KinesisStream.`);
        }
        this.functions[consumerName].attachPermissions(permissions);
    }
    getFunction(consumerName) {
        return this.functions[consumerName];
    }
    getConstructInfo() {
        // imported
        if (!cdk.Token.isUnresolved(this.kinesisStream.streamName)) {
            return {
                streamName: this.kinesisStream.streamName,
            };
        }
        // created
        const cfn = this.kinesisStream.node.defaultChild;
        return {
            streamLogicalId: Stack_1.Stack.of(this).getLogicalId(cfn),
        };
    }
    addConsumer(scope, consumerName, consumer) {
        // normalize consumer
        let consumerFunction, consumerProps;
        if (consumer.function) {
            consumer = consumer;
            consumerFunction = consumer.function;
            consumerProps = consumer.consumerProps;
        }
        else {
            consumerFunction = consumer;
        }
        consumerProps = Object.assign({ startingPosition: lambda.StartingPosition.LATEST }, (consumerProps || {}));
        // create function
        const fn = Function_1.Function.fromDefinition(scope, consumerName, consumerFunction, this.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the consumers using FunctionProps, so the KinesisStream construct can apply the "defaultFunctionProps" to them.`);
        this.functions[consumerName] = fn;
        // create event source
        const eventSource = new lambdaEventSources.KinesisEventSource(this.kinesisStream, consumerProps);
        fn.addEventSource(eventSource);
        // attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            fn.attachPermissions(permissions);
        });
        return fn;
    }
}
exports.KinesisStream = KinesisStream;
//# sourceMappingURL=data:application/json;base64,