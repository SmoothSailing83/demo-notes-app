"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const cfnResponse = __importStar(require("./cfn-response"));
const outbound_1 = require("./outbound");
const util_1 = require("./util");
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)("onEventHandler", cfnRequest);
        // Invoke user function on Create and on Update
        const fnCreate = cfnRequest.ResourceProperties.UserCreateFunction;
        const fnUpdate = cfnRequest.ResourceProperties.UserUpdateFunction;
        const fnDelete = cfnRequest.ResourceProperties.UserDeleteFunction;
        const fnParams = JSON.parse(cfnRequest.ResourceProperties.UserParams);
        if (cfnRequest.RequestType === "Create" && fnCreate) {
            yield invokeUserFunction(fnCreate, { params: fnParams });
        }
        else if (cfnRequest.RequestType === "Update" && fnUpdate) {
            yield invokeUserFunction(fnUpdate, { params: fnParams });
        }
        else if (cfnRequest.RequestType === "Delete" && fnDelete) {
            yield invokeUserFunction(fnDelete, { params: fnParams });
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId: defaultPhysicalResourceId(cfnRequest) }));
    });
}
function invokeUserFunction(functionName, payload) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`executing user function ${functionName} with payload`, payload);
        const resp = yield (0, outbound_1.invokeFunction)({
            FunctionName: functionName,
            Payload: JSON.stringify(payload),
        });
        (0, util_1.log)("user function response:", resp, typeof resp);
        if (resp.FunctionError) {
            (0, util_1.log)("user function threw an error:", resp.FunctionError);
            const jsonPayload = parseJsonPayload(resp.Payload);
            const errorMessage = jsonPayload.errorMessage || "error";
            // append a reference to the log group.
            const message = [
                errorMessage,
                "",
                `Logs: /aws/lambda/${functionName}`,
                "",
            ].join("\n");
            const e = new Error(message);
            // the output that goes to CFN is what's in `stack`, not the error message.
            // if we have a remote trace, construct a nice message with log group information
            if (jsonPayload.trace) {
                // skip first trace line because it's the message
                e.stack = [message, ...jsonPayload.trace.slice(1)].join("\n");
            }
            throw e;
        }
    });
}
function parseJsonPayload(payload) {
    if (!payload) {
        return {};
    }
    const text = payload.toString();
    try {
        return JSON.parse(text);
    }
    catch (e) {
        throw new Error(`return values from user-handlers must be JSON objects. got: "${text}"`);
    }
}
function defaultPhysicalResourceId(req) {
    switch (req.RequestType) {
        case "Create":
            return req.RequestId;
        case "Update":
        case "Delete":
            return req.PhysicalResourceId;
        default:
            throw new Error(`Invalid "RequestType" in request "${JSON.stringify(req)}"`);
    }
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvU2NyaXB0L2luZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNERBQThDO0FBQzlDLHlDQUE0QztBQUM1QyxpQ0FBNkI7QUFNN0IsU0FBZSxPQUFPLENBQ3BCLFVBQXVEOztRQUV2RCxJQUFBLFVBQUcsRUFBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVsQywrQ0FBK0M7UUFDL0MsTUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDO1FBQ2xFLE1BQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQztRQUNsRSxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsa0JBQWtCLENBQUMsa0JBQWtCLENBQUM7UUFDbEUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEUsSUFBSSxVQUFVLENBQUMsV0FBVyxLQUFLLFFBQVEsSUFBSSxRQUFRLEVBQUU7WUFDbkQsTUFBTSxrQkFBa0IsQ0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztTQUMxRDthQUFNLElBQUksVUFBVSxDQUFDLFdBQVcsS0FBSyxRQUFRLElBQUksUUFBUSxFQUFFO1lBQzFELE1BQU0sa0JBQWtCLENBQUMsUUFBUSxFQUFFLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7U0FDMUQ7YUFBTSxJQUFJLFVBQVUsQ0FBQyxXQUFXLEtBQUssUUFBUSxJQUFJLFFBQVEsRUFBRTtZQUMxRCxNQUFNLGtCQUFrQixDQUFDLFFBQVEsRUFBRSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1NBQzFEO1FBRUQsaUJBQWlCO1FBQ2pCLE9BQU8sV0FBVyxDQUFDLGNBQWMsQ0FBQyxTQUFTLGtDQUN0QyxVQUFVLEtBQ2Isa0JBQWtCLEVBQUUseUJBQXlCLENBQUMsVUFBVSxDQUFDLElBQ3pELENBQUM7SUFDTCxDQUFDO0NBQUE7QUFFRCxTQUFlLGtCQUFrQixDQUFDLFlBQW9CLEVBQUUsT0FBWTs7UUFDbEUsSUFBQSxVQUFHLEVBQUMsMkJBQTJCLFlBQVksZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRXJFLE1BQU0sSUFBSSxHQUFHLE1BQU0sSUFBQSx5QkFBYyxFQUFDO1lBQ2hDLFlBQVksRUFBRSxZQUFZO1lBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQztTQUNqQyxDQUFDLENBQUM7UUFFSCxJQUFBLFVBQUcsRUFBQyx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUVsRCxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDdEIsSUFBQSxVQUFHLEVBQUMsK0JBQStCLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXpELE1BQU0sV0FBVyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNuRCxNQUFNLFlBQVksR0FBRyxXQUFXLENBQUMsWUFBWSxJQUFJLE9BQU8sQ0FBQztZQUV6RCx1Q0FBdUM7WUFDdkMsTUFBTSxPQUFPLEdBQUc7Z0JBQ2QsWUFBWTtnQkFDWixFQUFFO2dCQUNGLHFCQUFxQixZQUFZLEVBQUU7Z0JBQ25DLEVBQUU7YUFDSCxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUViLE1BQU0sQ0FBQyxHQUFHLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBRTdCLDJFQUEyRTtZQUMzRSxpRkFBaUY7WUFDakYsSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFO2dCQUNyQixpREFBaUQ7Z0JBQ2pELENBQUMsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLEVBQUUsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUMvRDtZQUVELE1BQU0sQ0FBQyxDQUFDO1NBQ1Q7SUFDSCxDQUFDO0NBQUE7QUFFRCxTQUFTLGdCQUFnQixDQUFDLE9BQVk7SUFDcEMsSUFBSSxDQUFDLE9BQU8sRUFBRTtRQUNaLE9BQU8sRUFBRSxDQUFDO0tBQ1g7SUFDRCxNQUFNLElBQUksR0FBRyxPQUFPLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEMsSUFBSTtRQUNGLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsTUFBTSxJQUFJLEtBQUssQ0FDYixnRUFBZ0UsSUFBSSxHQUFHLENBQ3hFLENBQUM7S0FDSDtBQUNILENBQUM7QUFFRCxTQUFTLHlCQUF5QixDQUNoQyxHQUFnRDtJQUVoRCxRQUFRLEdBQUcsQ0FBQyxXQUFXLEVBQUU7UUFDdkIsS0FBSyxRQUFRO1lBQ1gsT0FBTyxHQUFHLENBQUMsU0FBUyxDQUFDO1FBRXZCLEtBQUssUUFBUSxDQUFDO1FBQ2QsS0FBSyxRQUFRO1lBQ1gsT0FBTyxHQUFHLENBQUMsa0JBQWtCLENBQUM7UUFFaEM7WUFDRSxNQUFNLElBQUksS0FBSyxDQUNiLHFDQUFxQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQzVELENBQUM7S0FDTDtBQUNILENBQUM7QUFoR0QsaUJBQVM7SUFDUCxPQUFPLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7Q0FDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNmblJlc3BvbnNlIGZyb20gXCIuL2Nmbi1yZXNwb25zZVwiO1xuaW1wb3J0IHsgaW52b2tlRnVuY3Rpb24gfSBmcm9tIFwiLi9vdXRib3VuZFwiO1xuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vdXRpbFwiO1xuXG5leHBvcnQgPSB7XG4gIGhhbmRsZXI6IGNmblJlc3BvbnNlLnNhZmVIYW5kbGVyKGhhbmRsZXIpLFxufTtcblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgY2ZuUmVxdWVzdDogQVdTTGFtYmRhLkNsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudFxuKSB7XG4gIGxvZyhcIm9uRXZlbnRIYW5kbGVyXCIsIGNmblJlcXVlc3QpO1xuXG4gIC8vIEludm9rZSB1c2VyIGZ1bmN0aW9uIG9uIENyZWF0ZSBhbmQgb24gVXBkYXRlXG4gIGNvbnN0IGZuQ3JlYXRlID0gY2ZuUmVxdWVzdC5SZXNvdXJjZVByb3BlcnRpZXMuVXNlckNyZWF0ZUZ1bmN0aW9uO1xuICBjb25zdCBmblVwZGF0ZSA9IGNmblJlcXVlc3QuUmVzb3VyY2VQcm9wZXJ0aWVzLlVzZXJVcGRhdGVGdW5jdGlvbjtcbiAgY29uc3QgZm5EZWxldGUgPSBjZm5SZXF1ZXN0LlJlc291cmNlUHJvcGVydGllcy5Vc2VyRGVsZXRlRnVuY3Rpb247XG4gIGNvbnN0IGZuUGFyYW1zID0gSlNPTi5wYXJzZShjZm5SZXF1ZXN0LlJlc291cmNlUHJvcGVydGllcy5Vc2VyUGFyYW1zKTtcbiAgaWYgKGNmblJlcXVlc3QuUmVxdWVzdFR5cGUgPT09IFwiQ3JlYXRlXCIgJiYgZm5DcmVhdGUpIHtcbiAgICBhd2FpdCBpbnZva2VVc2VyRnVuY3Rpb24oZm5DcmVhdGUsIHsgcGFyYW1zOiBmblBhcmFtcyB9KTtcbiAgfSBlbHNlIGlmIChjZm5SZXF1ZXN0LlJlcXVlc3RUeXBlID09PSBcIlVwZGF0ZVwiICYmIGZuVXBkYXRlKSB7XG4gICAgYXdhaXQgaW52b2tlVXNlckZ1bmN0aW9uKGZuVXBkYXRlLCB7IHBhcmFtczogZm5QYXJhbXMgfSk7XG4gIH0gZWxzZSBpZiAoY2ZuUmVxdWVzdC5SZXF1ZXN0VHlwZSA9PT0gXCJEZWxldGVcIiAmJiBmbkRlbGV0ZSkge1xuICAgIGF3YWl0IGludm9rZVVzZXJGdW5jdGlvbihmbkRlbGV0ZSwgeyBwYXJhbXM6IGZuUGFyYW1zIH0pO1xuICB9XG5cbiAgLy8gQnVpbGQgcmVzcG9uc2VcbiAgcmV0dXJuIGNmblJlc3BvbnNlLnN1Ym1pdFJlc3BvbnNlKFwiU1VDQ0VTU1wiLCB7XG4gICAgLi4uY2ZuUmVxdWVzdCxcbiAgICBQaHlzaWNhbFJlc291cmNlSWQ6IGRlZmF1bHRQaHlzaWNhbFJlc291cmNlSWQoY2ZuUmVxdWVzdCksXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBpbnZva2VVc2VyRnVuY3Rpb24oZnVuY3Rpb25OYW1lOiBzdHJpbmcsIHBheWxvYWQ6IGFueSkge1xuICBsb2coYGV4ZWN1dGluZyB1c2VyIGZ1bmN0aW9uICR7ZnVuY3Rpb25OYW1lfSB3aXRoIHBheWxvYWRgLCBwYXlsb2FkKTtcblxuICBjb25zdCByZXNwID0gYXdhaXQgaW52b2tlRnVuY3Rpb24oe1xuICAgIEZ1bmN0aW9uTmFtZTogZnVuY3Rpb25OYW1lLFxuICAgIFBheWxvYWQ6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxuICB9KTtcblxuICBsb2coXCJ1c2VyIGZ1bmN0aW9uIHJlc3BvbnNlOlwiLCByZXNwLCB0eXBlb2YgcmVzcCk7XG5cbiAgaWYgKHJlc3AuRnVuY3Rpb25FcnJvcikge1xuICAgIGxvZyhcInVzZXIgZnVuY3Rpb24gdGhyZXcgYW4gZXJyb3I6XCIsIHJlc3AuRnVuY3Rpb25FcnJvcik7XG5cbiAgICBjb25zdCBqc29uUGF5bG9hZCA9IHBhcnNlSnNvblBheWxvYWQocmVzcC5QYXlsb2FkKTtcbiAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBqc29uUGF5bG9hZC5lcnJvck1lc3NhZ2UgfHwgXCJlcnJvclwiO1xuXG4gICAgLy8gYXBwZW5kIGEgcmVmZXJlbmNlIHRvIHRoZSBsb2cgZ3JvdXAuXG4gICAgY29uc3QgbWVzc2FnZSA9IFtcbiAgICAgIGVycm9yTWVzc2FnZSxcbiAgICAgIFwiXCIsXG4gICAgICBgTG9nczogL2F3cy9sYW1iZGEvJHtmdW5jdGlvbk5hbWV9YCwgLy8gY2xvdWR3YXRjaCBsb2cgZ3JvdXBcbiAgICAgIFwiXCIsXG4gICAgXS5qb2luKFwiXFxuXCIpO1xuXG4gICAgY29uc3QgZSA9IG5ldyBFcnJvcihtZXNzYWdlKTtcblxuICAgIC8vIHRoZSBvdXRwdXQgdGhhdCBnb2VzIHRvIENGTiBpcyB3aGF0J3MgaW4gYHN0YWNrYCwgbm90IHRoZSBlcnJvciBtZXNzYWdlLlxuICAgIC8vIGlmIHdlIGhhdmUgYSByZW1vdGUgdHJhY2UsIGNvbnN0cnVjdCBhIG5pY2UgbWVzc2FnZSB3aXRoIGxvZyBncm91cCBpbmZvcm1hdGlvblxuICAgIGlmIChqc29uUGF5bG9hZC50cmFjZSkge1xuICAgICAgLy8gc2tpcCBmaXJzdCB0cmFjZSBsaW5lIGJlY2F1c2UgaXQncyB0aGUgbWVzc2FnZVxuICAgICAgZS5zdGFjayA9IFttZXNzYWdlLCAuLi5qc29uUGF5bG9hZC50cmFjZS5zbGljZSgxKV0uam9pbihcIlxcblwiKTtcbiAgICB9XG5cbiAgICB0aHJvdyBlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlSnNvblBheWxvYWQocGF5bG9hZDogYW55KTogYW55IHtcbiAgaWYgKCFwYXlsb2FkKSB7XG4gICAgcmV0dXJuIHt9O1xuICB9XG4gIGNvbnN0IHRleHQgPSBwYXlsb2FkLnRvU3RyaW5nKCk7XG4gIHRyeSB7XG4gICAgcmV0dXJuIEpTT04ucGFyc2UodGV4dCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgcmV0dXJuIHZhbHVlcyBmcm9tIHVzZXItaGFuZGxlcnMgbXVzdCBiZSBKU09OIG9iamVjdHMuIGdvdDogXCIke3RleHR9XCJgXG4gICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UGh5c2ljYWxSZXNvdXJjZUlkKFxuICByZXE6IEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnRcbik6IHN0cmluZyB7XG4gIHN3aXRjaCAocmVxLlJlcXVlc3RUeXBlKSB7XG4gICAgY2FzZSBcIkNyZWF0ZVwiOlxuICAgICAgcmV0dXJuIHJlcS5SZXF1ZXN0SWQ7XG5cbiAgICBjYXNlIFwiVXBkYXRlXCI6XG4gICAgY2FzZSBcIkRlbGV0ZVwiOlxuICAgICAgcmV0dXJuIHJlcS5QaHlzaWNhbFJlc291cmNlSWQ7XG5cbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgSW52YWxpZCBcIlJlcXVlc3RUeXBlXCIgaW4gcmVxdWVzdCBcIiR7SlNPTi5zdHJpbmdpZnkocmVxKX1cImBcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==