"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cron = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const events = __importStar(require("@aws-cdk/aws-events"));
const eventsTargets = __importStar(require("@aws-cdk/aws-events-targets"));
const Stack_1 = require("./Stack");
const Function_1 = require("./Function");
class Cron extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const root = scope.node.root;
        const { 
        // Topic props
        schedule, eventsRule, 
        // Function props
        job, } = props;
        ///////////////////////////
        // Create Rule
        ///////////////////////////
        const eventsRuleProps = (eventsRule || {});
        // Validate: cannot set eventsRule.schedule
        if (eventsRuleProps.schedule) {
            throw new Error(`Do not configure the "eventsRule.schedule". Use the "schedule" to configure the Cron schedule.`);
        }
        // Validate: schedule is set
        if (!schedule) {
            throw new Error(`No schedule defined for the "${id}" Cron`);
        }
        // Configure Schedule
        let propSchedule;
        if (typeof schedule === "string" &&
            (schedule.startsWith("rate(") || schedule.startsWith("cron("))) {
            propSchedule = events.Schedule.expression(schedule);
        }
        else if (schedule instanceof cdk.Duration) {
            propSchedule = events.Schedule.rate(schedule);
        }
        else {
            propSchedule = events.Schedule.cron(schedule);
        }
        this.eventsRule = new events.Rule(this, "Rule", Object.assign({ schedule: propSchedule }, eventsRuleProps));
        ///////////////////////////
        // Create Targets
        ///////////////////////////
        if (!job) {
            throw new Error(`No job defined for the "${id}" Cron`);
        }
        // normalize job
        let jobFunction, jobProps;
        if (job.function) {
            jobFunction = job.function;
            jobProps = job.jobProps;
        }
        else {
            jobFunction = job;
            jobProps = {};
        }
        // create function
        this.jobFunction = Function_1.Function.fromDefinition(this, "Job", jobFunction);
        this.eventsRule.addTarget(new eventsTargets.LambdaFunction(this.jobFunction, jobProps));
        ///////////////////
        // Register Construct
        ///////////////////
        root.registerConstruct(this);
    }
    attachPermissions(permissions) {
        this.jobFunction.attachPermissions(permissions);
    }
    getConstructInfo() {
        const cfnFunction = this.jobFunction.node.defaultChild;
        const cfnRule = this.eventsRule.node.defaultChild;
        return {
            functionLogicalId: Stack_1.Stack.of(this.jobFunction).getLogicalId(cfnFunction),
            functionStack: Stack_1.Stack.of(this.jobFunction).node.id,
            ruleLogicalId: Stack_1.Stack.of(this).getLogicalId(cfnRule),
            schedule: cfnRule.scheduleExpression,
        };
    }
}
exports.Cron = Cron;
//# sourceMappingURL=data:application/json;base64,