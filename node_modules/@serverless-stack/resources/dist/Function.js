"use strict";
/* eslint-disable @typescript-eslint/ban-types*/
// Note: disabling ban-type rule so we don't get an error referencing the class Function
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = void 0;
const path_1 = __importDefault(require("path"));
const fs = __importStar(require("fs-extra"));
const cdk = __importStar(require("@aws-cdk/core"));
const iam = __importStar(require("@aws-cdk/aws-iam"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const ssm = __importStar(require("@aws-cdk/aws-ssm"));
const Stack_1 = require("./Stack");
const goBuilder_1 = require("./util/goBuilder");
const nodeBuilder_1 = require("./util/nodeBuilder");
const dotnetBuilder_1 = require("./util/dotnetBuilder");
const pythonBuilder_1 = require("./util/pythonBuilder");
const permission_1 = require("./util/permission");
const supportedRuntimes = [
    lambda.Runtime.NODEJS,
    lambda.Runtime.NODEJS_4_3,
    lambda.Runtime.NODEJS_6_10,
    lambda.Runtime.NODEJS_8_10,
    lambda.Runtime.NODEJS_10_X,
    lambda.Runtime.NODEJS_12_X,
    lambda.Runtime.NODEJS_14_X,
    lambda.Runtime.PYTHON_2_7,
    lambda.Runtime.PYTHON_3_6,
    lambda.Runtime.PYTHON_3_7,
    lambda.Runtime.PYTHON_3_8,
    lambda.Runtime.DOTNET_CORE_1,
    lambda.Runtime.DOTNET_CORE_2,
    lambda.Runtime.DOTNET_CORE_2_1,
    lambda.Runtime.DOTNET_CORE_3_1,
    lambda.Runtime.GO_1_X,
];
class Function extends lambda.Function {
    constructor(scope, id, props) {
        const root = scope.node.root;
        const stack = Stack_1.Stack.of(scope);
        // Merge with app defaultFunctionProps
        // note: reverse order so later prop override earlier ones
        stack.defaultFunctionProps
            .slice()
            .reverse()
            .forEach((per) => {
            props = Function.mergeProps(per, props);
        });
        // Set defaults
        const handler = props.handler;
        let timeout = props.timeout || 10;
        const srcPath = Function.normalizeSrcPath(props.srcPath || ".");
        const memorySize = props.memorySize || 1024;
        const tracing = props.tracing || lambda.Tracing.ACTIVE;
        let runtime = props.runtime || lambda.Runtime.NODEJS_12_X;
        let bundle = props.bundle;
        const permissions = props.permissions;
        const isLiveDevEnabled = props.enableLiveDev === false ? false : true;
        // Validate handler
        if (!handler) {
            throw new Error(`No handler defined for the "${id}" Lambda function`);
        }
        // Normalize runtime
        const runtimeStr = typeof runtime === "string" ? runtime : runtime.toString();
        const runtimeClass = supportedRuntimes.find((per) => per.toString() === runtimeStr);
        if (!runtimeClass) {
            throw new Error(`The specified runtime is not supported for sst.Function. Only NodeJS, Python, Go, and .NET runtimes are currently supported.`);
        }
        runtime = runtimeClass;
        // Normalize timeout
        if (typeof timeout === "number") {
            timeout = cdk.Duration.seconds(timeout);
        }
        // Validate input
        const isNodeRuntime = runtimeStr.startsWith("nodejs");
        const isGoRuntime = runtimeStr.startsWith("go");
        const isPythonRuntime = runtimeStr.startsWith("python");
        const isDotnetRuntime = runtimeStr.startsWith("dotnetcore");
        if (isNodeRuntime) {
            bundle = bundle === undefined ? true : props.bundle;
            if (!bundle && srcPath === ".") {
                throw new Error(`Bundle cannot be disabled for the "${id}" function since the "srcPath" is set to the project root. Read more here â€” https://github.com/serverless-stack/serverless-stack/issues/78`);
            }
        }
        else if (isPythonRuntime) {
            bundle = bundle === undefined ? {} : props.bundle;
            if (srcPath === ".") {
                throw new Error(`Cannot set the "srcPath" to the project root for the "${id}" function.`);
            }
        }
        // Handle local development (ie. sst start)
        // - set runtime to nodejs12.x for non-Node runtimes (b/c the stub is in Node)
        // - set retry to 0. When the debugger is disconnected, the Cron construct
        //   will still try to periodically invoke the Lambda, and the requests would
        //   fail and retry. So when launching `sst start`, a couple of retry requests
        //   from recent failed request will be received. And this behavior is confusing.
        if (isLiveDevEnabled &&
            root.local &&
            root.debugEndpoint &&
            root.debugBucketName &&
            root.debugBucketArn) {
            // If debugIncreaseTimeout is enabled:
            //   set timeout to 900. This will give people more time to debug the function
            //   without timing out the request. Note API Gateway requests have a maximum
            //   timeout of 29s. In this case, the API will timeout, but the Lambda function
            //   will continue to run.
            let debugOverrideProps;
            if (root.debugIncreaseTimeout) {
                debugOverrideProps = {
                    timeout: cdk.Duration.seconds(900),
                };
            }
            if (root.debugBridge) {
                super(scope, id, Object.assign(Object.assign(Object.assign({}, props), { runtime: lambda.Runtime.GO_1_X, tracing,
                    timeout,
                    memorySize, handler: "handler", code: lambda.Code.fromAsset(path_1.default.resolve(__dirname, "../dist/bridge_client/")), environment: Object.assign(Object.assign({}, (props.environment || {})), { SST_DEBUG_BRIDGE: root.debugBridge, SST_DEBUG_SRC_PATH: srcPath, SST_DEBUG_SRC_HANDLER: handler, SST_DEBUG_ENDPOINT: root.debugEndpoint }), layers: Function.handleImportedLayers(scope, props.layers || []) }), (debugOverrideProps || {})));
            }
            else {
                super(scope, id, Object.assign(Object.assign(Object.assign({}, props), { runtime: isNodeRuntime ? runtime : lambda.Runtime.NODEJS_12_X, tracing,
                    timeout,
                    memorySize, handler: "index.main", retryAttempts: 0, code: lambda.Code.fromAsset(path_1.default.resolve(__dirname, "../dist/stub.zip")), environment: Object.assign(Object.assign({}, (props.environment || {})), { SST_DEBUG_SRC_PATH: srcPath, SST_DEBUG_SRC_HANDLER: handler, SST_DEBUG_ENDPOINT: root.debugEndpoint, SST_DEBUG_BUCKET_NAME: root.debugBucketName }), layers: Function.handleImportedLayers(scope, props.layers || []) }), (debugOverrideProps || {})));
            }
            this.attachPermissions([
                new iam.PolicyStatement({
                    actions: ["s3:*"],
                    effect: iam.Effect.ALLOW,
                    resources: [root.debugBucketArn, `${root.debugBucketArn}/*`],
                }),
            ]);
        }
        // Handle remove (ie. sst remove)
        else if (root.skipBuild) {
            // Note: need to override runtime as CDK does not support inline code
            //       for some runtimes.
            super(scope, id, Object.assign(Object.assign({}, props), { runtime: lambda.Runtime.NODEJS_12_X, handler: "placeholder", code: lambda.Code.fromAsset(path_1.default.resolve(__dirname, "../assets/Function/placeholder-stub")), timeout, layers: Function.handleImportedLayers(scope, props.layers || []) }));
        }
        // Handle build
        else {
            let outCode, outHandler;
            if (isDotnetRuntime) {
                const ret = (0, dotnetBuilder_1.builder)({
                    srcPath,
                    handler,
                    buildDir: root.buildDir,
                    stack: Stack_1.Stack.of(scope).stackName,
                });
                outCode = ret.outCode;
                outHandler = ret.outHandler;
            }
            else if (isGoRuntime) {
                const ret = (0, goBuilder_1.builder)({
                    srcPath,
                    handler,
                    buildDir: root.buildDir,
                });
                outCode = ret.outCode;
                outHandler = ret.outHandler;
            }
            else if (isPythonRuntime) {
                const ret = (0, pythonBuilder_1.builder)({
                    bundle: bundle,
                    srcPath,
                    handler,
                    runtime,
                    stack: Stack_1.Stack.of(scope).stackName,
                });
                outCode = ret.outCode;
                outHandler = ret.outHandler;
            }
            else {
                const ret = (0, nodeBuilder_1.builder)({
                    bundle: bundle,
                    srcPath,
                    handler,
                    runtime,
                    buildDir: root.buildDir,
                    esbuildConfig: root.esbuildConfig,
                });
                outCode = ret.outCode;
                outHandler = ret.outHandler;
            }
            Function.copyFiles(bundle, srcPath, outCode.path);
            super(scope, id, Object.assign(Object.assign({}, props), { runtime,
                tracing,
                memorySize, handler: outHandler, code: outCode, timeout, layers: Function.handleImportedLayers(scope, props.layers || []) }));
        }
        // Enable reusing connections with Keep-Alive for NodeJs Lambda function
        if (isNodeRuntime) {
            this.addEnvironment("AWS_NODEJS_CONNECTION_REUSE_ENABLED", "1", {
                removeInEdge: true,
            });
        }
        // Attach permissions
        if (permissions) {
            this.attachPermissions(permissions);
        }
        // register Lambda function in app
        root.registerLambdaHandler({
            srcPath,
            handler,
            bundle,
            runtime: runtimeStr,
        });
        this._isLiveDevEnabled = isLiveDevEnabled;
    }
    attachPermissions(permissions) {
        if (this.role) {
            (0, permission_1.attachPermissionsToRole)(this.role, permissions);
        }
    }
    static normalizeSrcPath(srcPath) {
        return srcPath.replace(/\/+$/, "");
    }
    static copyFiles(bundle, srcPath, buildPath) {
        if (!bundle)
            return;
        if (typeof bundle === "boolean")
            return;
        if (!bundle.copyFiles)
            return;
        bundle.copyFiles.forEach((entry) => {
            const fromPath = path_1.default.join(srcPath, entry.from);
            if (!fs.existsSync(fromPath))
                throw new Error(`Tried to copy nonexistent file from "${path_1.default.resolve(fromPath)}" - check copyFiles entry "${entry.from}"`);
            const to = entry.to || entry.from;
            if (path_1.default.isAbsolute(to))
                throw new Error(`Copy destination path "${to}" must be relative`);
            const toPath = path_1.default.join(buildPath, to);
            fs.copySync(fromPath, toPath);
        });
    }
    static handleImportedLayers(scope, layers) {
        return layers.map((layer) => {
            const layerStack = Stack_1.Stack.of(layer);
            const currentStack = Stack_1.Stack.of(scope);
            // Use layer directly if:
            // - layer is created in the current stack; OR
            // - layer is imported (ie. layerArn is a string)
            if (layerStack === currentStack ||
                !cdk.Token.isUnresolved(layer.layerVersionArn)) {
                return layer;
            }
            // layer is created from another stack
            else {
                // set stack dependency b/c layerStack need to create the SSM first
                currentStack.addDependency(layerStack);
                // store layer ARN in SSM in layer's stack
                const parameterId = `${layer.node.id}Arn-${layer.node.addr}`;
                const parameterName = `/layers/${layerStack.node.id}/${parameterId}`;
                const existingSsmParam = layerStack.node.tryFindChild(parameterId);
                if (!existingSsmParam) {
                    new ssm.StringParameter(layerStack, parameterId, {
                        parameterName,
                        stringValue: layer.layerVersionArn,
                    });
                }
                // import layer from SSM value
                const layerId = `I${layer.node.id}-${layer.node.addr}`;
                const existingLayer = scope.node.tryFindChild(layerId);
                if (existingLayer) {
                    return existingLayer;
                }
                else {
                    return lambda.LayerVersion.fromLayerVersionArn(scope, layerId, ssm.StringParameter.valueForStringParameter(scope, parameterName));
                }
            }
        });
    }
    static fromDefinition(scope, id, definition, inheritedProps, inheritErrorMessage) {
        if (typeof definition === "string") {
            return new Function(scope, id, Object.assign(Object.assign({}, (inheritedProps || {})), { handler: definition }));
        }
        else if (definition instanceof Function) {
            if (inheritedProps && Object.keys(inheritedProps).length > 0) {
                throw new Error(inheritErrorMessage ||
                    `Cannot inherit default props when a Function is provided`);
            }
            return definition;
        }
        else if (definition instanceof lambda.Function) {
            throw new Error(`Please use sst.Function instead of lambda.Function for the "${id}" Function.`);
        }
        else if (definition.handler !== undefined) {
            return new Function(scope, id, Function.mergeProps(inheritedProps, definition));
        }
        throw new Error(`Invalid function definition for the "${id}" Function`);
    }
    static mergeProps(baseProps, props) {
        // Merge environment
        const environment = Object.assign(Object.assign({}, ((baseProps === null || baseProps === void 0 ? void 0 : baseProps.environment) || {})), ((props === null || props === void 0 ? void 0 : props.environment) || {}));
        const environmentProp = Object.keys(environment).length === 0 ? {} : { environment };
        // Merge layers
        const layers = [...((baseProps === null || baseProps === void 0 ? void 0 : baseProps.layers) || []), ...((props === null || props === void 0 ? void 0 : props.layers) || [])];
        const layersProp = layers.length === 0 ? {} : { layers };
        // Merge permissions
        let permissionsProp;
        if ((baseProps === null || baseProps === void 0 ? void 0 : baseProps.permissions) === permission_1.PermissionType.ALL ||
            (props === null || props === void 0 ? void 0 : props.permissions) === permission_1.PermissionType.ALL) {
            permissionsProp = { permissions: permission_1.PermissionType.ALL };
        }
        else {
            const permissions = ((baseProps === null || baseProps === void 0 ? void 0 : baseProps.permissions) || []).concat((props === null || props === void 0 ? void 0 : props.permissions) || []);
            permissionsProp = permissions.length === 0 ? {} : { permissions };
        }
        return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (baseProps || {})), (props || {})), layersProp), environmentProp), permissionsProp);
    }
}
exports.Function = Function;
//# sourceMappingURL=data:application/json;base64,