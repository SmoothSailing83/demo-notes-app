import * as cdk from "@aws-cdk/core";
import * as acm from "@aws-cdk/aws-certificatemanager";
import * as apig from "@aws-cdk/aws-apigatewayv2";
import * as apigAuthorizers from "@aws-cdk/aws-apigatewayv2-authorizers";
import * as elb from "@aws-cdk/aws-elasticloadbalancingv2";
import * as logs from "@aws-cdk/aws-logs";
import { ISstConstruct, ISstConstructInfo } from "./Construct";
import { Function as Fn, FunctionProps, FunctionDefinition } from "./Function";
import { Permissions } from "./util/permission";
import * as apigV2Domain from "./util/apiGatewayV2Domain";
import * as apigV2AccessLog from "./util/apiGatewayV2AccessLog";
export declare enum ApiAuthorizationType {
    JWT = "JWT",
    NONE = "NONE",
    CUSTOM = "CUSTOM",
    AWS_IAM = "AWS_IAM"
}
export declare enum ApiPayloadFormatVersion {
    V1 = "1.0",
    V2 = "2.0"
}
export interface ApiProps {
    readonly httpApi?: apig.IHttpApi | apig.HttpApiProps;
    readonly routes?: {
        [key: string]: FunctionDefinition | ApiFunctionRouteProps | ApiHttpRouteProps | ApiAlbRouteProps;
    };
    readonly cors?: boolean | apig.CorsPreflightOptions;
    readonly accessLog?: boolean | string | ApiAccessLogProps;
    readonly customDomain?: string | ApiCustomDomainProps;
    readonly defaultFunctionProps?: FunctionProps;
    readonly defaultAuthorizationType?: ApiAuthorizationType;
    readonly defaultAuthorizer?: apigAuthorizers.HttpJwtAuthorizer | apigAuthorizers.HttpLambdaAuthorizer | apigAuthorizers.HttpUserPoolAuthorizer;
    readonly defaultAuthorizationScopes?: string[];
    readonly defaultPayloadFormatVersion?: ApiPayloadFormatVersion;
    readonly defaultThrottlingBurstLimit?: number;
    readonly defaultThrottlingRateLimit?: number;
    readonly stages?: Omit<apig.HttpStageProps, "httpApi">[];
}
export interface ApiFunctionRouteProps {
    readonly function: FunctionDefinition;
    readonly payloadFormatVersion?: ApiPayloadFormatVersion;
    readonly authorizationType?: ApiAuthorizationType;
    readonly authorizer?: apigAuthorizers.HttpJwtAuthorizer | apigAuthorizers.HttpLambdaAuthorizer | apigAuthorizers.HttpUserPoolAuthorizer;
    readonly authorizationScopes?: string[];
}
export interface ApiHttpRouteProps {
    readonly url: string;
    readonly method?: string | apig.HttpMethod;
    readonly authorizationType?: ApiAuthorizationType;
    readonly authorizer?: apigAuthorizers.HttpJwtAuthorizer | apigAuthorizers.HttpLambdaAuthorizer | apigAuthorizers.HttpUserPoolAuthorizer;
    readonly authorizationScopes?: string[];
}
export interface ApiAlbRouteProps {
    readonly albListener: elb.IApplicationListener;
    readonly method?: string | apig.HttpMethod;
    readonly vpcLink?: apig.IVpcLink;
    readonly authorizationType?: ApiAuthorizationType;
    readonly authorizer?: apigAuthorizers.HttpJwtAuthorizer | apigAuthorizers.HttpLambdaAuthorizer | apigAuthorizers.HttpUserPoolAuthorizer;
    readonly authorizationScopes?: string[];
}
export declare type ApiCustomDomainProps = apigV2Domain.CustomDomainProps;
export declare type ApiAccessLogProps = apigV2AccessLog.AccessLogProps;
export declare class Api extends cdk.Construct implements ISstConstruct {
    readonly httpApi: apig.HttpApi;
    readonly accessLogGroup?: logs.LogGroup;
    readonly apiGatewayDomain?: apig.DomainName;
    readonly acmCertificate?: acm.Certificate;
    private readonly _customDomainUrl?;
    private readonly routesData;
    private readonly routesInfo;
    private readonly permissionsAttachedForAllRoutes;
    private readonly defaultFunctionProps?;
    private readonly defaultAuthorizer?;
    private readonly defaultAuthorizationType?;
    private readonly defaultAuthorizationScopes?;
    private readonly defaultPayloadFormatVersion?;
    private readonly defaultThrottlingBurstLimit?;
    private readonly defaultThrottlingRateLimit?;
    constructor(scope: cdk.Construct, id: string, props?: ApiProps);
    get url(): string;
    get customDomainUrl(): string | undefined;
    get routes(): string[];
    get httpApiArn(): string;
    addRoutes(scope: cdk.Construct, routes: {
        [key: string]: FunctionDefinition | ApiFunctionRouteProps | ApiHttpRouteProps | ApiAlbRouteProps;
    }): void;
    getFunction(routeKey: string): Fn | undefined;
    attachPermissions(permissions: Permissions): void;
    attachPermissionsToRoute(routeKey: string, permissions: Permissions): void;
    getConstructInfo(): ISstConstructInfo;
    private buildCorsConfig;
    private addRoute;
    private createHttpIntegration;
    private createAlbIntegration;
    protected createFunctionIntegration(scope: cdk.Construct, routeKey: string, routeProps: ApiFunctionRouteProps, postfixName: string): apig.IHttpRouteIntegration;
    private buildRouteAuth;
    private normalizeRouteKey;
    private buildHttpMethod;
}
