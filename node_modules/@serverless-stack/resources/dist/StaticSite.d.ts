import * as cdk from "@aws-cdk/core";
import * as s3 from "@aws-cdk/aws-s3";
import * as acm from "@aws-cdk/aws-certificatemanager";
import * as route53 from "@aws-cdk/aws-route53";
import * as cloudfront from "@aws-cdk/aws-cloudfront";
import { BaseSiteDomainProps, BaseSiteReplaceProps, BaseSiteCdkDistributionProps } from "./BaseSite";
import { Construct, ISstConstructInfo } from "./Construct";
export declare enum StaticSiteErrorOptions {
    REDIRECT_TO_INDEX_PAGE = "REDIRECT_TO_INDEX_PAGE"
}
export interface StaticSiteProps {
    readonly path: string;
    readonly indexPage?: string;
    readonly errorPage?: string | StaticSiteErrorOptions;
    readonly buildCommand?: string;
    readonly buildOutput?: string;
    readonly fileOptions?: StaticSiteFileOption[];
    readonly replaceValues?: StaticSiteReplaceProps[];
    readonly customDomain?: string | StaticSiteDomainProps;
    readonly s3Bucket?: s3.BucketProps;
    readonly cfDistribution?: StaticSiteCdkDistributionProps;
    readonly environment?: {
        [key: string]: string;
    };
    readonly disablePlaceholder?: boolean;
}
export interface StaticSiteFileOption {
    readonly exclude: string | string[];
    readonly include: string | string[];
    readonly cacheControl: string;
}
export declare type StaticSiteDomainProps = BaseSiteDomainProps;
export declare type StaticSiteReplaceProps = BaseSiteReplaceProps;
export declare type StaticSiteCdkDistributionProps = BaseSiteCdkDistributionProps;
export declare class StaticSite extends Construct {
    readonly s3Bucket: s3.Bucket;
    readonly cfDistribution: cloudfront.Distribution;
    readonly hostedZone?: route53.IHostedZone;
    readonly acmCertificate?: acm.ICertificate;
    private readonly props;
    private readonly deployId;
    private readonly isPlaceholder;
    private readonly assets;
    private readonly awsCliLayer;
    constructor(scope: cdk.Construct, id: string, props: StaticSiteProps);
    get url(): string;
    get customDomainUrl(): string | undefined;
    get bucketArn(): string;
    get bucketName(): string;
    get distributionId(): string;
    get distributionDomain(): string;
    getConstructInfo(): ISstConstructInfo;
    private buildApp;
    private createS3Bucket;
    private createS3Deployment;
    private createCfDistribution;
    private createCloudFrontInvalidation;
    protected validateCustomDomainSettings(): void;
    protected lookupHostedZone(): route53.IHostedZone | undefined;
    private createCertificate;
    protected createRoute53Records(): void;
    private getS3ContentReplaceValues;
    private registerSiteEnvironment;
}
