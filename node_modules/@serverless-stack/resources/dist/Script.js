"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Script = void 0;
const path_1 = __importDefault(require("path"));
const cdk = __importStar(require("@aws-cdk/core"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const Function_1 = require("./Function");
class Script extends cdk.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        // Validate deprecated "function" prop
        if (props.function)
            this.checkDeprecatedFunction();
        // Validate at least 1 function is provided
        if (!props.onCreate && !props.onUpdate && !props.onDelete) {
            throw new Error(`Need to provide at least one of "onCreate", "onUpdate", or "onDelete" functions for the "${this.node.id}" Script`);
        }
        const root = scope.node.root;
        this.props = props;
        this.createFunction = this.createUserFunction("onCreate", props.onCreate);
        this.updateFunction = this.createUserFunction("onUpdate", props.onUpdate);
        this.deleteFunction = this.createUserFunction("onDelete", props.onDelete);
        const crFunction = this.createCustomResourceFunction();
        this.createCustomResource(root, crFunction);
    }
    attachPermissions(permissions) {
        var _a, _b, _c;
        (_a = this.createFunction) === null || _a === void 0 ? void 0 : _a.attachPermissions(permissions);
        (_b = this.updateFunction) === null || _b === void 0 ? void 0 : _b.attachPermissions(permissions);
        (_c = this.deleteFunction) === null || _c === void 0 ? void 0 : _c.attachPermissions(permissions);
    }
    createUserFunction(type, fnDef) {
        if (!fnDef) {
            return;
        }
        // function is construct => return function directly
        if (fnDef instanceof Function_1.Function) {
            // validate live dev is not enabled
            if (fnDef._isLiveDevEnabled) {
                throw new Error(`Live Lambda Dev cannot be enabled for functions in the Script construct. Set the "enableLiveDev" prop for the function to "false".`);
            }
            return Function_1.Function.fromDefinition(this, `${type}Function`, fnDef, this.props.defaultFunctionProps, `The "defaultFunctionProps" cannot be applied if an instance of a Function construct is passed in. Make sure to define the "${type}" function using FunctionProps, so the Script construct can apply the "defaultFunctionProps" to them.`);
        }
        // function is string => create function
        else if (typeof fnDef === "string") {
            return Function_1.Function.fromDefinition(this, `${type}Function`, {
                handler: fnDef,
                enableLiveDev: false,
            }, Object.assign({ timeout: 900 }, this.props.defaultFunctionProps));
        }
        // function is props => create function
        return Function_1.Function.fromDefinition(this, `${type}Function`, Object.assign(Object.assign({}, fnDef), { enableLiveDev: false }), Object.assign({ timeout: 900 }, this.props.defaultFunctionProps));
    }
    createCustomResourceFunction() {
        var _a, _b, _c;
        const handler = new lambda.Function(this, "ScriptHandler", {
            code: lambda.Code.fromAsset(path_1.default.join(__dirname, "Script")),
            runtime: lambda.Runtime.NODEJS_14_X,
            handler: "index.handler",
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
        });
        (_a = this.createFunction) === null || _a === void 0 ? void 0 : _a.grantInvoke(handler);
        (_b = this.updateFunction) === null || _b === void 0 ? void 0 : _b.grantInvoke(handler);
        (_c = this.deleteFunction) === null || _c === void 0 ? void 0 : _c.grantInvoke(handler);
        return handler;
    }
    createCustomResource(app, crFunction) {
        var _a, _b, _c;
        // Note: "BuiltAt" is set to current timestamp to ensure the Custom
        //       Resource function is run on every update.
        //
        //       Do not use the current timestamp in Live mode, b/c we want the
        //       this custom resource to remain the same in CloudFormation template
        //       when rebuilding infrastructure. Otherwise, there will always be
        //       a change when rebuilding infrastructure b/c the "BuildAt" property
        //       changes on each build.
        const builtAt = app.local ? app.debugStartedAt : Date.now();
        new cdk.CustomResource(this, "ScriptResource", {
            serviceToken: crFunction.functionArn,
            resourceType: "Custom::SSTScript",
            properties: {
                UserCreateFunction: (_a = this.createFunction) === null || _a === void 0 ? void 0 : _a.functionName,
                UserUpdateFunction: (_b = this.updateFunction) === null || _b === void 0 ? void 0 : _b.functionName,
                UserDeleteFunction: (_c = this.deleteFunction) === null || _c === void 0 ? void 0 : _c.functionName,
                UserParams: JSON.stringify(this.props.params || {}),
                BuiltAt: builtAt,
            },
        });
    }
    checkDeprecatedFunction() {
        throw new Error(`The "function" property has been replaced by "onCreate" and "onUpdate". More details on upgrading - https://docs.serverless-stack.com/constructs/Script#upgrading-to-v0460`);
    }
}
exports.Script = Script;
//# sourceMappingURL=data:application/json;base64,