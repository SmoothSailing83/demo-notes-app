import * as cdk from "@aws-cdk/core";
import * as s3 from "@aws-cdk/aws-s3";
import * as route53 from "@aws-cdk/aws-route53";
import * as cloudfront from "@aws-cdk/aws-cloudfront";
import * as acm from "@aws-cdk/aws-certificatemanager";
import { Construct, ISstConstructInfo } from "./Construct";
import { BaseSiteDomainProps, BaseSiteCdkDistributionProps } from "./BaseSite";
import { Permissions } from "./util/permission";
export interface NextjsSiteProps {
    path: string;
    s3Bucket?: s3.BucketProps;
    customDomain?: string | NextjsSiteDomainProps;
    cfCachePolicies?: NextjsSiteCachePolicyProps;
    cfDistribution?: NextjsSiteCdkDistributionProps;
    environment?: {
        [key: string]: string;
    };
    defaultFunctionProps?: NextjsSiteFunctionProps;
    disablePlaceholder?: boolean;
}
export interface NextjsSiteFunctionProps {
    timeout?: number;
    memorySize?: number;
    permissions?: Permissions;
}
export interface NextjsSiteCachePolicyProps {
    staticCachePolicy?: cloudfront.ICachePolicy;
    imageCachePolicy?: cloudfront.ICachePolicy;
    lambdaCachePolicy?: cloudfront.ICachePolicy;
}
export declare type NextjsSiteDomainProps = BaseSiteDomainProps;
export declare type NextjsSiteCdkDistributionProps = BaseSiteCdkDistributionProps;
export declare class NextjsSite extends Construct {
    static staticCachePolicyProps: cloudfront.CachePolicyProps;
    static imageCachePolicyProps: cloudfront.CachePolicyProps;
    static lambdaCachePolicyProps: cloudfront.CachePolicyProps;
    readonly s3Bucket: s3.Bucket;
    readonly cfDistribution: cloudfront.Distribution;
    readonly hostedZone?: route53.IHostedZone;
    readonly acmCertificate?: acm.ICertificate;
    private readonly props;
    private readonly deployId;
    private readonly isPlaceholder;
    private readonly buildOutDir;
    private readonly assets;
    private readonly awsCliLayer;
    private readonly routesManifest;
    private readonly edgeLambdaRole;
    private readonly mainFunctionVersion;
    private readonly apiFunctionVersion;
    private readonly imageFunctionVersion;
    private readonly regenerationQueue;
    private readonly regenerationFunction;
    constructor(scope: cdk.Construct, id: string, props: NextjsSiteProps);
    get url(): string;
    get customDomainUrl(): string | undefined;
    get bucketArn(): string;
    get bucketName(): string;
    get distributionId(): string;
    get distributionDomain(): string;
    attachPermissions(permissions: Permissions): void;
    getConstructInfo(): ISstConstructInfo;
    private zipAppAssets;
    private zipAppStubAssets;
    private createEdgeFunction;
    private createEdgeFunctionInUE1;
    private createEdgeFunctionInNonUE1;
    private createEdgeFunctionRole;
    private createRegenerationQueue;
    private createRegenerationFunction;
    private createLambdaCodeReplacer;
    private buildApp;
    private createS3Bucket;
    private createS3Deployment;
    private createCloudFrontDistribution;
    private createCloudFrontStaticCachePolicy;
    private createCloudFrontImageCachePolicy;
    private createCloudFrontLambdaCachePolicy;
    private createCloudFrontInvalidation;
    protected validateCustomDomainSettings(): void;
    protected lookupHostedZone(): route53.IHostedZone | undefined;
    private createCertificate;
    protected createRoute53Records(): void;
    private pathPattern;
    private readRoutesManifest;
    private getS3ContentReplaceValues;
    private getLambdaContentReplaceValues;
    private registerSiteEnvironment;
}
