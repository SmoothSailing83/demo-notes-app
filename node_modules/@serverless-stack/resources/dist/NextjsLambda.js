"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NextjsLambda = void 0;
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const cdk = __importStar(require("@aws-cdk/core"));
const iam = __importStar(require("@aws-cdk/aws-iam"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
const s3Assets = __importStar(require("@aws-cdk/aws-s3-assets"));
const customResource_1 = require("./util/customResource");
class NextjsLambda extends cdk.Construct {
    constructor(scope, id) {
        super(scope, id);
        const bucketCR = this.createBucket();
        const role = this.createEdgeFunctionRole();
        const version = this.createEdgeFunction(role, bucketCR);
        new cdk.CfnOutput(this, "VERSION", { value: version.functionArn });
    }
    createBucket() {
        const { resource } = (0, customResource_1.createCustomResource)(this, "EdgeLambdaBucket", {
            resourceType: "Custom::SSTEdgeLambdaBucket",
            srcPath: path.join(__dirname, "nextjs-site/custom-resource"),
            handler: "s3-bucket.handler",
            policyStatements: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ["s3:*"],
                    resources: ["*"],
                }),
            ],
            properties: {
                BucketNamePrefix: `${cdk.Stack.of(this).stackName}-EdgeLambdaAsset`,
            },
        });
        return resource;
    }
    createEdgeFunctionRole() {
        return new iam.Role(this, `EdgeLambdaRole`, {
            assumedBy: new iam.ServicePrincipal("lambda.amazonaws.com"),
            managedPolicies: [
                iam.ManagedPolicy.fromManagedPolicyArn(this, "EdgeLambdaPolicy", "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole")
            ]
        });
    }
    createEdgeFunction(role, bucketCR) {
        // Create function based on region
        let fn;
        let fnVersion;
        const root = this.node.root;
        // Create function asset
        const asset = new s3Assets.Asset(this, `FunctionAsset`, {
            //path: path.join(__dirname, "Script"),
            //path: path.join(__dirname, "util"),
            path: path.join(__dirname, "NextjsSite"),
        });
        // Create function
        const functionProperties = {
            Description: `handler for Next.js`,
            Handler: "index.handler",
            Code: {
                S3Bucket: asset.s3BucketName,
                S3Key: asset.s3ObjectKey,
            },
            Runtime: lambda.Runtime.NODEJS_12_X.name,
            MemorySize: 512,
            Timeout: 10,
            Role: role.roleArn,
        };
        const functionCR = (0, customResource_1.createCustomResource)(this, "EdgeLambda", {
            resourceType: "Custom::SSTEdgeLambda",
            srcPath: path.join(__dirname, "nextjs-site/custom-resource"),
            handler: "edge-lambda.handler",
            policyStatements: [
                // allow custom resource to create/update/remove Lambda functions
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ["lambda:*", "s3:*"],
                    resources: ["*"],
                }),
            ],
            properties: {
                FunctionNamePrefix: `${cdk.Stack.of(this).stackName}-EdgeLambda`,
                FunctionBucket: bucketCR.getAttString("BucketName"),
                FunctionParams: functionProperties,
            },
        });
        if (functionCR.handler.role) {
            role.grantPassRole(functionCR.handler.role);
        }
        functionCR.resource.node.addDependency(bucketCR);
        // Create Function Version
        const versionCR = (0, customResource_1.createCustomResource)(this, "EdgeLambdaVersion", {
            resourceType: "Custom::SSTEdgeLambdaVersion",
            srcPath: path.join(__dirname, "nextjs-site/custom-resource"),
            handler: "edge-lambda-version.handler",
            policyStatements: [
                // allow custom resource to create/update/remove Lambda function versions
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ["lambda:*"],
                    resources: ["*"],
                }),
            ],
            properties: {
                FunctionArn: functionCR.resource.getAttString("FunctionArn"),
            },
        });
        // Override the version's logical ID with a lazy string which includes the
        // hash of the function itself, so a new version resource is created when
        // the function configuration changes.
        const cfn = versionCR.resource.node.defaultChild;
        const originalLogicalId = cdk.Stack.of(this).resolve(cfn.logicalId);
        cfn.overrideLogicalId(cdk.Lazy.uncachedString({
            produce: () => {
                const hash = calculateHash(functionCR.resource);
                const logicalId = trimFromStart(originalLogicalId, 255 - 32);
                return `${logicalId}${hash}`;
            },
        }));
        fnVersion = lambda.Version.fromVersionArn(this, `FunctionVersion`, `${functionCR.resource.getAttString("FunctionArn")}:${versionCR.resource.getAttString("Version")}`);
        return fnVersion;
    }
}
exports.NextjsLambda = NextjsLambda;
function trimFromStart(s, maxLength) {
    const desiredLength = Math.min(maxLength, s.length);
    const newStart = s.length - desiredLength;
    return s.substring(newStart);
}
function calculateHash(resource) {
    // render the cloudformation resource from this function
    // config is of the shape:
    // {
    //  Resources: {
    //    LogicalId: {
    //      Type: 'Function',
    //      Properties: { ... }
    // }}}
    const cfnResource = resource.node.defaultChild;
    const config = cdk.Stack.of(resource).resolve(cfnResource._toCloudFormation());
    const resources = config.Resources;
    const resourceKeys = Object.keys(resources);
    if (resourceKeys.length !== 1) {
        throw new Error(`Expected one rendered CloudFormation resource but found ${resourceKeys.length}`);
    }
    const logicalId = resourceKeys[0];
    const properties = resources[logicalId].Properties.FunctionParams;
    const hash = crypto.createHash('md5');
    hash.update(JSON.stringify(properties));
    return hash.digest('hex');
}
//# sourceMappingURL=data:application/json;base64,