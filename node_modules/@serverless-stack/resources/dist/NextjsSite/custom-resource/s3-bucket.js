"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const AWS = __importStar(require("aws-sdk"));
AWS.config.logger = console;
const util_1 = require("./util");
const cfnResponse = __importStar(require("./cfn-response"));
const s3 = new AWS.S3({ region: "us-east-1" });
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)("onEventHandler", cfnRequest);
        // Get bucket name
        const bucketName = cfnRequest.RequestType === "Create"
            ? generateBucketName(cfnRequest.ResourceProperties.BucketNamePrefix)
            : cfnRequest.PhysicalResourceId;
        // Process request
        let responseData;
        switch (cfnRequest.RequestType) {
            case 'Create':
                yield createBucket(bucketName);
                responseData = {
                    BucketName: bucketName,
                };
                break;
            case 'Update':
                break;
            case 'Delete':
                yield emptyBucket(bucketName);
                yield deleteBucket(bucketName);
                break;
            default:
                throw new Error("Unsupported request type");
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId: bucketName, Data: responseData }));
    });
}
function createBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`createBucket() called with bucketName`, bucketName);
        const resp = yield s3.createBucket({
            Bucket: bucketName,
        }).promise();
        (0, util_1.log)(`response`, resp);
    });
}
function deleteBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`deleteBucket() called with bucketName`, bucketName);
        const resp = yield s3.deleteBucket({
            Bucket: bucketName,
        }).promise();
        (0, util_1.log)(`response`, resp);
    });
}
function generateBucketName(prefix) {
    const MAX_NAME_LENGTH = 63;
    const length = 20;
    const characters = 'abcdefghijklmnopqrstuvwxyz';
    const charactersLength = characters.length;
    let result = `${prefix.toLowerCase().slice(0, MAX_NAME_LENGTH - length - 1)}-`;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
////////////////
// @aws-cdk/aws-s3/lib/auto-delete-objectshandler
////////////////
function emptyBucket(bucketName) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const listedObjects = yield s3.listObjectVersions({ Bucket: bucketName }).promise();
        const contents = [...(_a = listedObjects.Versions) !== null && _a !== void 0 ? _a : [], ...(_b = listedObjects.DeleteMarkers) !== null && _b !== void 0 ? _b : []];
        if (contents.length === 0) {
            return;
        }
        const records = contents.map((record) => ({ Key: record.Key, VersionId: record.VersionId }));
        yield s3.deleteObjects({ Bucket: bucketName, Delete: { Objects: records } }).promise();
        if (listedObjects === null || listedObjects === void 0 ? void 0 : listedObjects.IsTruncated) {
            yield emptyBucket(bucketName);
        }
    });
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMtYnVja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL05leHRqc1NpdGUvY3VzdG9tLXJlc291cmNlL3MzLWJ1Y2tldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZDQUErQjtBQUMvQixHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUM7QUFFNUIsaUNBQTZCO0FBQzdCLDREQUE4QztBQUM5QyxNQUFNLEVBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLENBQUMsQ0FBQztBQU0vQyxTQUFlLE9BQU8sQ0FDcEIsVUFBdUQ7O1FBRXZELElBQUEsVUFBRyxFQUFDLGdCQUFnQixFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBRWxDLGtCQUFrQjtRQUNsQixNQUFNLFVBQVUsR0FBRyxVQUFVLENBQUMsV0FBVyxLQUFLLFFBQVE7WUFDcEQsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxnQkFBZ0IsQ0FBQztZQUNwRSxDQUFDLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDO1FBRWxDLGtCQUFrQjtRQUNsQixJQUFJLFlBQVksQ0FBQztRQUNqQixRQUFRLFVBQVUsQ0FBQyxXQUFXLEVBQUU7WUFDOUIsS0FBSyxRQUFRO2dCQUNYLE1BQU0sWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMvQixZQUFZLEdBQUc7b0JBQ2IsVUFBVSxFQUFFLFVBQVU7aUJBQ3ZCLENBQUE7Z0JBQ0QsTUFBTTtZQUNSLEtBQUssUUFBUTtnQkFDWCxNQUFNO1lBQ1IsS0FBSyxRQUFRO2dCQUNYLE1BQU0sV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUM5QixNQUFNLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDL0IsTUFBTTtZQUNSO2dCQUNFLE1BQU0sSUFBSSxLQUFL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QyxDQUFDO1NBQy9COztDQUNGO0FBekZELGlCQUFTO0lBQ1AsT0FBTyxFQUFFLFdBQVcsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO0NBQzFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBBV1MgZnJvbSBcImF3cy1zZGtcIjtcbkFXUy5jb25maWcubG9nZ2VyID0gY29uc29sZTtcblxuaW1wb3J0IHsgbG9nIH0gZnJvbSBcIi4vdXRpbFwiO1xuaW1wb3J0ICogYXMgY2ZuUmVzcG9uc2UgZnJvbSBcIi4vY2ZuLXJlc3BvbnNlXCI7XG5jb25zdCBzMyA9IG5ldyBBV1MuUzMoeyByZWdpb246IFwidXMtZWFzdC0xXCIgfSk7XG5cbmV4cG9ydCA9IHtcbiAgaGFuZGxlcjogY2ZuUmVzcG9uc2Uuc2FmZUhhbmRsZXIoaGFuZGxlciksXG59O1xuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVyKFxuICBjZm5SZXF1ZXN0OiBBV1NMYW1iZGEuQ2xvdWRGb3JtYXRpb25DdXN0b21SZXNvdXJjZUV2ZW50XG4pIHtcbiAgbG9nKFwib25FdmVudEhhbmRsZXJcIiwgY2ZuUmVxdWVzdCk7XG5cbiAgLy8gR2V0IGJ1Y2tldCBuYW1lXG4gIGNvbnN0IGJ1Y2tldE5hbWUgPSBjZm5SZXF1ZXN0LlJlcXVlc3RUeXBlID09PSBcIkNyZWF0ZVwiXG4gICAgPyBnZW5lcmF0ZUJ1Y2tldE5hbWUoY2ZuUmVxdWVzdC5SZXNvdXJjZVByb3BlcnRpZXMuQnVja2V0TmFtZVByZWZpeClcbiAgICA6IGNmblJlcXVlc3QuUGh5c2ljYWxSZXNvdXJjZUlkO1xuXG4gIC8vIFByb2Nlc3MgcmVxdWVzdFxuICBsZXQgcmVzcG9uc2VEYXRhO1xuICBzd2l0Y2ggKGNmblJlcXVlc3QuUmVxdWVzdFR5cGUpIHtcbiAgICBjYXNlICdDcmVhdGUnOlxuICAgICAgYXdhaXQgY3JlYXRlQnVja2V0KGJ1Y2tldE5hbWUpO1xuICAgICAgcmVzcG9uc2VEYXRhID0ge1xuICAgICAgICBCdWNrZXROYW1lOiBidWNrZXROYW1lLFxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAnVXBkYXRlJzpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ0RlbGV0ZSc6XG4gICAgICBhd2FpdCBlbXB0eUJ1Y2tldChidWNrZXROYW1lKTtcbiAgICAgIGF3YWl0IGRlbGV0ZUJ1Y2tldChidWNrZXROYW1lKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCByZXF1ZXN0IHR5cGVcIik7XG4gIH1cblxuICAvLyBCdWlsZCByZXNwb25zZVxuICByZXR1cm4gY2ZuUmVzcG9uc2Uuc3VibWl0UmVzcG9uc2UoXCJTVUNDRVNTXCIsIHtcbiAgICAuLi5jZm5SZXF1ZXN0LFxuICAgIFBoeXNpY2FsUmVzb3VyY2VJZDogYnVja2V0TmFtZSxcbiAgICBEYXRhOiByZXNwb25zZURhdGEsXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVCdWNrZXQoYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gIGxvZyhgY3JlYXRlQnVja2V0KCkgY2FsbGVkIHdpdGggYnVja2V0TmFtZWAsIGJ1Y2tldE5hbWUpO1xuXG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBzMy5jcmVhdGVCdWNrZXQoe1xuICAgIEJ1Y2tldDogYnVja2V0TmFtZSxcbiAgfSkucHJvbWlzZSgpO1xuXG4gIGxvZyhgcmVzcG9uc2VgLCByZXNwKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlQnVja2V0KGJ1Y2tldE5hbWU6IHN0cmluZykge1xuICBsb2coYGRlbGV0ZUJ1Y2tldCgpIGNhbGxlZCB3aXRoIGJ1Y2tldE5hbWVgLCBidWNrZXROYW1lKTtcblxuICBjb25zdCByZXNwID0gYXdhaXQgczMuZGVsZXRlQnVja2V0KHtcbiAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUsXG4gIH0pLnByb21pc2UoKTtcblxuICBsb2coYHJlc3BvbnNlYCwgcmVzcCk7XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQnVja2V0TmFtZShwcmVmaXg6IHN0cmluZykge1xuICBjb25zdCBNQVhfTkFNRV9MRU5HVEggPSA2MztcbiAgY29uc3QgbGVuZ3RoID0gMjA7XG4gIGNvbnN0IGNoYXJhY3RlcnMgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonO1xuICBjb25zdCBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7XG4gIGxldCByZXN1bHQgPSBgJHtwcmVmaXgudG9Mb3dlckNhc2UoKS5zbGljZSgwLCBNQVhfTkFNRV9MRU5HVEggLSBsZW5ndGggLSAxKX0tYDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8vLy8vLy8vLy8vLy8vL1xuLy8gQGF3cy1jZGsvYXdzLXMzL2xpYi9hdXRvLWRlbGV0ZS1vYmplY3RzaGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vL1xuYXN5bmMgZnVuY3Rpb24gZW1wdHlCdWNrZXQoYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IGxpc3RlZE9iamVjdHMgPSBhd2FpdCBzMy5saXN0T2JqZWN0VmVyc2lvbnMoeyBCdWNrZXQ6IGJ1Y2tldE5hbWUgfSkucHJvbWlzZSgpO1xuICBjb25zdCBjb250ZW50cyA9IFsuLi5saXN0ZWRPYmplY3RzLlZlcnNpb25zID8/IFtdLCAuLi5saXN0ZWRPYmplY3RzLkRlbGV0ZU1hcmtlcnMgPz8gW11dO1xuICBpZiAoY29udGVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVjb3JkcyA9IGNvbnRlbnRzLm1hcCgocmVjb3JkOiBhbnkpID0+ICh7IEtleTogcmVjb3JkLktleSwgVmVyc2lvbklkOiByZWNvcmQuVmVyc2lvbklkIH0pKTtcbiAgYXdhaXQgczMuZGVsZXRlT2JqZWN0cyh7IEJ1Y2tldDogYnVja2V0TmFtZSwgRGVsZXRlOiB7IE9iamVjdHM6IHJlY29yZHMgfSB9KS5wcm9taXNlKCk7XG5cbiAgaWYgKGxpc3RlZE9iamVjdHM/LklzVHJ1bmNhdGVkKSB7XG4gICAgYXdhaXQgZW1wdHlCdWNrZXQoYnVja2V0TmFtZSk7XG4gIH1cbn1cbiJdfQ==