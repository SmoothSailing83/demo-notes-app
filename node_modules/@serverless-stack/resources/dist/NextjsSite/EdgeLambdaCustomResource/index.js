"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const AWS = __importStar(require("aws-sdk"));
const cfnResponse = __importStar(require("./cfn-response"));
const util_1 = require("./util");
let lambda;
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)("onEventHandler", cfnRequest);
        // Initialize Lambda client
        initLambdaClient();
        // Invoke user function on Create and on Update
        const params = cfnRequest.ResourceProperties.FunctionParams;
        let data;
        if (cfnRequest.RequestType === "Create") {
            data = yield handleCreate(params);
        }
        else if (cfnRequest.RequestType === "Update") {
            const oldParams = cfnRequest.OldResourceProperties.FunctionParams;
            data = yield handleUpdate(params, oldParams);
        }
        else if (cfnRequest.RequestType === "Delete") {
            yield handleDelete(params);
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId: defaultPhysicalResourceId(cfnRequest), Data: data }));
    });
}
function handleCreate(params) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`handleCreate() called with params`, params);
        let resp;
        // Create function
        (0, util_1.log)(`created function`);
        resp = yield lambda.createFunction(params).promise();
        (0, util_1.log)(`response`, resp);
        // Publish version
        (0, util_1.log)(`publish version`);
        resp = yield lambda
            .publishVersion({
            FunctionName: params.FunctionName,
        })
            .promise();
        (0, util_1.log)(`response`, resp);
        return { FunctionArn: resp.FunctionArn, Version: resp.Version };
    });
}
function handleUpdate(params, oldParams) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`handleUpdate() called with params`, params, `oldParams`, oldParams);
        let resp;
        // Update function configuration
        (0, util_1.log)(`update function configuration`);
        if ([
            "Description",
            "Handler",
            "Runtime",
            "MemorySize",
            "Timeout",
            "Role",
        ].every((p) => params[p] === oldParams[p])) {
            (0, util_1.log)(`skipped`);
        }
        else {
            resp = yield lambda
                .updateFunctionConfiguration(Object.assign(Object.assign({}, params), { Code: undefined }))
                .promise();
            (0, util_1.log)(`response`, resp);
        }
        // Update function code
        (0, util_1.log)(`update function code`);
        if (params.Code.S3Bucket === oldParams.Code.S3Bucket &&
            params.Code.S3Key === oldParams.Code.S3Key &&
            params.Code.ZipFile === oldParams.Code.ZipFile) {
            (0, util_1.log)(`skipped`);
        }
        else {
            resp = yield lambda
                .updateFunctionCode(Object.assign({ FunctionName: params.FunctionName, Publish: false }, params.Code))
                .promise();
            (0, util_1.log)(`response`, resp);
        }
        // Publish version
        (0, util_1.log)(`publish version`);
        resp = yield lambda
            .publishVersion({
            FunctionName: params.FunctionName,
        })
            .promise();
        (0, util_1.log)(`response`, resp);
        return { FunctionArn: resp.FunctionArn, Version: resp.Version };
    });
}
function handleDelete(params) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`handleDelete() called with params`, params);
        // Delete function
        (0, util_1.log)(`handleDelete(): delete function`);
        const resp = yield lambda.deleteFunction(params).promise();
        (0, util_1.log)(`response`, resp);
    });
}
function initLambdaClient() {
    // Create Lambda client
    if (!lambda) {
        lambda = new AWS.Lambda({
            region: "us-east-1",
        });
    }
}
function defaultPhysicalResourceId(req) {
    switch (req.RequestType) {
        case "Create":
            return req.RequestId;
        case "Update":
        case "Delete":
            return req.PhysicalResourceId;
        default:
            throw new Error(`Invalid "RequestType" in request "${JSON.stringify(req)}"`);
    }
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,