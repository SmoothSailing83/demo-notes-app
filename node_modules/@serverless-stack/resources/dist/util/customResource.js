"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createCustomResource = void 0;
const cdk = __importStar(require("@aws-cdk/core"));
const lambda = __importStar(require("@aws-cdk/aws-lambda"));
function createCustomResource(scope, id, props) {
    // Create handler
    const handler = new lambda.Function(scope, `${id}Provider`, {
        code: lambda.Code.fromAsset(props.srcPath),
        handler: props.handler,
        description: props.description,
        runtime: lambda.Runtime.NODEJS_12_X,
        timeout: cdk.Duration.minutes(15),
        memorySize: 1024,
        initialPolicy: props.policyStatements,
    });
    // Create custom resource
    const resource = new cdk.CustomResource(scope, id, {
        resourceType: props.resourceType,
        serviceToken: handler.functionArn,
        properties: props.properties,
    });
    return { handler, resource };
}
exports.createCustomResource = createCustomResource;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tUmVzb3VyY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC9jdXN0b21SZXNvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsbURBQXFDO0FBQ3JDLDREQUE4QztBQWdCOUMsU0FBZ0Isb0JBQW9CLENBQUMsS0FBb0IsRUFBRSxFQUFVLEVBQUUsS0FBMkI7SUFDaEcsaUJBQWlCO0lBQ2pCLE1BQU0sT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLFVBQVUsRUFDeEQ7UUFDRSxJQUFJLEVBQUUsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUMxQyxPQUFPLEVBQUUsS0FBSyxDQUFDLE9BQU87UUFDdEIsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXO1FBQzlCLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVc7UUFDbkMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQztRQUNqQyxVQUFVLEVBQUUsSUFBSTtRQUNoQixhQUFhLEVBQUUsS0FBSyxDQUFDLGdCQUFnQjtLQUN0QyxDQUNGLENBQUM7SUFFRix5QkFBeUI7SUFDekIsTUFBTSxRQUFRLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7UUFDakQsWUFBWSxFQUFFLEtBQUssQ0FBQyxZQUFZO1FBQ2hDLFlBQVksRUFBRSxPQUFPLENBQUMsV0FBVztRQUNqQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVU7S0FDN0IsQ0FBQyxDQUFDO0lBRUgsT0FBTyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQztBQUMvQixDQUFDO0FBdEJELG9EQXNCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiQGF3cy1jZGsvY29yZVwiO1xuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gXCJAYXdzLWNkay9hd3MtbGFtYmRhXCI7XG5cbmludGVyZmFjZSBDdXN0b21SZXNvdXJjZXNQcm9wcyB7XG4gIHJlYWRvbmx5IHJlc291cmNlVHlwZTogc3RyaW5nLFxuICByZWFkb25seSBzcmNQYXRoOiBzdHJpbmcsXG4gIHJlYWRvbmx5IGhhbmRsZXI6IHN0cmluZyxcbiAgcmVhZG9ubHkgZGVzY3JpcHRpb24/OiBzdHJpbmcsXG4gIHJlYWRvbmx5IHByb3BlcnRpZXM/OiBhbnksXG4gIHJlYWRvbmx5IHBvbGljeVN0YXRlbWVudHM/OiBhbnlbXSxcbn1cblxuaW50ZXJmYWNlIEN1c3RvbVJlc291cmNlc1Jlc3BvbnNlIHtcbiAgcmVhZG9ubHkgaGFuZGxlcjogbGFtYmRhLkZ1bmN0aW9uLFxuICByZWFkb25seSByZXNvdXJjZTogY2RrLkN1c3RvbVJlc291cmNlLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ3VzdG9tUmVzb3VyY2Uoc2NvcGU6IGNkay5Db25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBDdXN0b21SZXNvdXJjZXNQcm9wcyk6IEN1c3RvbVJlc291cmNlc1Jlc3BvbnNlIHtcbiAgLy8gQ3JlYXRlIGhhbmRsZXJcbiAgY29uc3QgaGFuZGxlciA9IG5ldyBsYW1iZGEuRnVuY3Rpb24oc2NvcGUsIGAke2lkfVByb3ZpZGVyYCxcbiAgICB7XG4gICAgICBjb2RlOiBsYW1iZGEuQ29kZS5mcm9tQXNzZXQocHJvcHMuc3JjUGF0aCksXG4gICAgICBoYW5kbGVyOiBwcm9wcy5oYW5kbGVyLFxuICAgICAgZGVzY3JpcHRpb246IHByb3BzLmRlc2NyaXB0aW9uLFxuICAgICAgcnVudGltZTogbGFtYmRhLlJ1bnRpbWUuTk9ERUpTXzEyX1gsXG4gICAgICB0aW1lb3V0OiBjZGsuRHVyYXRpb24ubWludXRlcygxNSksXG4gICAgICBtZW1vcnlTaXplOiAxMDI0LFxuICAgICAgaW5pdGlhbFBvbGljeTogcHJvcHMucG9saWN5U3RhdGVtZW50cyxcbiAgICB9XG4gICk7XG5cbiAgLy8gQ3JlYXRlIGN1c3RvbSByZXNvdXJjZVxuICBjb25zdCByZXNvdXJjZSA9IG5ldyBjZGsuQ3VzdG9tUmVzb3VyY2Uoc2NvcGUsIGlkLCB7XG4gICAgcmVzb3VyY2VUeXBlOiBwcm9wcy5yZXNvdXJjZVR5cGUsXG4gICAgc2VydmljZVRva2VuOiBoYW5kbGVyLmZ1bmN0aW9uQXJuLFxuICAgIHByb3BlcnRpZXM6IHByb3BzLnByb3BlcnRpZXMsXG4gIH0pO1xuXG4gIHJldHVybiB7IGhhbmRsZXIsIHJlc291cmNlIH07XG59XG4iXX0=