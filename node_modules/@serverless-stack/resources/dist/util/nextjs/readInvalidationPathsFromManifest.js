"use strict";
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        Object.defineProperty(o, k2, {
          enumerable: true,
          get: function () {
            return m[k];
          },
        });
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.readInvalidationPathsFromManifest = void 0;
const path = __importStar(require("path"));
const dynamicPathToInvalidationPath = (dynamicPath) => {
  // Match "/:", "/[" or "/[[..."
  // Only the last one indicates an optional catch-all group,
  // where a route without both the the group and the slash matches.
  // E.g. /pages/[[...slug]] matches on /pages and /pages/foo
  const firstSplit = dynamicPath.match(/\/(:|\[(\[\.\.\.)?)/);
  const [firstSegment] = dynamicPath.split(/\/[:[]/);
  if (firstSplit && firstSplit[0] === "/[[...") {
    // If the firstSplit is the optional catch-all,
    // append the wildcard directly (without a slash)
    return (firstSegment || "/") + "*";
  }
  // Ensure this is posix path as CloudFront needs forward slash in invalidation
  return path.posix.join(firstSegment || "/", "*");
};
const readInvalidationPathsFromManifest = (manifest) => {
  var _a, _b;
  return [
    ...Object.keys(manifest.pages.html.dynamic).map(
      dynamicPathToInvalidationPath
    ),
    ...Object.keys(manifest.pages.html.nonDynamic),
    ...Object.keys(manifest.pages.ssr.dynamic).map(
      dynamicPathToInvalidationPath
    ),
    ...Object.keys(manifest.pages.ssr.nonDynamic),
    ...Object.keys(
      ((_a = manifest.pages.ssg) === null || _a === void 0
        ? void 0
        : _a.dynamic) || {}
    ).map(dynamicPathToInvalidationPath),
    ...Object.keys(
      ((_b = manifest.pages.ssg) === null || _b === void 0
        ? void 0
        : _b.nonDynamic) || {}
    ),
  ];
};
exports.readInvalidationPathsFromManifest = readInvalidationPathsFromManifest;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEludmFsaWRhdGlvblBhdGhzRnJvbU1hbmlmZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWwvbmV4dGpzL3JlYWRJbnZhbGlkYXRpb25QYXRoc0Zyb21NYW5pZmVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTZCO0FBRzdCLE1BQU0sNkJBQTZCLEdBQUcsQ0FBQyxXQUFtQixFQUFFLEVBQUU7SUFDNUQsK0JBQStCO0lBQy9CLDJEQUEyRDtJQUMzRCxrRUFBa0U7SUFDbEUsMkRBQTJEO0lBRTNELE1BQU0sVUFBVSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMscUJBQXFCLENBQUMsQ0FBQztJQUM1RCxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUVuRCxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQzVDLCtDQUErQztRQUMvQyxpREFBaUQ7UUFDakQsT0FBTyxDQUFDLFlBQVksSUFBSSxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7S0FDcEM7SUFDRCw4RUFBOEU7SUFDOUUsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLElBQUksR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ25ELENBQUMsQ0FBQztBQUVLLE1BQU0saUNBQWlDLEdBQUcsQ0FDL0MsUUFBNkMsRUFDbkMsRUFBRTs7SUFDWixPQUFPO1FBQ0wsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FDN0MsNkJBQTZCLENBQzlCO1FBQ0QsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUM5QyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUM1Qyw2QkFBNkIsQ0FDOUI7UUFDRCxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDO1FBQzdDLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBLE1BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLDBDQUFFLE9BQU8sS0FBSSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQ25ELDZCQUE2QixDQUM5QjtRQUNELEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFBLE1BQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLDBDQUFFLFVBQVUsS0FBSSxFQUFFLENBQUM7S0FDckQsQ0FBQztBQUNKLENBQUMsQ0FBQztBQWpCVyxRQUFBLGlDQUFpQyxxQ0FpQjVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IHsgT3JpZ2luUmVxdWVzdERlZmF1bHRIYW5kbGVyTWFuaWZlc3QgfSBmcm9tIFwiQHNscy1uZXh0L2xhbWJkYS1hdC1lZGdlXCI7XG5cbmNvbnN0IGR5bmFtaWNQYXRoVG9JbnZhbGlkYXRpb25QYXRoID0gKGR5bmFtaWNQYXRoOiBzdHJpbmcpID0+IHtcbiAgLy8gTWF0Y2ggXCIvOlwiLCBcIi9bXCIgb3IgXCIvW1suLi5cIlxuICAvLyBPbmx5IHRoZSBsYXN0IG9uZSBpbmRpY2F0ZXMgYW4gb3B0aW9uYWwgY2F0Y2gtYWxsIGdyb3VwLFxuICAvLyB3aGVyZSBhIHJvdXRlIHdpdGhvdXQgYm90aCB0aGUgdGhlIGdyb3VwIGFuZCB0aGUgc2xhc2ggbWF0Y2hlcy5cbiAgLy8gRS5nLiAvcGFnZXMvW1suLi5zbHVnXV0gbWF0Y2hlcyBvbiAvcGFnZXMgYW5kIC9wYWdlcy9mb29cblxuICBjb25zdCBmaXJzdFNwbGl0ID0gZHluYW1pY1BhdGgubWF0Y2goL1xcLyg6fFxcWyhcXFtcXC5cXC5cXC4pPykvKTtcbiAgY29uc3QgW2ZpcnN0U2VnbWVudF0gPSBkeW5hbWljUGF0aC5zcGxpdCgvXFwvWzpbXS8pO1xuXG4gIGlmIChmaXJzdFNwbGl0ICYmIGZpcnN0U3BsaXRbMF0gPT09IFwiL1tbLi4uXCIpIHtcbiAgICAvLyBJZiB0aGUgZmlyc3RTcGxpdCBpcyB0aGUgb3B0aW9uYWwgY2F0Y2gtYWxsLFxuICAgIC8vIGFwcGVuZCB0aGUgd2lsZGNhcmQgZGlyZWN0bHkgKHdpdGhvdXQgYSBzbGFzaClcbiAgICByZXR1cm4gKGZpcnN0U2VnbWVudCB8fCBcIi9cIikgKyBcIipcIjtcbiAgfVxuICAvLyBFbnN1cmUgdGhpcyBpcyBwb3NpeCBwYXRoIGFzIENsb3VkRnJvbnQgbmVlZHMgZm9yd2FyZCBzbGFzaCBpbiBpbnZhbGlkYXRpb25cbiAgcmV0dXJuIHBhdGgucG9zaXguam9pbihmaXJzdFNlZ21lbnQgfHwgXCIvXCIsIFwiKlwiKTtcbn07XG5cbmV4cG9ydCBjb25zdCByZWFkSW52YWxpZGF0aW9uUGF0aHNGcm9tTWFuaWZlc3QgPSAoXG4gIG1hbmlmZXN0OiBPcmlnaW5SZXF1ZXN0RGVmYXVsdEhhbmRsZXJNYW5pZmVzdFxuKTogc3RyaW5nW10gPT4ge1xuICByZXR1cm4gW1xuICAgIC4uLk9iamVjdC5rZXlzKG1hbmlmZXN0LnBhZ2VzLmh0bWwuZHluYW1pYykubWFwKFxuICAgICAgZHluYW1pY1BhdGhUb0ludmFsaWRhdGlvblBhdGhcbiAgICApLFxuICAgIC4uLk9iamVjdC5rZXlzKG1hbmlmZXN0LnBhZ2VzLmh0bWwubm9uRHluYW1pYyksXG4gICAgLi4uT2JqZWN0LmtleXMobWFuaWZlc3QucGFnZXMuc3NyLmR5bmFtaWMpLm1hcChcbiAgICAgIGR5bmFtaWNQYXRoVG9JbnZhbGlkYXRpb25QYXRoXG4gICAgKSxcbiAgICAuLi5PYmplY3Qua2V5cyhtYW5pZmVzdC5wYWdlcy5zc3Iubm9uRHluYW1pYyksXG4gICAgLi4uT2JqZWN0LmtleXMobWFuaWZlc3QucGFnZXMuc3NnPy5keW5hbWljIHx8IHt9KS5tYXAoXG4gICAgICBkeW5hbWljUGF0aFRvSW52YWxpZGF0aW9uUGF0aFxuICAgICksXG4gICAgLi4uT2JqZWN0LmtleXMobWFuaWZlc3QucGFnZXMuc3NnPy5ub25EeW5hbWljIHx8IHt9KVxuICBdO1xufTtcbiJdfQ==
