"use strict";
var __importDefault =
  (this && this.__importDefault) ||
  function (mod) {
    return mod && mod.__esModule ? mod : { default: mod };
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.readAssetsDirectory = void 0;
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const pathToPosix_1 = __importDefault(require("./pathToPosix"));
const IMMUTABLE_CACHE_CONTROL_HEADER = "public, max-age=31536000, immutable";
const SERVER_CACHE_CONTROL_HEADER =
  "public, max-age=0, s-maxage=2678400, must-revalidate";
const DEFAULT_PUBLIC_DIR_CACHE_CONTROL =
  "public, max-age=31536000, must-revalidate";
const filterNonExistentPathKeys = (config) => {
  return Object.keys(config).reduce(
    (newConfig, nextConfigKey) =>
      Object.assign(
        Object.assign({}, newConfig),
        fs_extra_1.default.pathExistsSync(config[nextConfigKey].path)
          ? { [nextConfigKey]: config[nextConfigKey] }
          : {}
      ),
    {}
  );
};
const readAssetsDirectory = (options) => {
  const { assetsDirectory } = options;
  // Ensure these are posix paths so they are compatible with AWS S3
  const publicFiles = pathToPosix_1.default(
    path_1.default.join(assetsDirectory, "public")
  );
  const staticFiles = pathToPosix_1.default(
    path_1.default.join(assetsDirectory, "static")
  );
  const staticPages = pathToPosix_1.default(
    path_1.default.join(assetsDirectory, "static-pages")
  );
  const nextData = pathToPosix_1.default(
    path_1.default.join(assetsDirectory, "_next", "data")
  );
  const nextStatic = pathToPosix_1.default(
    path_1.default.join(assetsDirectory, "_next", "static")
  );
  return filterNonExistentPathKeys({
    publicFiles: {
      path: publicFiles,
      cacheControl: DEFAULT_PUBLIC_DIR_CACHE_CONTROL,
    },
    staticFiles: {
      path: staticFiles,
      cacheControl: DEFAULT_PUBLIC_DIR_CACHE_CONTROL,
    },
    staticPages: {
      path: staticPages,
      cacheControl: SERVER_CACHE_CONTROL_HEADER,
    },
    nextData: { path: nextData, cacheControl: SERVER_CACHE_CONTROL_HEADER },
    nextStatic: {
      path: nextStatic,
      cacheControl: IMMUTABLE_CACHE_CONTROL_HEADER,
    },
  });
};
exports.readAssetsDirectory = readAssetsDirectory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZEFzc2V0c0RpcmVjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlsL25leHRqcy9yZWFkQXNzZXRzRGlyZWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLGdEQUF3QjtBQUN4Qix3REFBMEI7QUFDMUIsZ0VBQXdDO0FBRXhDLE1BQU0sOEJBQThCLEdBQUcscUNBQXFDLENBQUM7QUFFN0UsTUFBTSwyQkFBMkIsR0FDL0Isc0RBQXNELENBQUM7QUFFekQsTUFBTSxnQ0FBZ0MsR0FDcEMsMkNBQTJDLENBQUM7QUFVOUMsTUFBTSx5QkFBeUIsR0FBRyxDQUFDLE1BQW1CLEVBQUUsRUFBRTtJQUN4RCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsTUFBTSxDQUMvQixDQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUUsRUFBRSxDQUFDLGlDQUN6QixTQUFTLEdBQ1QsQ0FBQyxrQkFBRSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQy9DLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQzVDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFDUCxFQUNGLEVBQWlCLENBQ2xCLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLG1CQUFtQixHQUFHLENBQUMsT0FFNUIsRUFBZSxFQUFFO0lBQ2hCLE1BQU0sRUFBRSxlQUFlLEVBQUUsR0FBRyxPQUFPLENBQUM7SUFDcEMsa0VBQWtFO0lBQ2xFLE1BQU0sV0FBVyxHQUFHLHFCQUFXLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUN0RSxNQUFNLFdBQVcsR0FBRyxxQkFBVyxDQUFDLGNBQUksQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDdEUsTUFBTSxXQUFXLEdBQUcscUJBQVcsQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQyxDQUFDO0lBQzVFLE1BQU0sUUFBUSxHQUFHLHFCQUFXLENBQUMsY0FBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUUsTUFBTSxVQUFVLEdBQUcscUJBQVcsQ0FBQyxjQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUU5RSxPQUFPLHlCQUF5QixDQUFDO1FBQy9CLFdBQVcsRUFBRTtZQUNYLElBQUksRUFBRSxXQUFXO1lBQ2pCLFlBQVksRUFBRSxnQ0FBZ0M7U0FDL0M7UUFDRCxXQUFXLEVBQUU7WUFDWCxJQUFJLEVBQUUsV0FBVztZQUNqQixZQUFZLEVBQUUsZ0NBQWdDO1NBQy9DO1FBQ0QsV0FBVyxFQUFFO1lBQ1gsSUFBSSxFQUFFLFdBQVc7WUFDakIsWUFBWSxFQUFFLDJCQUEyQjtTQUMxQztRQUNELFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsWUFBWSxFQUFFLDJCQUEyQixFQUFFO1FBQ3ZFLFVBQVUsRUFBRTtZQUNWLElBQUksRUFBRSxVQUFVO1lBQ2hCLFlBQVksRUFBRSw4QkFBOEI7U0FDN0M7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDLENBQUM7QUFFTyxrREFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IGZzIGZyb20gXCJmcy1leHRyYVwiO1xuaW1wb3J0IHBhdGhUb1Bvc2l4IGZyb20gXCIuL3BhdGhUb1Bvc2l4XCI7XG5cbmNvbnN0IElNTVVUQUJMRV9DQUNIRV9DT05UUk9MX0hFQURFUiA9IFwicHVibGljLCBtYXgtYWdlPTMxNTM2MDAwLCBpbW11dGFibGVcIjtcblxuY29uc3QgU0VSVkVSX0NBQ0hFX0NPTlRST0xfSEVBREVSID1cbiAgXCJwdWJsaWMsIG1heC1hZ2U9MCwgcy1tYXhhZ2U9MjY3ODQwMCwgbXVzdC1yZXZhbGlkYXRlXCI7XG5cbmNvbnN0IERFRkFVTFRfUFVCTElDX0RJUl9DQUNIRV9DT05UUk9MID1cbiAgXCJwdWJsaWMsIG1heC1hZ2U9MzE1MzYwMDAsIG11c3QtcmV2YWxpZGF0ZVwiO1xuXG50eXBlIENhY2hlQ29uZmlnID0gUmVjb3JkPFxuICBzdHJpbmcsXG4gIHtcbiAgICBjYWNoZUNvbnRyb2w6IHN0cmluZztcbiAgICBwYXRoOiBzdHJpbmc7XG4gIH1cbj47XG5cbmNvbnN0IGZpbHRlck5vbkV4aXN0ZW50UGF0aEtleXMgPSAoY29uZmlnOiBDYWNoZUNvbmZpZykgPT4ge1xuICByZXR1cm4gT2JqZWN0LmtleXMoY29uZmlnKS5yZWR1Y2UoXG4gICAgKG5ld0NvbmZpZywgbmV4dENvbmZpZ0tleSkgPT4gKHtcbiAgICAgIC4uLm5ld0NvbmZpZyxcbiAgICAgIC4uLihmcy5wYXRoRXhpc3RzU3luYyhjb25maWdbbmV4dENvbmZpZ0tleV0ucGF0aClcbiAgICAgICAgPyB7IFtuZXh0Q29uZmlnS2V5XTogY29uZmlnW25leHRDb25maWdLZXldIH1cbiAgICAgICAgOiB7fSlcbiAgICB9KSxcbiAgICB7fSBhcyBDYWNoZUNvbmZpZ1xuICApO1xufTtcblxuY29uc3QgcmVhZEFzc2V0c0RpcmVjdG9yeSA9IChvcHRpb25zOiB7XG4gIGFzc2V0c0RpcmVjdG9yeTogc3RyaW5nO1xufSk6IENhY2hlQ29uZmlnID0+IHtcbiAgY29uc3QgeyBhc3NldHNEaXJlY3RvcnkgfSA9IG9wdGlvbnM7XG4gIC8vIEVuc3VyZSB0aGVzZSBhcmUgcG9zaXggcGF0aHMgc28gdGhleSBhcmUgY29tcGF0aWJsZSB3aXRoIEFXUyBTM1xuICBjb25zdCBwdWJsaWNGaWxlcyA9IHBhdGhUb1Bvc2l4KHBhdGguam9pbihhc3NldHNEaXJlY3RvcnksIFwicHVibGljXCIpKTtcbiAgY29uc3Qgc3RhdGljRmlsZXMgPSBwYXRoVG9Qb3NpeChwYXRoLmpvaW4oYXNzZXRzRGlyZWN0b3J5LCBcInN0YXRpY1wiKSk7XG4gIGNvbnN0IHN0YXRpY1BhZ2VzID0gcGF0aFRvUG9zaXgocGF0aC5qb2luKGFzc2V0c0RpcmVjdG9yeSwgXCJzdGF0aWMtcGFnZXNcIikpO1xuICBjb25zdCBuZXh0RGF0YSA9IHBhdGhUb1Bvc2l4KHBhdGguam9pbihhc3NldHNEaXJlY3RvcnksIFwiX25leHRcIiwgXCJkYXRhXCIpKTtcbiAgY29uc3QgbmV4dFN0YXRpYyA9IHBhdGhUb1Bvc2l4KHBhdGguam9pbihhc3NldHNEaXJlY3RvcnksIFwiX25leHRcIiwgXCJzdGF0aWNcIikpO1xuXG4gIHJldHVybiBmaWx0ZXJOb25FeGlzdGVudFBhdGhLZXlzKHtcbiAgICBwdWJsaWNGaWxlczoge1xuICAgICAgcGF0aDogcHVibGljRmlsZXMsXG4gICAgICBjYWNoZUNvbnRyb2w6IERFRkFVTFRfUFVCTElDX0RJUl9DQUNIRV9DT05UUk9MXG4gICAgfSxcbiAgICBzdGF0aWNGaWxlczoge1xuICAgICAgcGF0aDogc3RhdGljRmlsZXMsXG4gICAgICBjYWNoZUNvbnRyb2w6IERFRkFVTFRfUFVCTElDX0RJUl9DQUNIRV9DT05UUk9MXG4gICAgfSxcbiAgICBzdGF0aWNQYWdlczoge1xuICAgICAgcGF0aDogc3RhdGljUGFnZXMsXG4gICAgICBjYWNoZUNvbnRyb2w6IFNFUlZFUl9DQUNIRV9DT05UUk9MX0hFQURFUlxuICAgIH0sXG4gICAgbmV4dERhdGE6IHsgcGF0aDogbmV4dERhdGEsIGNhY2hlQ29udHJvbDogU0VSVkVSX0NBQ0hFX0NPTlRST0xfSEVBREVSIH0sXG4gICAgbmV4dFN0YXRpYzoge1xuICAgICAgcGF0aDogbmV4dFN0YXRpYyxcbiAgICAgIGNhY2hlQ29udHJvbDogSU1NVVRBQkxFX0NBQ0hFX0NPTlRST0xfSEVBREVSXG4gICAgfVxuICB9KTtcbn07XG5cbmV4cG9ydCB7IHJlYWRBc3NldHNEaXJlY3RvcnkgfTtcbiJdfQ==
