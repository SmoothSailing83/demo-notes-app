"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupLogGroupName = exports.buildAccessLogData = void 0;
const logs = __importStar(require("@aws-cdk/aws-logs"));
const apig = __importStar(require("@aws-cdk/aws-apigateway"));
function buildAccessLogData(scope, accessLog) {
    if (accessLog === false) {
        return;
    }
    // note: Access log configuration is not supported by L2 constructs as of CDK v1.85.0. We
    //       need to define it at L1 construct level.
    // create log group
    let logGroup;
    let destination;
    if (accessLog && accessLog.destinationArn) {
        // note: do not set "LogGroupLogDestination" as "logGroup" because we only
        //       want to set "logGroup" if it is newly created. If we decide to
        //       change this behavior at a later date, make sure we change it for
        //       both v1 and v2 API constructs.
        const destinationArn = accessLog
            .destinationArn;
        const destinationLogGroup = logs.LogGroup.fromLogGroupArn(scope, "LogGroup", destinationArn);
        destination = new apig.LogGroupLogDestination(destinationLogGroup);
    }
    else {
        const retention = (accessLog && accessLog.retention) || "INFINITE";
        const retentionValue = logs.RetentionDays[retention];
        // validate retention
        if (!retentionValue) {
            throw new Error(`Invalid access log retention value "${retention}".`);
        }
        logGroup = new logs.LogGroup(scope, "LogGroup", {
            retention: retentionValue,
        });
        destination = new apig.LogGroupLogDestination(logGroup);
    }
    // get log format
    let format;
    if (accessLog && accessLog.format) {
        format = accessLog.format;
    }
    else if (typeof accessLog === "string") {
        format = accessLog;
    }
    else {
        format =
            "{" +
                [
                    // request info
                    `"requestTime":"$context.requestTime"`,
                    `"requestId":"$context.requestId"`,
                    `"httpMethod":"$context.httpMethod"`,
                    `"path":"$context.path"`,
                    `"resourcePath":"$context.resourcePath"`,
                    `"status":$context.status`,
                    `"responseLatency":$context.responseLatency`,
                    `"xrayTraceId":"$context.xrayTraceId"`,
                    // integration info
                    `"integrationRequestId":"$context.integration.requestId"`,
                    `"functionResponseStatus":"$context.integration.status"`,
                    `"integrationLatency":"$context.integration.latency"`,
                    `"integrationServiceStatus":"$context.integration.integrationStatus"`,
                    // caller info
                    `"ip":"$context.identity.sourceIp"`,
                    `"userAgent":"$context.identity.userAgent"`,
                    `"principalId":"$context.authorizer.principalId"`,
                ].join(",") +
                "}";
    }
    const accessLogData = {
        logGroup,
        format: apig.AccessLogFormat.custom(format),
        destination,
    };
    return accessLogData;
}
exports.buildAccessLogData = buildAccessLogData;
function cleanupLogGroupName(str) {
    return str.replace(/[^.\-_/#A-Za-z0-9]/g, "");
}
exports.cleanupLogGroupName = cleanupLogGroupName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpR2F0ZXdheVYxQWNjZXNzTG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvYXBpR2F0ZXdheVYxQWNjZXNzTG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFDQSx3REFBMEM7QUFDMUMsOERBQWdEO0FBWWhELFNBQWdCLGtCQUFrQixDQUNoQyxLQUFvQixFQUNwQixTQUF3RDtJQUV4RCxJQUFJLFNBQVMsS0FBSyxLQUFLLEVBQUU7UUFDdkIsT0FBTztLQUNSO0lBRUQseUZBQXlGO0lBQ3pGLGlEQUFpRDtJQUVqRCxtQkFBbUI7SUFDbkIsSUFBSSxRQUFRLENBQUM7SUFDYixJQUFJLFdBQVcsQ0FBQztJQUNoQixJQUFJLFNBQVMsSUFBSyxTQUE0QixDQUFDLGNBQWMsRUFBRTtRQUM3RCwwRUFBMEU7UUFDMUUsdUVBQXVFO1FBQ3ZFLHlFQUF5RTtRQUN6RSx1Q0FBdUM7UUFDdkMsTUFBTSxjQUFjLEdBQUksU0FBNEI7YUFDakQsY0FBd0IsQ0FBQztRQUM1QixNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUN2RCxLQUFLLEVBQ0wsVUFBVSxFQUNWLGNBQWMsQ0FDZixDQUFDO1FBQ0YsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLENBQUM7S0FDcEU7U0FBTTtRQUNMLE1BQU0sU0FBUyxHQUNiLENBQUMsU0FBUyxJQUFLLFNBQTRCLENBQUMsU0FBUyxDQUFDLElBQUksVUFBVSxDQUFDO1FBQ3ZFLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFckQscUJBQXFCO1FBQ3JCLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsTUFBTSxJQUFJLEtBQUssQ0FBQyx1Q0FBdUMsU0FBUyxJQUFJLENBQUMsQ0FBQztTQUN2RTtRQUVELFFBQVEsR0FBRyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRTtZQUM5QyxTQUFTLEVBQUUsY0FBYztTQUMxQixDQUFDLENBQUM7UUFDSCxXQUFXLEdBQUcsSUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLENBQUM7S0FDekQ7SUFFRCxpQkFBaUI7SUFDakIsSUFBSSxNQUFjLENBQUM7SUFDbkIsSUFBSSxTQUFTLElBQUssU0FBNEIsQ0FBQyxNQUFNLEVBQUU7UUFDckQsTUFBTSxHQUFJLFNBQTRCLENBQUMsTUFBZ0IsQ0FBQztLQUN6RDtTQUFNLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1FBQ3hDLE1BQU0sR0FBRyxTQUFTLENBQUM7S0FDcEI7U0FBTTtRQUNMLE1BQU07WUFDSixHQUFHO2dCQUNIO29CQUNFLGVBQWU7b0JBQ2Ysc0NBQXNDO29CQUN0QyxrQ0FBa0M7b0JBQ2xDLG9DQUFvQztvQkFDcEMsd0JBQXdCO29CQUN4Qix3Q0FBd0M7b0JBQ3hDLDBCQUEwQjtvQkFDMUIsNENBQTRDO29CQUM1QyxzQ0FBc0M7b0JBQ3RDLG1CQUFtQjtvQkFDbkIseURBQXlEO29CQUN6RCx3REFBd0Q7b0JBQ3hELHFEQUFxRDtvQkFDckQscUVBQXFFO29CQUNyRSxjQUFjO29CQUNkLG1DQUFtQztvQkFDbkMsMkNBQTJDO29CQUMzQyxpREFBaUQ7aUJBQ2xELENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztnQkFDWCxHQUFHLENBQUM7S0FDUDtJQUVELE1BQU0sYUFBYSxHQUFHO1FBQ3BCLFFBQVE7UUFDUixNQUFNLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzNDLFdBQVc7S0FDWixDQUFDO0lBRUYsT0FBTyxhQUFhLENBQUM7QUFDdkIsQ0FBQztBQWxGRCxnREFrRkM7QUFFRCxTQUFnQixtQkFBbUIsQ0FBQyxHQUFXO0lBQzdDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUMsQ0FBQztBQUNoRCxDQUFDO0FBRkQsa0RBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBjZGsgZnJvbSBcIkBhd3MtY2RrL2NvcmVcIjtcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSBcIkBhd3MtY2RrL2F3cy1sb2dzXCI7XG5pbXBvcnQgKiBhcyBhcGlnIGZyb20gXCJAYXdzLWNkay9hd3MtYXBpZ2F0ZXdheVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc0xvZ1Byb3BzIGV4dGVuZHMgYXBpZy5DZm5TdGFnZS5BY2Nlc3NMb2dTZXR0aW5nUHJvcGVydHkge1xuICByZXRlbnRpb24/OiBrZXlvZiB0eXBlb2YgbG9ncy5SZXRlbnRpb25EYXlzO1xufVxuXG5leHBvcnQgdHlwZSBBY2Nlc3NMb2dEYXRhID0ge1xuICBsb2dHcm91cDogbG9ncy5Mb2dHcm91cCB8IHVuZGVmaW5lZDtcbiAgZm9ybWF0OiBhcGlnLkFjY2Vzc0xvZ0Zvcm1hdDtcbiAgZGVzdGluYXRpb246IGFwaWcuTG9nR3JvdXBMb2dEZXN0aW5hdGlvbjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFjY2Vzc0xvZ0RhdGEoXG4gIHNjb3BlOiBjZGsuQ29uc3RydWN0LFxuICBhY2Nlc3NMb2c6IGJvb2xlYW4gfCBzdHJpbmcgfCBBY2Nlc3NMb2dQcm9wcyB8IHVuZGVmaW5lZFxuKTogQWNjZXNzTG9nRGF0YSB8IHVuZGVmaW5lZCB7XG4gIGlmIChhY2Nlc3NMb2cgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gbm90ZTogQWNjZXNzIGxvZyBjb25maWd1cmF0aW9uIGlzIG5vdCBzdXBwb3J0ZWQgYnkgTDIgY29uc3RydWN0cyBhcyBvZiBDREsgdjEuODUuMC4gV2VcbiAgLy8gICAgICAgbmVlZCB0byBkZWZpbmUgaXQgYXQgTDEgY29uc3RydWN0IGxldmVsLlxuXG4gIC8vIGNyZWF0ZSBsb2cgZ3JvdXBcbiAgbGV0IGxvZ0dyb3VwO1xuICBsZXQgZGVzdGluYXRpb247XG4gIGlmIChhY2Nlc3NMb2cgJiYgKGFjY2Vzc0xvZyBhcyBBY2Nlc3NMb2dQcm9wcykuZGVzdGluYXRpb25Bcm4pIHtcbiAgICAvLyBub3RlOiBkbyBub3Qgc2V0IFwiTG9nR3JvdXBMb2dEZXN0aW5hdGlvblwiIGFzIFwibG9nR3JvdXBcIiBiZWNhdXNlIHdlIG9ubHlcbiAgICAvLyAgICAgICB3YW50IHRvIHNldCBcImxvZ0dyb3VwXCIgaWYgaXQgaXMgbmV3bHkgY3JlYXRlZC4gSWYgd2UgZGVjaWRlIHRvXG4gICAgLy8gICAgICAgY2hhbmdlIHRoaXMgYmVoYXZpb3IgYXQgYSBsYXRlciBkYXRlLCBtYWtlIHN1cmUgd2UgY2hhbmdlIGl0IGZvclxuICAgIC8vICAgICAgIGJvdGggdjEgYW5kIHYyIEFQSSBjb25zdHJ1Y3RzLlxuICAgIGNvbnN0IGRlc3RpbmF0aW9uQXJuID0gKGFjY2Vzc0xvZyBhcyBBY2Nlc3NMb2dQcm9wcylcbiAgICAgIC5kZXN0aW5hdGlvbkFybiBhcyBzdHJpbmc7XG4gICAgY29uc3QgZGVzdGluYXRpb25Mb2dHcm91cCA9IGxvZ3MuTG9nR3JvdXAuZnJvbUxvZ0dyb3VwQXJuKFxuICAgICAgc2NvcGUsXG4gICAgICBcIkxvZ0dyb3VwXCIsXG4gICAgICBkZXN0aW5hdGlvbkFyblxuICAgICk7XG4gICAgZGVzdGluYXRpb24gPSBuZXcgYXBpZy5Mb2dHcm91cExvZ0Rlc3RpbmF0aW9uKGRlc3RpbmF0aW9uTG9nR3JvdXApO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IHJldGVudGlvbiA9XG4gICAgICAoYWNjZXNzTG9nICYmIChhY2Nlc3NMb2cgYXMgQWNjZXNzTG9nUHJvcHMpLnJldGVudGlvbikgfHwgXCJJTkZJTklURVwiO1xuICAgIGNvbnN0IHJldGVudGlvblZhbHVlID0gbG9ncy5SZXRlbnRpb25EYXlzW3JldGVudGlvbl07XG5cbiAgICAvLyB2YWxpZGF0ZSByZXRlbnRpb25cbiAgICBpZiAoIXJldGVudGlvblZhbHVlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgYWNjZXNzIGxvZyByZXRlbnRpb24gdmFsdWUgXCIke3JldGVudGlvbn1cIi5gKTtcbiAgICB9XG5cbiAgICBsb2dHcm91cCA9IG5ldyBsb2dzLkxvZ0dyb3VwKHNjb3BlLCBcIkxvZ0dyb3VwXCIsIHtcbiAgICAgIHJldGVudGlvbjogcmV0ZW50aW9uVmFsdWUsXG4gICAgfSk7XG4gICAgZGVzdGluYXRpb24gPSBuZXcgYXBpZy5Mb2dHcm91cExvZ0Rlc3RpbmF0aW9uKGxvZ0dyb3VwKTtcbiAgfVxuXG4gIC8vIGdldCBsb2cgZm9ybWF0XG4gIGxldCBmb3JtYXQ6IHN0cmluZztcbiAgaWYgKGFjY2Vzc0xvZyAmJiAoYWNjZXNzTG9nIGFzIEFjY2Vzc0xvZ1Byb3BzKS5mb3JtYXQpIHtcbiAgICBmb3JtYXQgPSAoYWNjZXNzTG9nIGFzIEFjY2Vzc0xvZ1Byb3BzKS5mb3JtYXQgYXMgc3RyaW5nO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBhY2Nlc3NMb2cgPT09IFwic3RyaW5nXCIpIHtcbiAgICBmb3JtYXQgPSBhY2Nlc3NMb2c7XG4gIH0gZWxzZSB7XG4gICAgZm9ybWF0ID1cbiAgICAgIFwie1wiICtcbiAgICAgIFtcbiAgICAgICAgLy8gcmVxdWVzdCBpbmZvXG4gICAgICAgIGBcInJlcXVlc3RUaW1lXCI6XCIkY29udGV4dC5yZXF1ZXN0VGltZVwiYCxcbiAgICAgICAgYFwicmVxdWVzdElkXCI6XCIkY29udGV4dC5yZXF1ZXN0SWRcImAsXG4gICAgICAgIGBcImh0dHBNZXRob2RcIjpcIiRjb250ZXh0Lmh0dHBNZXRob2RcImAsXG4gICAgICAgIGBcInBhdGhcIjpcIiRjb250ZXh0LnBhdGhcImAsXG4gICAgICAgIGBcInJlc291cmNlUGF0aFwiOlwiJGNvbnRleHQucmVzb3VyY2VQYXRoXCJgLFxuICAgICAgICBgXCJzdGF0dXNcIjokY29udGV4dC5zdGF0dXNgLCAvLyBpbnRlZ2VyIHZhbHVlLCBkbyBub3Qgd3JhcCBpbiBxdW90ZXNcbiAgICAgICAgYFwicmVzcG9uc2VMYXRlbmN5XCI6JGNvbnRleHQucmVzcG9uc2VMYXRlbmN5YCwgLy8gaW50ZWdlciB2YWx1ZSwgZG8gbm90IHdyYXAgaW4gcXVvdGVzXG4gICAgICAgIGBcInhyYXlUcmFjZUlkXCI6XCIkY29udGV4dC54cmF5VHJhY2VJZFwiYCxcbiAgICAgICAgLy8gaW50ZWdyYXRpb24gaW5mb1xuICAgICAgICBgXCJpbnRlZ3JhdGlvblJlcXVlc3RJZFwiOlwiJGNvbnRleHQuaW50ZWdyYXRpb24ucmVxdWVzdElkXCJgLFxuICAgICAgICBgXCJmdW5jdGlvblJlc3BvbnNlU3RhdHVzXCI6XCIkY29udGV4dC5pbnRlZ3JhdGlvbi5zdGF0dXNcImAsXG4gICAgICAgIGBcImludGVncmF0aW9uTGF0ZW5jeVwiOlwiJGNvbnRleHQuaW50ZWdyYXRpb24ubGF0ZW5jeVwiYCxcbiAgICAgICAgYFwiaW50ZWdyYXRpb25TZXJ2aWNlU3RhdHVzXCI6XCIkY29udGV4dC5pbnRlZ3JhdGlvbi5pbnRlZ3JhdGlvblN0YXR1c1wiYCxcbiAgICAgICAgLy8gY2FsbGVyIGluZm9cbiAgICAgICAgYFwiaXBcIjpcIiRjb250ZXh0LmlkZW50aXR5LnNvdXJjZUlwXCJgLFxuICAgICAgICBgXCJ1c2VyQWdlbnRcIjpcIiRjb250ZXh0LmlkZW50aXR5LnVzZXJBZ2VudFwiYCxcbiAgICAgICAgYFwicHJpbmNpcGFsSWRcIjpcIiRjb250ZXh0LmF1dGhvcml6ZXIucHJpbmNpcGFsSWRcImAsXG4gICAgICBdLmpvaW4oXCIsXCIpICtcbiAgICAgIFwifVwiO1xuICB9XG5cbiAgY29uc3QgYWNjZXNzTG9nRGF0YSA9IHtcbiAgICBsb2dHcm91cCxcbiAgICBmb3JtYXQ6IGFwaWcuQWNjZXNzTG9nRm9ybWF0LmN1c3RvbShmb3JtYXQpLFxuICAgIGRlc3RpbmF0aW9uLFxuICB9O1xuXG4gIHJldHVybiBhY2Nlc3NMb2dEYXRhO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYW51cExvZ0dyb3VwTmFtZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvW14uXFwtXy8jQS1aYS16MC05XS9nLCBcIlwiKTtcbn1cbiJdfQ==