"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const AWS = __importStar(require("aws-sdk"));
AWS.config.logger = console;
const util_1 = require("./util");
const cfnResponse = __importStar(require("./cfn-response"));
const s3 = new AWS.S3({ region: "us-east-1" });
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)("onEventHandler", cfnRequest);
        // Get bucket name
        const bucketName = cfnRequest.RequestType === "Create"
            ? generateBucketName(cfnRequest.ResourceProperties.BucketNamePrefix)
            : cfnRequest.PhysicalResourceId;
        // Process request
        let responseData;
        switch (cfnRequest.RequestType) {
            case "Create":
                yield createBucket(bucketName);
                responseData = {
                    BucketName: bucketName,
                };
                break;
            case "Update":
                break;
            case "Delete":
                yield emptyBucket(bucketName);
                yield deleteBucket(bucketName);
                break;
            default:
                throw new Error("Unsupported request type");
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId: bucketName, Data: responseData }));
    });
}
function createBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`createBucket() called with bucketName`, bucketName);
        const resp = yield s3
            .createBucket({
            Bucket: bucketName,
        })
            .promise();
        (0, util_1.log)(`response`, resp);
    });
}
function deleteBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`deleteBucket() called with bucketName`, bucketName);
        const resp = yield s3
            .deleteBucket({
            Bucket: bucketName,
        })
            .promise();
        (0, util_1.log)(`response`, resp);
    });
}
function generateBucketName(prefix) {
    const MAX_NAME_LENGTH = 63;
    const length = 20;
    const characters = "abcdefghijklmnopqrstuvwxyz";
    const charactersLength = characters.length;
    let result = `${prefix
        .toLowerCase()
        .slice(0, MAX_NAME_LENGTH - length - 1)}-`;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
////////////////
// @aws-cdk/aws-s3/lib/auto-delete-objectshandler
////////////////
function emptyBucket(bucketName) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const listedObjects = yield s3
            .listObjectVersions({ Bucket: bucketName })
            .promise();
        const contents = [
            ...((_a = listedObjects.Versions) !== null && _a !== void 0 ? _a : []),
            ...((_b = listedObjects.DeleteMarkers) !== null && _b !== void 0 ? _b : []),
        ];
        if (contents.length === 0) {
            return;
        }
        const records = contents.map((record) => ({
            Key: record.Key,
            VersionId: record.VersionId,
        }));
        yield s3
            .deleteObjects({ Bucket: bucketName, Delete: { Objects: records } })
            .promise();
        if (listedObjects === null || listedObjects === void 0 ? void 0 : listedObjects.IsTruncated) {
            yield emptyBucket(bucketName);
        }
    });
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMtYnVja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25leHRqcy1zaXRlL2N1c3RvbS1yZXNvdXJjZS9zMy1idWNrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSw2Q0FBK0I7QUFDL0IsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDO0FBRTVCLGlDQUE2QjtBQUM3Qiw0REFBOEM7QUFDOUMsTUFBTSxFQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFNL0MsU0FBZSxPQUFPLENBQ3BCLFVBQXVEOztRQUV2RCxJQUFBLFVBQUcsRUFBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUVsQyxrQkFBa0I7UUFDbEIsTUFBTSxVQUFVLEdBQ2QsVUFBVSxDQUFDLFdBQVcsS0FBSyxRQUFRO1lBQ2pDLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsZ0JBQWdCLENBQUM7WUFDcEUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQztRQUVwQyxrQkFBa0I7UUFDbEIsSUFBSSxZQUFZLENBQUM7UUFDakIsUUFBUSxVQUFVLENBQUMsV0FBVyxFQUFFO1lBQzlCLEtBQUssUUFBUTtnQkFDWCxNQUFNLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDL0IsWUFBWSxHQUFHO29CQUNiLFVBQVUsRUFBRSxVQUFVO2lCQUN2QixDQUFDO2dCQUNGLE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQ1gsTUFBTTtZQUNSLEtBQUssUUFBUTtnQkFDWCxNQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztnQkFDOUIsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9CLE1BQU07WUFDUjtnQkFDRSxNQUFNLElBQUksS0FB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QixNQUFNLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMvQjs7Q0FDRjtBQTFHRCxpQkFBUztJQUNQLE9BQU8sRUFBRSxXQUFXLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztDQUMxQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgQVdTIGZyb20gXCJhd3Mtc2RrXCI7XG5BV1MuY29uZmlnLmxvZ2dlciA9IGNvbnNvbGU7XG5cbmltcG9ydCB7IGxvZyB9IGZyb20gXCIuL3V0aWxcIjtcbmltcG9ydCAqIGFzIGNmblJlc3BvbnNlIGZyb20gXCIuL2Nmbi1yZXNwb25zZVwiO1xuY29uc3QgczMgPSBuZXcgQVdTLlMzKHsgcmVnaW9uOiBcInVzLWVhc3QtMVwiIH0pO1xuXG5leHBvcnQgPSB7XG4gIGhhbmRsZXI6IGNmblJlc3BvbnNlLnNhZmVIYW5kbGVyKGhhbmRsZXIpLFxufTtcblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlcihcbiAgY2ZuUmVxdWVzdDogQVdTTGFtYmRhLkNsb3VkRm9ybWF0aW9uQ3VzdG9tUmVzb3VyY2VFdmVudFxuKSB7XG4gIGxvZyhcIm9uRXZlbnRIYW5kbGVyXCIsIGNmblJlcXVlc3QpO1xuXG4gIC8vIEdldCBidWNrZXQgbmFtZVxuICBjb25zdCBidWNrZXROYW1lID1cbiAgICBjZm5SZXF1ZXN0LlJlcXVlc3RUeXBlID09PSBcIkNyZWF0ZVwiXG4gICAgICA/IGdlbmVyYXRlQnVja2V0TmFtZShjZm5SZXF1ZXN0LlJlc291cmNlUHJvcGVydGllcy5CdWNrZXROYW1lUHJlZml4KVxuICAgICAgOiBjZm5SZXF1ZXN0LlBoeXNpY2FsUmVzb3VyY2VJZDtcblxuICAvLyBQcm9jZXNzIHJlcXVlc3RcbiAgbGV0IHJlc3BvbnNlRGF0YTtcbiAgc3dpdGNoIChjZm5SZXF1ZXN0LlJlcXVlc3RUeXBlKSB7XG4gICAgY2FzZSBcIkNyZWF0ZVwiOlxuICAgICAgYXdhaXQgY3JlYXRlQnVja2V0KGJ1Y2tldE5hbWUpO1xuICAgICAgcmVzcG9uc2VEYXRhID0ge1xuICAgICAgICBCdWNrZXROYW1lOiBidWNrZXROYW1lLFxuICAgICAgfTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJVcGRhdGVcIjpcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgXCJEZWxldGVcIjpcbiAgICAgIGF3YWl0IGVtcHR5QnVja2V0KGJ1Y2tldE5hbWUpO1xuICAgICAgYXdhaXQgZGVsZXRlQnVja2V0KGJ1Y2tldE5hbWUpO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuc3VwcG9ydGVkIHJlcXVlc3QgdHlwZVwiKTtcbiAgfVxuXG4gIC8vIEJ1aWxkIHJlc3BvbnNlXG4gIHJldHVybiBjZm5SZXNwb25zZS5zdWJtaXRSZXNwb25zZShcIlNVQ0NFU1NcIiwge1xuICAgIC4uLmNmblJlcXVlc3QsXG4gICAgUGh5c2ljYWxSZXNvdXJjZUlkOiBidWNrZXROYW1lLFxuICAgIERhdGE6IHJlc3BvbnNlRGF0YSxcbiAgfSk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUJ1Y2tldChidWNrZXROYW1lOiBzdHJpbmcpIHtcbiAgbG9nKGBjcmVhdGVCdWNrZXQoKSBjYWxsZWQgd2l0aCBidWNrZXROYW1lYCwgYnVja2V0TmFtZSk7XG5cbiAgY29uc3QgcmVzcCA9IGF3YWl0IHMzXG4gICAgLmNyZWF0ZUJ1Y2tldCh7XG4gICAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUsXG4gICAgfSlcbiAgICAucHJvbWlzZSgpO1xuXG4gIGxvZyhgcmVzcG9uc2VgLCByZXNwKTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGVsZXRlQnVja2V0KGJ1Y2tldE5hbWU6IHN0cmluZykge1xuICBsb2coYGRlbGV0ZUJ1Y2tldCgpIGNhbGxlZCB3aXRoIGJ1Y2tldE5hbWVgLCBidWNrZXROYW1lKTtcblxuICBjb25zdCByZXNwID0gYXdhaXQgczNcbiAgICAuZGVsZXRlQnVja2V0KHtcbiAgICAgIEJ1Y2tldDogYnVja2V0TmFtZSxcbiAgICB9KVxuICAgIC5wcm9taXNlKCk7XG5cbiAgbG9nKGByZXNwb25zZWAsIHJlc3ApO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUJ1Y2tldE5hbWUocHJlZml4OiBzdHJpbmcpIHtcbiAgY29uc3QgTUFYX05BTUVfTEVOR1RIID0gNjM7XG4gIGNvbnN0IGxlbmd0aCA9IDIwO1xuICBjb25zdCBjaGFyYWN0ZXJzID0gXCJhYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5elwiO1xuICBjb25zdCBjaGFyYWN0ZXJzTGVuZ3RoID0gY2hhcmFjdGVycy5sZW5ndGg7XG4gIGxldCByZXN1bHQgPSBgJHtwcmVmaXhcbiAgICAudG9Mb3dlckNhc2UoKVxuICAgIC5zbGljZSgwLCBNQVhfTkFNRV9MRU5HVEggLSBsZW5ndGggLSAxKX0tYDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8vLy8vLy8vLy8vLy8vL1xuLy8gQGF3cy1jZGsvYXdzLXMzL2xpYi9hdXRvLWRlbGV0ZS1vYmplY3RzaGFuZGxlclxuLy8vLy8vLy8vLy8vLy8vL1xuYXN5bmMgZnVuY3Rpb24gZW1wdHlCdWNrZXQoYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gIGNvbnN0IGxpc3RlZE9iamVjdHMgPSBhd2FpdCBzM1xuICAgIC5saXN0T2JqZWN0VmVyc2lvbnMoeyBCdWNrZXQ6IGJ1Y2tldE5hbWUgfSlcbiAgICAucHJvbWlzZSgpO1xuICBjb25zdCBjb250ZW50cyA9IFtcbiAgICAuLi4obGlzdGVkT2JqZWN0cy5WZXJzaW9ucyA/PyBbXSksXG4gICAgLi4uKGxpc3RlZE9iamVjdHMuRGVsZXRlTWFya2VycyA/PyBbXSksXG4gIF07XG4gIGlmIChjb250ZW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCByZWNvcmRzID0gY29udGVudHMubWFwKChyZWNvcmQ6IGFueSkgPT4gKHtcbiAgICBLZXk6IHJlY29yZC5LZXksXG4gICAgVmVyc2lvbklkOiByZWNvcmQuVmVyc2lvbklkLFxuICB9KSk7XG4gIGF3YWl0IHMzXG4gICAgLmRlbGV0ZU9iamVjdHMoeyBCdWNrZXQ6IGJ1Y2tldE5hbWUsIERlbGV0ZTogeyBPYmplY3RzOiByZWNvcmRzIH0gfSlcbiAgICAucHJvbWlzZSgpO1xuXG4gIGlmIChsaXN0ZWRPYmplY3RzPy5Jc1RydW5jYXRlZCkge1xuICAgIGF3YWl0IGVtcHR5QnVja2V0KGJ1Y2tldE5hbWUpO1xuICB9XG59XG4iXX0=