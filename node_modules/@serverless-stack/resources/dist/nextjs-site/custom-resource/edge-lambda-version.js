"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const AWS = __importStar(require("aws-sdk"));
AWS.config.logger = console;
const util_1 = require("./util");
const cfnResponse = __importStar(require("./cfn-response"));
const lambda = new AWS.Lambda({ region: "us-east-1" });
const LIVE_ALIAS = "live";
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)("onEventHandler", cfnRequest);
        // Process request
        let PhysicalResourceId;
        let Data;
        const functionArn = cfnRequest.ResourceProperties.FunctionArn;
        const functionName = functionArn.split(":").pop();
        switch (cfnRequest.RequestType) {
            case "Create": {
                const ret = yield createVersion(functionName);
                const version = ret.Version;
                yield createAlias(functionName, version);
                PhysicalResourceId = `${functionArn}:${version}`;
                Data = { Version: version };
                break;
            }
            case "Update": {
                PhysicalResourceId = cfnRequest.PhysicalResourceId;
                Data = { Version: cfnRequest.PhysicalResourceId.split(":").pop() };
                break;
            }
            case "Delete": {
                yield deleteOldVersions(functionName);
                PhysicalResourceId = cfnRequest.PhysicalResourceId;
                break;
            }
            default:
                throw new Error("Unsupported request type");
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId,
            Data }));
    });
}
function createVersion(functionName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`createVersion() called with functionName`, functionName);
        const resp = yield lambda
            .publishVersion({
            FunctionName: functionName,
        })
            .promise();
        (0, util_1.log)(`response`, resp);
        return { Version: resp.Version };
    });
}
function createAlias(functionName, version) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`createAlias() called with functionName`, functionName, "version", version);
        let resp;
        // Update alias
        try {
            (0, util_1.log)("updateAlias");
            resp = yield lambda
                .updateAlias({
                Name: LIVE_ALIAS,
                FunctionName: functionName,
                FunctionVersion: version,
            })
                .promise();
            (0, util_1.log)("response", resp);
        }
        catch (e) {
            // If alias has not be created, create the alias
            if (e.code === "ResourceNotFoundException" &&
                e.message.startsWith("Alias not found")) {
                (0, util_1.log)("updateAlias");
                resp = yield lambda
                    .createAlias({
                    Name: LIVE_ALIAS,
                    FunctionName: functionName,
                    FunctionVersion: version,
                })
                    .promise();
                (0, util_1.log)("response", resp);
                return;
            }
            throw e;
        }
    });
}
function deleteOldVersions(functionName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`deleteOldVersions() called with functionName`, functionName);
        let resp;
        try {
            // Get LIVE_ALIAS version
            resp = yield lambda
                .getAlias({
                FunctionName: functionName,
                Name: LIVE_ALIAS,
            })
                .promise();
            (0, util_1.log)(`getAlias`, resp);
            const liveVersion = resp.FunctionVersion;
            // Get all versions
            resp = yield lambda
                .listVersionsByFunction({
                FunctionName: functionName,
                MaxItems: 50,
            })
                .promise();
            (0, util_1.log)(`listVersionsByFunction`, resp);
            const versionObjs = resp.Versions || [];
            // Remove non LIVE_ALIAS versions
            for (let i = 0, l = versionObjs.length; i < l; i++) {
                const version = versionObjs[i].Version;
                if (version === liveVersion) {
                    (0, util_1.log)("deleteVersion", version, "skipped");
                    continue;
                }
                try {
                    (0, util_1.log)("deleteVersion", version, "do");
                    resp = yield lambda
                        .deleteFunction({
                        FunctionName: functionName,
                        Qualifier: version,
                    })
                        .promise();
                    (0, util_1.log)("response", resp);
                }
                catch (e) {
                    // Supress error because a version can fail to remove if still in use.
                    (0, util_1.log)(`deleteVersion error`, e);
                }
            }
        }
        catch (e) {
            // Supress error because it is fine if a specific version fails to remove.
            // All versions will be removed upon removing the function.
            (0, util_1.log)(`deleteOldVersions error`, e);
        }
    });
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,