"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.App = void 0;
const chalk_1 = __importDefault(require("chalk"));
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const spawn = __importStar(require("cross-spawn"));
const cdk = __importStar(require("@aws-cdk/core"));
const s3 = __importStar(require("@aws-cdk/aws-s3"));
const s3perms = __importStar(require("@aws-cdk/aws-s3/lib/perms"));
const iam = __importStar(require("@aws-cdk/aws-iam"));
const child_process_1 = require("child_process");
const Stack_1 = require("./Stack");
const Construct_1 = require("./Construct");
const nodeBuilder_1 = require("./util/nodeBuilder");
const core_1 = require("@aws-cdk/core");
const appPath = process.cwd();
/**
 * Finds the path to the tsc package executable by converting the file path of:
 * /Users/spongebob/serverless-stack/node_modules/typescript/dist/index.js
 * to:
 * /Users/spongebob/serverless-stack/node_modules/.bin/tsc
 */
function getTsBinPath() {
    const pkg = "typescript";
    const filePath = require.resolve(pkg);
    const matches = filePath.match(/(^.*[/\\]node_modules)[/\\].*$/);
    if (matches === null || !matches[1]) {
        throw new Error(`There was a problem finding ${pkg}`);
    }
    return path.join(matches[1], ".bin", "tsc");
}
/**
 * Uses the current file path and the package name to figure out the path to the
 * CLI. Converts:
 * /Users/spongebob/Sites/serverless-stack/packages/resources/dist/App.js
 * to:
 * /Users/jayair/Sites/serverless-stack/packages/cli
 */
function getSstCliRootPath() {
    const filePath = __dirname;
    const packageName = "resources";
    const packagePath = filePath.slice(0, filePath.lastIndexOf(packageName) + packageName.length);
    return path.join(packagePath, "../cli");
}
function exitWithMessage(message) {
    console.error(message);
    process.exit(1);
}
class App extends cdk.App {
    constructor(deployProps = {}, props = {}) {
        super(props);
        /**
         * Is the app being deployed locally
         */
        this.local = false;
        /**
         * A list of Lambda functions in the app
         */
        this.lambdaHandlers = [];
        this.siteEnvironments = [];
        /**
         * A list of SST constructs in the app
         */
        this.constructs = [];
        this.stage = deployProps.stage || "dev";
        this.name = deployProps.name || "my-app";
        this.region = deployProps.region || "us-east-1";
        this.lint = deployProps.lint === false ? false : true;
        this.account = process.env.CDK_DEFAULT_ACCOUNT || "my-account";
        this.typeCheck = deployProps.typeCheck === false ? false : true;
        this.esbuildConfig = deployProps.esbuildConfig;
        this.buildDir = deployProps.buildDir || ".build";
        this.skipBuild = deployProps.skipBuild || false;
        this.defaultFunctionProps = [];
        this.synthCallback = deployProps.synthCallback;
        if (deployProps.debugEndpoint) {
            this.local = true;
            this.debugEndpoint = deployProps.debugEndpoint;
            this.debugBucketArn = deployProps.debugBucketArn;
            this.debugBucketName = deployProps.debugBucketName;
            this.debugStartedAt = deployProps.debugStartedAt;
            this.debugIncreaseTimeout = deployProps.debugIncreaseTimeout;
            if (deployProps.debugBridge) {
                this.debugBridge = deployProps.debugBridge;
            }
        }
    }
    get defaultRemovalPolicy() {
        return this._defaultRemovalPolicy;
    }
    logicalPrefixedName(logicalName) {
        const namePrefix = this.name === "" ? "" : `${this.name}-`;
        return `${this.stage}-${namePrefix}${logicalName}`;
    }
    setDefaultRemovalPolicy(policy) {
        this._defaultRemovalPolicy = policy;
    }
    setDefaultFunctionProps(props) {
        if (this.node.children.some((node) => node instanceof cdk.Stack))
            throw new Error("Cannot call 'setDefaultFunctionProps' after a stack has been created. Please use 'addDefaultFunctionEnv' or 'addDefaultFunctionPermissions' to add more default properties. Read more about this change here: https://docs.serverless-stack.com/constructs/App#upgrading-to-v0420");
        this.defaultFunctionProps.push(props);
    }
    addDefaultFunctionPermissions(permissions) {
        this.defaultFunctionProps.push({
            permissions,
        });
    }
    addDefaultFunctionEnv(environment) {
        this.defaultFunctionProps.push({
            environment,
        });
    }
    addDefaultFunctionLayers(layers) {
        this.defaultFunctionProps.push({
            layers,
        });
    }
    applyRemovalPolicy(current, policy) {
        if (current instanceof cdk.CfnResource)
            current.applyRemovalPolicy(policy);
        // Had to copy this in to enable deleting objects in bucket
        // https://github.com/aws/aws-cdk/blob/master/packages/%40aws-cdk/aws-s3/lib/bucket.ts#L1910
        if (current instanceof s3.Bucket &&
            !current.node.tryFindChild("AutoDeleteObjectsCustomResource")) {
            const AUTO_DELETE_OBJECTS_RESOURCE_TYPE = "Custom::S3AutoDeleteObjects";
            const provider = core_1.CustomResourceProvider.getOrCreateProvider(current, AUTO_DELETE_OBJECTS_RESOURCE_TYPE, {
                codeDirectory: path.join(require.resolve("@aws-cdk/aws-s3"), "../auto-delete-objects-handler"),
                runtime: core_1.CustomResourceProviderRuntime.NODEJS_12_X,
                description: `Lambda function for auto-deleting objects in ${current.bucketName} S3 bucket.`,
            });
            // Use a bucket policy to allow the custom resource to delete
            // objects in the bucket
            current.addToResourcePolicy(new iam.PolicyStatement({
                actions: [
                    // list objects
                    ...s3perms.BUCKET_READ_METADATA_ACTIONS,
                    ...s3perms.BUCKET_DELETE_ACTIONS, // and then delete them
                ],
                resources: [current.bucketArn, current.arnForObjects("*")],
                principals: [new iam.ArnPrincipal(provider.roleArn)],
            }));
            const customResource = new core_1.CustomResource(current, "AutoDeleteObjectsCustomResource", {
                resourceType: AUTO_DELETE_OBJECTS_RESOURCE_TYPE,
                serviceToken: provider.serviceToken,
                properties: {
                    BucketName: current.bucketName,
                },
            });
            // Ensure bucket policy is deleted AFTER the custom resource otherwise
            // we don't have permissions to list and delete in the bucket.
            // (add a `if` to make TS happy)
            if (current.policy) {
                customResource.node.addDependency(current.policy);
            }
        }
        current.node.children.forEach((resource) => this.applyRemovalPolicy(resource, policy));
    }
    registerConstructs(construct) {
        if (construct instanceof Construct_1.Construct) {
            const type = construct.constructor.name;
            const stack = Stack_1.Stack.of(construct).node.id;
            const name = construct.node.id;
            const props = construct.getConstructInfo();
            this.constructs.push({ type, stack, name, props });
        }
        else {
            construct.node.children.forEach((child) => this.registerConstructs(child));
        }
    }
    synth(options = {}) {
        // Register constructs
        this.registerConstructs(this);
        for (const child of this.node.children) {
            if (child instanceof cdk.Stack) {
                // Set removal policy
                if (this._defaultRemovalPolicy)
                    this.applyRemovalPolicy(child, this._defaultRemovalPolicy);
                // Stack names need to be parameterized with the stage name
                if (!child.stackName.startsWith(`${this.stage}-`) &&
                    !child.stackName.endsWith(`-${this.stage}`) &&
                    child.stackName.indexOf(`-${this.stage}-`) === -1) {
                    throw new Error(`Stack "${child.stackName}" is not parameterized with the stage name. The stack name needs to either start with "$stage-", end in "-$stage", or contain the stage name "-$stage-".`);
                }
            }
        }
        const cloudAssembly = super.synth(options);
        // Run lint and type check on handler input files
        // Note: do not need to run in two scenarios:
        //  1. do not need to run while debugging because the Lambda functions are
        //     replaced by stubs and have not been transpiled.
        //  2. do not need to run while running resources tests because .eslint file
        //     does not exist inside .build folder.
        //  3. do not need to run if skipBuild is true, ie. sst remove
        if (!this.local && !this.isJestTest() && !this.skipBuild) {
            this.processInputFiles();
        }
        // Run callback after synth has finished
        if (this.synthCallback) {
            this.synthCallback(this.lambdaHandlers, this.siteEnvironments, this.constructs);
        }
        return cloudAssembly;
    }
    isJestTest() {
        // Check the env var set inside test/setup-tests.js
        return process.env.JEST_RESOURCES_TESTS === "enabled";
    }
    registerLambdaHandler(handler) {
        this.lambdaHandlers.push(handler);
    }
    registerSiteEnvironment(environment) {
        this.siteEnvironments.push(environment);
    }
    registerConstruct(construct) {
        const type = construct.constructor.name;
        const stack = Stack_1.Stack.of(construct).node.id;
        const name = construct.node.id;
        const props = construct.getConstructInfo();
        this.constructs.push({ type, stack, name, props });
    }
    processInputFiles() {
        // Get input files
        const inputFilesBySrcPath = {};
        this.lambdaHandlers.forEach(({ srcPath, handler, runtime }) => {
            if (!runtime.startsWith("nodejs")) {
                return;
            }
            const metafile = path.join(srcPath, this.buildDir, (0, nodeBuilder_1.getEsbuildMetafileName)(handler));
            const files = this.getInputFilesFromEsbuildMetafile(metafile);
            files.forEach((file) => {
                inputFilesBySrcPath[srcPath] = inputFilesBySrcPath[srcPath] || {};
                inputFilesBySrcPath[srcPath][file] = true;
            });
        });
        // Process each srcPath
        Object.keys(inputFilesBySrcPath).forEach((srcPath) => {
            const inputFiles = Object.keys(inputFilesBySrcPath[srcPath]);
            if (this.lint) {
                this.runLint(srcPath, inputFiles);
            }
            if (this.typeCheck) {
                this.runTypeCheck(srcPath, inputFiles);
            }
        });
    }
    getInputFilesFromEsbuildMetafile(file) {
        let metaJson;
        try {
            metaJson = fs.readJsonSync(file);
        }
        catch (e) {
            exitWithMessage("There was a problem reading the esbuild metafile.");
        }
        return Object.keys(metaJson.inputs).map((input) => path.resolve(input));
    }
    runLint(srcPath, inputFiles) {
        inputFiles = inputFiles.filter((file) => file.indexOf("node_modules") === -1 &&
            (file.endsWith(".ts") || file.endsWith(".js")));
        console.log(chalk_1.default.grey("Linting Lambda function source"));
        const response = spawn.sync("node", [
            path.join(appPath, this.buildDir, "eslint.js"),
            process.env.NO_COLOR === "true" ? "--no-color" : "--color",
            ...inputFiles,
        ], 
        // Using the ownPath instead of the appPath because there are cases
        // where npm flattens the dependecies and this casues eslint to be
        // unable to find the parsers and plugins. The ownPath hack seems
        // to fix this issue.
        // https://github.com/serverless-stack/serverless-stack/pull/68
        // Steps to replicate, repo: https://github.com/jayair/sst-eu-example
        // Do `yarn add standard -D` and `sst build`
        { stdio: "inherit", cwd: getSstCliRootPath() });
        if (response.error) {
            console.log(response.error);
            exitWithMessage("There was a problem linting the source.");
        }
        else if (response.stderr) {
            console.log(response.stderr);
            exitWithMessage("There was a problem linting the source.");
        }
        else if (response.status === 1) {
            exitWithMessage("There was a problem linting the source.");
        }
    }
    runTypeCheck(srcPath, inputFiles) {
        inputFiles = inputFiles.filter((file) => file.endsWith(".ts"));
        if (inputFiles.length === 0) {
            return;
        }
        console.log(chalk_1.default.grey("Type checking Lambda function source"));
        const hasTsconfig = fs.existsSync(path.join(srcPath, "tsconfig.json"));
        if (!hasTsconfig) {
            throw new Error(`Cannot find a "tsconfig.json" in the function's srcPath: ${path.resolve(srcPath)}`);
        }
        try {
            const stdout = (0, child_process_1.execSync)([
                getTsBinPath(),
                "--pretty",
                process.env.NO_COLOR === "true" ? "false" : "true",
                "--noEmit",
            ].join(" "), { cwd: srcPath });
            const output = stdout.toString();
            if (output.trim() !== "") {
                console.log(output);
            }
        }
        catch (e) {
            console.log(e.stdout.toString());
            exitWithMessage("There was a problem type checking the source.");
        }
    }
}
exports.App = App;
//# sourceMappingURL=data:application/json;base64,